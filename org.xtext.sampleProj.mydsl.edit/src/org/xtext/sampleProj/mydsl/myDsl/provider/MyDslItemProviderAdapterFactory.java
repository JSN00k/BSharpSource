/**
 * generated by Xtext 2.13.0
 */
package org.xtext.sampleProj.mydsl.myDsl.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.xtext.sampleProj.mydsl.myDsl.util.MyDslAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MyDslItemProviderAdapterFactory extends MyDslAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MyDslItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.DomainModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainModelItemProvider domainModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.DomainModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainModelAdapter() {
		if (domainModelItemProvider == null) {
			domainModelItemProvider = new DomainModelItemProvider(this);
		}

		return domainModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.TopLevel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopLevelItemProvider topLevelItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.TopLevel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopLevelAdapter() {
		if (topLevelItemProvider == null) {
			topLevelItemProvider = new TopLevelItemProvider(this);
		}

		return topLevelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.ImportStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportStatementItemProvider importStatementItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.ImportStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportStatementAdapter() {
		if (importStatementItemProvider == null) {
			importStatementItemProvider = new ImportStatementItemProvider(this);
		}

		return importStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.Import} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportItemProvider importItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.Import}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportAdapter() {
		if (importItemProvider == null) {
			importItemProvider = new ImportItemProvider(this);
		}

		return importItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.ImportComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportComponentItemProvider importComponentItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.ImportComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportComponentAdapter() {
		if (importComponentItemProvider == null) {
			importComponentItemProvider = new ImportComponentItemProvider(this);
		}

		return importComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.ClassDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassDeclItemProvider classDeclItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.ClassDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassDeclAdapter() {
		if (classDeclItemProvider == null) {
			classDeclItemProvider = new ClassDeclItemProvider(this);
		}

		return classDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.BppClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BppClassItemProvider bppClassItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.BppClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBppClassAdapter() {
		if (bppClassItemProvider == null) {
			bppClassItemProvider = new BppClassItemProvider(this);
		}

		return bppClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.GenName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenNameItemProvider genNameItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.GenName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenNameAdapter() {
		if (genNameItemProvider == null) {
			genNameItemProvider = new GenNameItemProvider(this);
		}

		return genNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.TypeName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeNameItemProvider typeNameItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.TypeName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeNameAdapter() {
		if (typeNameItemProvider == null) {
			typeNameItemProvider = new TypeNameItemProvider(this);
		}

		return typeNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.PolymorphicTypeName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PolymorphicTypeNameItemProvider polymorphicTypeNameItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.PolymorphicTypeName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPolymorphicTypeNameAdapter() {
		if (polymorphicTypeNameItemProvider == null) {
			polymorphicTypeNameItemProvider = new PolymorphicTypeNameItemProvider(this);
		}

		return polymorphicTypeNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.PolyContext} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PolyContextItemProvider polyContextItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.PolyContext}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPolyContextAdapter() {
		if (polyContextItemProvider == null) {
			polyContextItemProvider = new PolyContextItemProvider(this);
		}

		return polyContextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.PolyContextTypes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PolyContextTypesItemProvider polyContextTypesItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.PolyContextTypes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPolyContextTypesAdapter() {
		if (polyContextTypesItemProvider == null) {
			polyContextTypesItemProvider = new PolyContextTypesItemProvider(this);
		}

		return polyContextTypesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.PolyTypeConstraints} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PolyTypeConstraintsItemProvider polyTypeConstraintsItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.PolyTypeConstraints}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPolyTypeConstraintsAdapter() {
		if (polyTypeConstraintsItemProvider == null) {
			polyTypeConstraintsItemProvider = new PolyTypeConstraintsItemProvider(this);
		}

		return polyTypeConstraintsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.SuperTypeList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SuperTypeListItemProvider superTypeListItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.SuperTypeList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSuperTypeListAdapter() {
		if (superTypeListItemProvider == null) {
			superTypeListItemProvider = new SuperTypeListItemProvider(this);
		}

		return superTypeListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.ConstructedType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstructedTypeItemProvider constructedTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.ConstructedType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstructedTypeAdapter() {
		if (constructedTypeItemProvider == null) {
			constructedTypeItemProvider = new ConstructedTypeItemProvider(this);
		}

		return constructedTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.TypeConstructor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeConstructorItemProvider typeConstructorItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.TypeConstructor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeConstructorAdapter() {
		if (typeConstructorItemProvider == null) {
			typeConstructorItemProvider = new TypeConstructorItemProvider(this);
		}

		return typeConstructorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.TypeDeclContext} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeDeclContextItemProvider typeDeclContextItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.TypeDeclContext}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeDeclContextAdapter() {
		if (typeDeclContextItemProvider == null) {
			typeDeclContextItemProvider = new TypeDeclContextItemProvider(this);
		}

		return typeDeclContextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.TypeStructure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeStructureItemProvider typeStructureItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.TypeStructure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeStructureAdapter() {
		if (typeStructureItemProvider == null) {
			typeStructureItemProvider = new TypeStructureItemProvider(this);
		}

		return typeStructureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.Where} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhereItemProvider whereItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.Where}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhereAdapter() {
		if (whereItemProvider == null) {
			whereItemProvider = new WhereItemProvider(this);
		}

		return whereItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.Datatype} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatatypeItemProvider datatypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.Datatype}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatatypeAdapter() {
		if (datatypeItemProvider == null) {
			datatypeItemProvider = new DatatypeItemProvider(this);
		}

		return datatypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.DatatypeConstructor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatatypeConstructorItemProvider datatypeConstructorItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.DatatypeConstructor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatatypeConstructorAdapter() {
		if (datatypeConstructorItemProvider == null) {
			datatypeConstructorItemProvider = new DatatypeConstructorItemProvider(this);
		}

		return datatypeConstructorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.Extend} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExtendItemProvider extendItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.Extend}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExtendAdapter() {
		if (extendItemProvider == null) {
			extendItemProvider = new ExtendItemProvider(this);
		}

		return extendItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.TypeBodyElements} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeBodyElementsItemProvider typeBodyElementsItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.TypeBodyElements}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeBodyElementsAdapter() {
		if (typeBodyElementsItemProvider == null) {
			typeBodyElementsItemProvider = new TypeBodyElementsItemProvider(this);
		}

		return typeBodyElementsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.FunctionDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionDeclItemProvider functionDeclItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.FunctionDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionDeclAdapter() {
		if (functionDeclItemProvider == null) {
			functionDeclItemProvider = new FunctionDeclItemProvider(this);
		}

		return functionDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.FunctionName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionNameItemProvider functionNameItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.FunctionName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionNameAdapter() {
		if (functionNameItemProvider == null) {
			functionNameItemProvider = new FunctionNameItemProvider(this);
		}

		return functionNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.FunctionBody} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionBodyItemProvider functionBodyItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.FunctionBody}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionBodyAdapter() {
		if (functionBodyItemProvider == null) {
			functionBodyItemProvider = new FunctionBodyItemProvider(this);
		}

		return functionBodyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.FuncDirectDef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FuncDirectDefItemProvider funcDirectDefItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.FuncDirectDef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFuncDirectDefAdapter() {
		if (funcDirectDefItemProvider == null) {
			funcDirectDefItemProvider = new FuncDirectDefItemProvider(this);
		}

		return funcDirectDefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.FuncInductive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FuncInductiveItemProvider funcInductiveItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.FuncInductive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFuncInductiveAdapter() {
		if (funcInductiveItemProvider == null) {
			funcInductiveItemProvider = new FuncInductiveItemProvider(this);
		}

		return funcInductiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.FuncInductiveCase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FuncInductiveCaseItemProvider funcInductiveCaseItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.FuncInductiveCase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFuncInductiveCaseAdapter() {
		if (funcInductiveCaseItemProvider == null) {
			funcInductiveCaseItemProvider = new FuncInductiveCaseItemProvider(this);
		}

		return funcInductiveCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.TheoremBody} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TheoremBodyItemProvider theoremBodyItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.TheoremBody}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTheoremBodyAdapter() {
		if (theoremBodyItemProvider == null) {
			theoremBodyItemProvider = new TheoremBodyItemProvider(this);
		}

		return theoremBodyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.TheoremDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TheoremDeclItemProvider theoremDeclItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.TheoremDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTheoremDeclAdapter() {
		if (theoremDeclItemProvider == null) {
			theoremDeclItemProvider = new TheoremDeclItemProvider(this);
		}

		return theoremDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.TypedVariableList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypedVariableListItemProvider typedVariableListItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.TypedVariableList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypedVariableListAdapter() {
		if (typedVariableListItemProvider == null) {
			typedVariableListItemProvider = new TypedVariableListItemProvider(this);
		}

		return typedVariableListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.VariableTyping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableTypingItemProvider variableTypingItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.VariableTyping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableTypingAdapter() {
		if (variableTypingItemProvider == null) {
			variableTypingItemProvider = new VariableTypingItemProvider(this);
		}

		return variableTypingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.TypedVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypedVariableItemProvider typedVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.TypedVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypedVariableAdapter() {
		if (typedVariableItemProvider == null) {
			typedVariableItemProvider = new TypedVariableItemProvider(this);
		}

		return typedVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.TypeDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeDeclarationItemProvider typeDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.TypeDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeDeclarationAdapter() {
		if (typeDeclarationItemProvider == null) {
			typeDeclarationItemProvider = new TypeDeclarationItemProvider(this);
		}

		return typeDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.QuantLambda} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuantLambdaItemProvider quantLambdaItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.QuantLambda}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuantLambdaAdapter() {
		if (quantLambdaItemProvider == null) {
			quantLambdaItemProvider = new QuantLambdaItemProvider(this);
		}

		return quantLambdaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.Expression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionItemProvider expressionItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.Expression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionAdapter() {
		if (expressionItemProvider == null) {
			expressionItemProvider = new ExpressionItemProvider(this);
		}

		return expressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.Prefix} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrefixItemProvider prefixItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.Prefix}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrefixAdapter() {
		if (prefixItemProvider == null) {
			prefixItemProvider = new PrefixItemProvider(this);
		}

		return prefixItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.ExpressionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionTypeItemProvider expressionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.ExpressionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionTypeAdapter() {
		if (expressionTypeItemProvider == null) {
			expressionTypeItemProvider = new ExpressionTypeItemProvider(this);
		}

		return expressionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.ExpressionVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionVariableItemProvider expressionVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.ExpressionVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionVariableAdapter() {
		if (expressionVariableItemProvider == null) {
			expressionVariableItemProvider = new ExpressionVariableItemProvider(this);
		}

		return expressionVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.TypeInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeInstanceItemProvider typeInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.TypeInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeInstanceAdapter() {
		if (typeInstanceItemProvider == null) {
			typeInstanceItemProvider = new TypeInstanceItemProvider(this);
		}

		return typeInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.InbuiltTypeScan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InbuiltTypeScanItemProvider inbuiltTypeScanItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.InbuiltTypeScan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInbuiltTypeScanAdapter() {
		if (inbuiltTypeScanItemProvider == null) {
			inbuiltTypeScanItemProvider = new InbuiltTypeScanItemProvider(this);
		}

		return inbuiltTypeScanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.Instance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstanceItemProvider instanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.Instance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstanceAdapter() {
		if (instanceItemProvider == null) {
			instanceItemProvider = new InstanceItemProvider(this);
		}

		return instanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.sampleProj.mydsl.myDsl.Infix} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfixItemProvider infixItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.sampleProj.mydsl.myDsl.Infix}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfixAdapter() {
		if (infixItemProvider == null) {
			infixItemProvider = new InfixItemProvider(this);
		}

		return infixItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (domainModelItemProvider != null) domainModelItemProvider.dispose();
		if (topLevelItemProvider != null) topLevelItemProvider.dispose();
		if (importStatementItemProvider != null) importStatementItemProvider.dispose();
		if (importItemProvider != null) importItemProvider.dispose();
		if (importComponentItemProvider != null) importComponentItemProvider.dispose();
		if (classDeclItemProvider != null) classDeclItemProvider.dispose();
		if (bppClassItemProvider != null) bppClassItemProvider.dispose();
		if (genNameItemProvider != null) genNameItemProvider.dispose();
		if (typeNameItemProvider != null) typeNameItemProvider.dispose();
		if (polymorphicTypeNameItemProvider != null) polymorphicTypeNameItemProvider.dispose();
		if (polyContextItemProvider != null) polyContextItemProvider.dispose();
		if (polyContextTypesItemProvider != null) polyContextTypesItemProvider.dispose();
		if (polyTypeConstraintsItemProvider != null) polyTypeConstraintsItemProvider.dispose();
		if (superTypeListItemProvider != null) superTypeListItemProvider.dispose();
		if (constructedTypeItemProvider != null) constructedTypeItemProvider.dispose();
		if (typeConstructorItemProvider != null) typeConstructorItemProvider.dispose();
		if (typeDeclContextItemProvider != null) typeDeclContextItemProvider.dispose();
		if (typeStructureItemProvider != null) typeStructureItemProvider.dispose();
		if (whereItemProvider != null) whereItemProvider.dispose();
		if (datatypeItemProvider != null) datatypeItemProvider.dispose();
		if (datatypeConstructorItemProvider != null) datatypeConstructorItemProvider.dispose();
		if (extendItemProvider != null) extendItemProvider.dispose();
		if (typeBodyElementsItemProvider != null) typeBodyElementsItemProvider.dispose();
		if (functionDeclItemProvider != null) functionDeclItemProvider.dispose();
		if (functionNameItemProvider != null) functionNameItemProvider.dispose();
		if (functionBodyItemProvider != null) functionBodyItemProvider.dispose();
		if (funcDirectDefItemProvider != null) funcDirectDefItemProvider.dispose();
		if (funcInductiveItemProvider != null) funcInductiveItemProvider.dispose();
		if (funcInductiveCaseItemProvider != null) funcInductiveCaseItemProvider.dispose();
		if (theoremBodyItemProvider != null) theoremBodyItemProvider.dispose();
		if (theoremDeclItemProvider != null) theoremDeclItemProvider.dispose();
		if (typedVariableListItemProvider != null) typedVariableListItemProvider.dispose();
		if (variableTypingItemProvider != null) variableTypingItemProvider.dispose();
		if (typedVariableItemProvider != null) typedVariableItemProvider.dispose();
		if (typeDeclarationItemProvider != null) typeDeclarationItemProvider.dispose();
		if (quantLambdaItemProvider != null) quantLambdaItemProvider.dispose();
		if (expressionItemProvider != null) expressionItemProvider.dispose();
		if (prefixItemProvider != null) prefixItemProvider.dispose();
		if (expressionTypeItemProvider != null) expressionTypeItemProvider.dispose();
		if (expressionVariableItemProvider != null) expressionVariableItemProvider.dispose();
		if (typeInstanceItemProvider != null) typeInstanceItemProvider.dispose();
		if (inbuiltTypeScanItemProvider != null) inbuiltTypeScanItemProvider.dispose();
		if (instanceItemProvider != null) instanceItemProvider.dispose();
		if (infixItemProvider != null) infixItemProvider.dispose();
	}

}
