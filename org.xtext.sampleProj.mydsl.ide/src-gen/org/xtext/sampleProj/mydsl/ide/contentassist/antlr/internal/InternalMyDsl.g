/*
 * generated by Xtext 2.13.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.sampleProj.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.sampleProj.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.sampleProj.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDomainModel
entryRuleDomainModel
:
{ before(grammarAccess.getDomainModelRule()); }
	 ruleDomainModel
{ after(grammarAccess.getDomainModelRule()); } 
	 EOF 
;

// Rule DomainModel
ruleDomainModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDomainModelAccess().getElementsAssignment()); }
		(rule__DomainModel__ElementsAssignment)*
		{ after(grammarAccess.getDomainModelAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTopLevel
entryRuleTopLevel
:
{ before(grammarAccess.getTopLevelRule()); }
	 ruleTopLevel
{ after(grammarAccess.getTopLevelRule()); } 
	 EOF 
;

// Rule TopLevel
ruleTopLevel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTopLevelAccess().getAlternatives()); }
		(rule__TopLevel__Alternatives)
		{ after(grammarAccess.getTopLevelAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImportStatement
entryRuleImportStatement
:
{ before(grammarAccess.getImportStatementRule()); }
	 ruleImportStatement
{ after(grammarAccess.getImportStatementRule()); } 
	 EOF 
;

// Rule ImportStatement
ruleImportStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportStatementAccess().getGroup()); }
		(rule__ImportStatement__Group__0)
		{ after(grammarAccess.getImportStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImport
entryRuleImport
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportAccess().getGroup()); }
		(rule__Import__Group__0)
		{ after(grammarAccess.getImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImportComponent
entryRuleImportComponent
:
{ before(grammarAccess.getImportComponentRule()); }
	 ruleImportComponent
{ after(grammarAccess.getImportComponentRule()); } 
	 EOF 
;

// Rule ImportComponent
ruleImportComponent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportComponentAccess().getNameAssignment()); }
		(rule__ImportComponent__NameAssignment)
		{ after(grammarAccess.getImportComponentAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClassDecl
entryRuleClassDecl
:
{ before(grammarAccess.getClassDeclRule()); }
	 ruleClassDecl
{ after(grammarAccess.getClassDeclRule()); } 
	 EOF 
;

// Rule ClassDecl
ruleClassDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassDeclAccess().getAlternatives()); }
		(rule__ClassDecl__Alternatives)
		{ after(grammarAccess.getClassDeclAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClass
entryRuleClass
:
{ before(grammarAccess.getClassRule()); }
	 ruleClass
{ after(grammarAccess.getClassRule()); } 
	 EOF 
;

// Rule Class
ruleClass 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassAccess().getGroup()); }
		(rule__Class__Group__0)
		{ after(grammarAccess.getClassAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeName
entryRuleTypeName
:
{ before(grammarAccess.getTypeNameRule()); }
	 ruleTypeName
{ after(grammarAccess.getTypeNameRule()); } 
	 EOF 
;

// Rule TypeName
ruleTypeName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeNameAccess().getNameAssignment()); }
		(rule__TypeName__NameAssignment)
		{ after(grammarAccess.getTypeNameAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePolymorphicTypeName
entryRulePolymorphicTypeName
:
{ before(grammarAccess.getPolymorphicTypeNameRule()); }
	 rulePolymorphicTypeName
{ after(grammarAccess.getPolymorphicTypeNameRule()); } 
	 EOF 
;

// Rule PolymorphicTypeName
rulePolymorphicTypeName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPolymorphicTypeNameAccess().getNameAssignment()); }
		(rule__PolymorphicTypeName__NameAssignment)
		{ after(grammarAccess.getPolymorphicTypeNameAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePolyContext
entryRulePolyContext
:
{ before(grammarAccess.getPolyContextRule()); }
	 rulePolyContext
{ after(grammarAccess.getPolyContextRule()); } 
	 EOF 
;

// Rule PolyContext
rulePolyContext 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPolyContextAccess().getGroup()); }
		(rule__PolyContext__Group__0)
		{ after(grammarAccess.getPolyContextAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePolyContextTypes
entryRulePolyContextTypes
:
{ before(grammarAccess.getPolyContextTypesRule()); }
	 rulePolyContextTypes
{ after(grammarAccess.getPolyContextTypesRule()); } 
	 EOF 
;

// Rule PolyContextTypes
rulePolyContextTypes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPolyContextTypesAccess().getGroup()); }
		(rule__PolyContextTypes__Group__0)
		{ after(grammarAccess.getPolyContextTypesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePolyTypeConstraints
entryRulePolyTypeConstraints
:
{ before(grammarAccess.getPolyTypeConstraintsRule()); }
	 rulePolyTypeConstraints
{ after(grammarAccess.getPolyTypeConstraintsRule()); } 
	 EOF 
;

// Rule PolyTypeConstraints
rulePolyTypeConstraints 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPolyTypeConstraintsAccess().getGroup()); }
		(rule__PolyTypeConstraints__Group__0)
		{ after(grammarAccess.getPolyTypeConstraintsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSuperTypeList
entryRuleSuperTypeList
:
{ before(grammarAccess.getSuperTypeListRule()); }
	 ruleSuperTypeList
{ after(grammarAccess.getSuperTypeListRule()); } 
	 EOF 
;

// Rule SuperTypeList
ruleSuperTypeList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSuperTypeListAccess().getGroup()); }
		(rule__SuperTypeList__Group__0)
		{ after(grammarAccess.getSuperTypeListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstructedType
entryRuleConstructedType
:
{ before(grammarAccess.getConstructedTypeRule()); }
	 ruleConstructedType
{ after(grammarAccess.getConstructedTypeRule()); } 
	 EOF 
;

// Rule ConstructedType
ruleConstructedType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstructedTypeAccess().getGroup()); }
		(rule__ConstructedType__Group__0)
		{ after(grammarAccess.getConstructedTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeConstructor
entryRuleTypeConstructor
:
{ before(grammarAccess.getTypeConstructorRule()); }
	 ruleTypeConstructor
{ after(grammarAccess.getTypeConstructorRule()); } 
	 EOF 
;

// Rule TypeConstructor
ruleTypeConstructor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeConstructorAccess().getGroup()); }
		(rule__TypeConstructor__Group__0)
		{ after(grammarAccess.getTypeConstructorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeDeclContext
entryRuleTypeDeclContext
:
{ before(grammarAccess.getTypeDeclContextRule()); }
	 ruleTypeDeclContext
{ after(grammarAccess.getTypeDeclContextRule()); } 
	 EOF 
;

// Rule TypeDeclContext
ruleTypeDeclContext 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeDeclContextAccess().getGroup()); }
		(rule__TypeDeclContext__Group__0)
		{ after(grammarAccess.getTypeDeclContextAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhere
entryRuleWhere
:
{ before(grammarAccess.getWhereRule()); }
	 ruleWhere
{ after(grammarAccess.getWhereRule()); } 
	 EOF 
;

// Rule Where
ruleWhere 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhereAccess().getGroup()); }
		(rule__Where__Group__0)
		{ after(grammarAccess.getWhereAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDatatype
entryRuleDatatype
:
{ before(grammarAccess.getDatatypeRule()); }
	 ruleDatatype
{ after(grammarAccess.getDatatypeRule()); } 
	 EOF 
;

// Rule Datatype
ruleDatatype 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDatatypeAccess().getGroup()); }
		(rule__Datatype__Group__0)
		{ after(grammarAccess.getDatatypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDatatypeConstructor
entryRuleDatatypeConstructor
:
{ before(grammarAccess.getDatatypeConstructorRule()); }
	 ruleDatatypeConstructor
{ after(grammarAccess.getDatatypeConstructorRule()); } 
	 EOF 
;

// Rule DatatypeConstructor
ruleDatatypeConstructor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDatatypeConstructorAccess().getGroup()); }
		(rule__DatatypeConstructor__Group__0)
		{ after(grammarAccess.getDatatypeConstructorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBaseConstructor
entryRuleBaseConstructor
:
{ before(grammarAccess.getBaseConstructorRule()); }
	 ruleBaseConstructor
{ after(grammarAccess.getBaseConstructorRule()); } 
	 EOF 
;

// Rule BaseConstructor
ruleBaseConstructor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBaseConstructorAccess().getNameAssignment()); }
		(rule__BaseConstructor__NameAssignment)
		{ after(grammarAccess.getBaseConstructorAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDTypeConstructor
entryRuleDTypeConstructor
:
{ before(grammarAccess.getDTypeConstructorRule()); }
	 ruleDTypeConstructor
{ after(grammarAccess.getDTypeConstructorRule()); } 
	 EOF 
;

// Rule DTypeConstructor
ruleDTypeConstructor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDTypeConstructorAccess().getGroup()); }
		(rule__DTypeConstructor__Group__0)
		{ after(grammarAccess.getDTypeConstructorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExtend
entryRuleExtend
:
{ before(grammarAccess.getExtendRule()); }
	 ruleExtend
{ after(grammarAccess.getExtendRule()); } 
	 EOF 
;

// Rule Extend
ruleExtend 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExtendAccess().getGroup()); }
		(rule__Extend__Group__0)
		{ after(grammarAccess.getExtendAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeBodyElements
entryRuleTypeBodyElements
:
{ before(grammarAccess.getTypeBodyElementsRule()); }
	 ruleTypeBodyElements
{ after(grammarAccess.getTypeBodyElementsRule()); } 
	 EOF 
;

// Rule TypeBodyElements
ruleTypeBodyElements 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeBodyElementsAccess().getAlternatives()); }
		(rule__TypeBodyElements__Alternatives)
		{ after(grammarAccess.getTypeBodyElementsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionDecl
entryRuleFunctionDecl
:
{ before(grammarAccess.getFunctionDeclRule()); }
	 ruleFunctionDecl
{ after(grammarAccess.getFunctionDeclRule()); } 
	 EOF 
;

// Rule FunctionDecl
ruleFunctionDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionDeclAccess().getGroup()); }
		(rule__FunctionDecl__Group__0)
		{ after(grammarAccess.getFunctionDeclAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionBody
entryRuleFunctionBody
:
{ before(grammarAccess.getFunctionBodyRule()); }
	 ruleFunctionBody
{ after(grammarAccess.getFunctionBodyRule()); } 
	 EOF 
;

// Rule FunctionBody
ruleFunctionBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionBodyAccess().getFuncDirectDefParserRuleCall()); }
		ruleFuncDirectDef
		{ after(grammarAccess.getFunctionBodyAccess().getFuncDirectDefParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncDirectDef
entryRuleFuncDirectDef
:
{ before(grammarAccess.getFuncDirectDefRule()); }
	 ruleFuncDirectDef
{ after(grammarAccess.getFuncDirectDefRule()); } 
	 EOF 
;

// Rule FuncDirectDef
ruleFuncDirectDef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncDirectDefAccess().getExpressionAssignment()); }
		(rule__FuncDirectDef__ExpressionAssignment)
		{ after(grammarAccess.getFuncDirectDefAccess().getExpressionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTheoremBody
entryRuleTheoremBody
:
{ before(grammarAccess.getTheoremBodyRule()); }
	 ruleTheoremBody
{ after(grammarAccess.getTheoremBodyRule()); } 
	 EOF 
;

// Rule TheoremBody
ruleTheoremBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTheoremBodyAccess().getNameAssignment()); }
		(rule__TheoremBody__NameAssignment)
		{ after(grammarAccess.getTheoremBodyAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypedVariableList
entryRuleTypedVariableList
:
{ before(grammarAccess.getTypedVariableListRule()); }
	 ruleTypedVariableList
{ after(grammarAccess.getTypedVariableListRule()); } 
	 EOF 
;

// Rule TypedVariableList
ruleTypedVariableList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypedVariableListAccess().getGroup()); }
		(rule__TypedVariableList__Group__0)
		{ after(grammarAccess.getTypedVariableListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypedVariable
entryRuleTypedVariable
:
{ before(grammarAccess.getTypedVariableRule()); }
	 ruleTypedVariable
{ after(grammarAccess.getTypedVariableRule()); } 
	 EOF 
;

// Rule TypedVariable
ruleTypedVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypedVariableAccess().getGroup()); }
		(rule__TypedVariable__Group__0)
		{ after(grammarAccess.getTypedVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionName
entryRuleFunctionName
:
{ before(grammarAccess.getFunctionNameRule()); }
	 ruleFunctionName
{ after(grammarAccess.getFunctionNameRule()); } 
	 EOF 
;

// Rule FunctionName
ruleFunctionName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionNameAccess().getNameAssignment()); }
		(rule__FunctionName__NameAssignment)
		{ after(grammarAccess.getFunctionNameAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getNameAssignment()); }
		(rule__Expression__NameAssignment)
		{ after(grammarAccess.getExpressionAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevel__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTopLevelAccess().getImportStatementParserRuleCall_0()); }
		ruleImportStatement
		{ after(grammarAccess.getTopLevelAccess().getImportStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTopLevelAccess().getClassDeclParserRuleCall_1()); }
		ruleClassDecl
		{ after(grammarAccess.getTopLevelAccess().getClassDeclParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDecl__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassDeclAccess().getClassParserRuleCall_0()); }
		ruleClass
		{ after(grammarAccess.getClassDeclAccess().getClassParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getClassDeclAccess().getDatatypeParserRuleCall_1()); }
		ruleDatatype
		{ after(grammarAccess.getClassDeclAccess().getDatatypeParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getClassDeclAccess().getExtendParserRuleCall_2()); }
		ruleExtend
		{ after(grammarAccess.getClassDeclAccess().getExtendParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructedType__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstructedTypeAccess().getMultiplicationSignKeyword_1_0_0()); }
		'\u00D7'
		{ after(grammarAccess.getConstructedTypeAccess().getMultiplicationSignKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstructedTypeAccess().getRightwardsArrowKeyword_1_0_1()); }
		'\u2192'
		{ after(grammarAccess.getConstructedTypeAccess().getRightwardsArrowKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getConstructedTypeAccess().getPrivateUseAreaE102Keyword_1_0_2()); }
		'\uE102'
		{ after(grammarAccess.getConstructedTypeAccess().getPrivateUseAreaE102Keyword_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getConstructedTypeAccess().getPrivateUseAreaE100Keyword_1_0_3()); }
		'\uE100'
		{ after(grammarAccess.getConstructedTypeAccess().getPrivateUseAreaE100Keyword_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getConstructedTypeAccess().getLeftRightArrowKeyword_1_0_4()); }
		'\u2194'
		{ after(grammarAccess.getConstructedTypeAccess().getLeftRightArrowKeyword_1_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getConstructedTypeAccess().getRightwardsTwoHeadedArrowWithTailKeyword_1_0_5()); }
		'\u2916'
		{ after(grammarAccess.getConstructedTypeAccess().getRightwardsTwoHeadedArrowWithTailKeyword_1_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getConstructedTypeAccess().getRightwardsArrowWithVerticalStrokeKeyword_1_0_6()); }
		'\u21F8'
		{ after(grammarAccess.getConstructedTypeAccess().getRightwardsArrowWithVerticalStrokeKeyword_1_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getConstructedTypeAccess().getRightwardsArrowWithTailKeyword_1_0_7()); }
		'\u21A3'
		{ after(grammarAccess.getConstructedTypeAccess().getRightwardsArrowWithTailKeyword_1_0_7()); }
	)
	|
	(
		{ before(grammarAccess.getConstructedTypeAccess().getRightwardsTwoHeadedArrowWithVerticalStrokeKeyword_1_0_8()); }
		'\u2900'
		{ after(grammarAccess.getConstructedTypeAccess().getRightwardsTwoHeadedArrowWithVerticalStrokeKeyword_1_0_8()); }
	)
	|
	(
		{ before(grammarAccess.getConstructedTypeAccess().getRightwardsTwoHeadedArrowKeyword_1_0_9()); }
		'\u21A0'
		{ after(grammarAccess.getConstructedTypeAccess().getRightwardsTwoHeadedArrowKeyword_1_0_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeConstructor__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypeConstructorAccess().getBaseConstructorParserRuleCall_1_0()); }
		ruleBaseConstructor
		{ after(grammarAccess.getDatatypeConstructorAccess().getBaseConstructorParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getDatatypeConstructorAccess().getDTypeConstructorParserRuleCall_1_1()); }
		ruleDTypeConstructor
		{ after(grammarAccess.getDatatypeConstructorAccess().getDTypeConstructorParserRuleCall_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeBodyElements__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeBodyElementsAccess().getFunctionsAssignment_0()); }
		(rule__TypeBodyElements__FunctionsAssignment_0)
		{ after(grammarAccess.getTypeBodyElementsAccess().getFunctionsAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeBodyElementsAccess().getTheoremsAssignment_1()); }
		(rule__TypeBodyElements__TheoremsAssignment_1)
		{ after(grammarAccess.getTypeBodyElementsAccess().getTheoremsAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportStatement__Group__0__Impl
	rule__ImportStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportStatementAccess().getImportKeyword_0()); }
	'Import'
	{ after(grammarAccess.getImportStatementAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportStatementAccess().getImportsAssignment_1()); }
	(rule__ImportStatement__ImportsAssignment_1)
	{ after(grammarAccess.getImportStatementAccess().getImportsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportNameAssignment_0()); }
	(rule__Import__ImportNameAssignment_0)
	{ after(grammarAccess.getImportAccess().getImportNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getGroup_1()); }
	(rule__Import__Group_1__0)
	{ after(grammarAccess.getImportAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group_1__0__Impl
	rule__Import__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getImportAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportNameAssignment_1_1()); }
	(rule__Import__ImportNameAssignment_1_1)
	{ after(grammarAccess.getImportAccess().getImportNameAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__0__Impl
	rule__Class__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getClassKeyword_0()); }
	'Class'
	{ after(grammarAccess.getClassAccess().getClassKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__1__Impl
	rule__Class__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getTypeNameAssignment_1()); }
	(rule__Class__TypeNameAssignment_1)
	{ after(grammarAccess.getClassAccess().getTypeNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__2__Impl
	rule__Class__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getContextAssignment_2()); }
	(rule__Class__ContextAssignment_2)?
	{ after(grammarAccess.getClassAccess().getContextAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__3__Impl
	rule__Class__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getSupertypesAssignment_3()); }
	(rule__Class__SupertypesAssignment_3)?
	{ after(grammarAccess.getClassAccess().getSupertypesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__4__Impl
	rule__Class__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getWhereAssignment_4()); }
	(rule__Class__WhereAssignment_4)?
	{ after(grammarAccess.getClassAccess().getWhereAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__5__Impl
	rule__Class__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_5()); }
	'{'
	{ after(grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__6__Impl
	rule__Class__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getBodyElementsAssignment_6()); }
	(rule__Class__BodyElementsAssignment_6)*
	{ after(grammarAccess.getClassAccess().getBodyElementsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getClassAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PolyContext__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyContext__Group__0__Impl
	rule__PolyContext__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyContext__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyContextAccess().getLessThanSignKeyword_0()); }
	'<'
	{ after(grammarAccess.getPolyContextAccess().getLessThanSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyContext__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyContext__Group__1__Impl
	rule__PolyContext__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyContext__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getPolyContextAccess().getPolyTypesAssignment_1()); }
		(rule__PolyContext__PolyTypesAssignment_1)
		{ after(grammarAccess.getPolyContextAccess().getPolyTypesAssignment_1()); }
	)
	(
		{ before(grammarAccess.getPolyContextAccess().getPolyTypesAssignment_1()); }
		(rule__PolyContext__PolyTypesAssignment_1)*
		{ after(grammarAccess.getPolyContextAccess().getPolyTypesAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyContext__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyContext__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyContext__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyContextAccess().getGreaterThanSignKeyword_2()); }
	'>'
	{ after(grammarAccess.getPolyContextAccess().getGreaterThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PolyContextTypes__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyContextTypes__Group__0__Impl
	rule__PolyContextTypes__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyContextTypes__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyContextTypesAccess().getNameAssignment_0()); }
	(rule__PolyContextTypes__NameAssignment_0)
	{ after(grammarAccess.getPolyContextTypesAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyContextTypes__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyContextTypes__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyContextTypes__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyContextTypesAccess().getConstraintsAssignment_1()); }
	(rule__PolyContextTypes__ConstraintsAssignment_1)*
	{ after(grammarAccess.getPolyContextTypesAccess().getConstraintsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PolyTypeConstraints__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyTypeConstraints__Group__0__Impl
	rule__PolyTypeConstraints__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyTypeConstraints__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyTypeConstraintsAccess().getColonKeyword_0()); }
	':'
	{ after(grammarAccess.getPolyTypeConstraintsAccess().getColonKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyTypeConstraints__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyTypeConstraints__Group__1__Impl
	rule__PolyTypeConstraints__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyTypeConstraints__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyTypeConstraintsAccess().getTypeNameAssignment_1()); }
	(rule__PolyTypeConstraints__TypeNameAssignment_1)
	{ after(grammarAccess.getPolyTypeConstraintsAccess().getTypeNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyTypeConstraints__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyTypeConstraints__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyTypeConstraints__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyTypeConstraintsAccess().getGroup_2()); }
	(rule__PolyTypeConstraints__Group_2__0)*
	{ after(grammarAccess.getPolyTypeConstraintsAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PolyTypeConstraints__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyTypeConstraints__Group_2__0__Impl
	rule__PolyTypeConstraints__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyTypeConstraints__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyTypeConstraintsAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getPolyTypeConstraintsAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyTypeConstraints__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyTypeConstraints__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyTypeConstraints__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyTypeConstraintsAccess().getTypeNameAssignment_2_1()); }
	(rule__PolyTypeConstraints__TypeNameAssignment_2_1)
	{ after(grammarAccess.getPolyTypeConstraintsAccess().getTypeNameAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SuperTypeList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SuperTypeList__Group__0__Impl
	rule__SuperTypeList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperTypeList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSuperTypeListAccess().getColonKeyword_0()); }
	':'
	{ after(grammarAccess.getSuperTypeListAccess().getColonKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperTypeList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SuperTypeList__Group__1__Impl
	rule__SuperTypeList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperTypeList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSuperTypeListAccess().getSuperTypeAssignment_1()); }
	(rule__SuperTypeList__SuperTypeAssignment_1)
	{ after(grammarAccess.getSuperTypeListAccess().getSuperTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperTypeList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SuperTypeList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperTypeList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSuperTypeListAccess().getGroup_2()); }
	(rule__SuperTypeList__Group_2__0)*
	{ after(grammarAccess.getSuperTypeListAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SuperTypeList__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SuperTypeList__Group_2__0__Impl
	rule__SuperTypeList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperTypeList__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSuperTypeListAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getSuperTypeListAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperTypeList__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SuperTypeList__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperTypeList__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSuperTypeListAccess().getSuperTypeAssignment_2_1()); }
	(rule__SuperTypeList__SuperTypeAssignment_2_1)
	{ after(grammarAccess.getSuperTypeListAccess().getSuperTypeAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructedType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructedType__Group__0__Impl
	rule__ConstructedType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructedType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructedTypeAccess().getTypeAssignment_0()); }
	(rule__ConstructedType__TypeAssignment_0)
	{ after(grammarAccess.getConstructedTypeAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructedType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructedType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructedType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructedTypeAccess().getGroup_1()); }
	(rule__ConstructedType__Group_1__0)?
	{ after(grammarAccess.getConstructedTypeAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructedType__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructedType__Group_1__0__Impl
	rule__ConstructedType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructedType__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructedTypeAccess().getAlternatives_1_0()); }
	(rule__ConstructedType__Alternatives_1_0)
	{ after(grammarAccess.getConstructedTypeAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructedType__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructedType__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructedType__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructedTypeAccess().getTypeAssignment_1_1()); }
	(rule__ConstructedType__TypeAssignment_1_1)
	{ after(grammarAccess.getConstructedTypeAccess().getTypeAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeConstructor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeConstructor__Group__0__Impl
	rule__TypeConstructor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeConstructor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeConstructorAccess().getTypeNameAssignment_0()); }
	(rule__TypeConstructor__TypeNameAssignment_0)
	{ after(grammarAccess.getTypeConstructorAccess().getTypeNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeConstructor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeConstructor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeConstructor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeConstructorAccess().getContextAssignment_1()); }
	(rule__TypeConstructor__ContextAssignment_1)?
	{ after(grammarAccess.getTypeConstructorAccess().getContextAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclContext__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDeclContext__Group__0__Impl
	rule__TypeDeclContext__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDeclContextAccess().getLessThanSignKeyword_0()); }
	'<'
	{ after(grammarAccess.getTypeDeclContextAccess().getLessThanSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDeclContext__Group__1__Impl
	rule__TypeDeclContext__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDeclContextAccess().getTypeNameAssignment_1()); }
	(rule__TypeDeclContext__TypeNameAssignment_1)
	{ after(grammarAccess.getTypeDeclContextAccess().getTypeNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDeclContext__Group__2__Impl
	rule__TypeDeclContext__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDeclContextAccess().getGroup_2()); }
	(rule__TypeDeclContext__Group_2__0)*
	{ after(grammarAccess.getTypeDeclContextAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDeclContext__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDeclContextAccess().getGreaterThanSignKeyword_3()); }
	'>'
	{ after(grammarAccess.getTypeDeclContextAccess().getGreaterThanSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclContext__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDeclContext__Group_2__0__Impl
	rule__TypeDeclContext__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDeclContextAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getTypeDeclContextAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDeclContext__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDeclContextAccess().getTypeNameAssignment_2_1()); }
	(rule__TypeDeclContext__TypeNameAssignment_2_1)
	{ after(grammarAccess.getTypeDeclContextAccess().getTypeNameAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Where__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Where__Group__0__Impl
	rule__Where__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereAccess().getWhereKeyword_0()); }
	'where'
	{ after(grammarAccess.getWhereAccess().getWhereKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Where__Group__1__Impl
	rule__Where__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereAccess().getExpessionsAssignment_1()); }
	(rule__Where__ExpessionsAssignment_1)
	{ after(grammarAccess.getWhereAccess().getExpessionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Where__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereAccess().getGroup_2()); }
	(rule__Where__Group_2__0)
	{ after(grammarAccess.getWhereAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Where__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Where__Group_2__0__Impl
	rule__Where__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereAccess().getSemicolonKeyword_2_0()); }
	';'
	{ after(grammarAccess.getWhereAccess().getSemicolonKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Where__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereAccess().getExpressionsAssignment_2_1()); }
	(rule__Where__ExpressionsAssignment_2_1)
	{ after(grammarAccess.getWhereAccess().getExpressionsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Datatype__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Datatype__Group__0__Impl
	rule__Datatype__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeAccess().getDatatypeKeyword_0()); }
	'Datatype'
	{ after(grammarAccess.getDatatypeAccess().getDatatypeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Datatype__Group__1__Impl
	rule__Datatype__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeAccess().getNameAssignment_1()); }
	(rule__Datatype__NameAssignment_1)
	{ after(grammarAccess.getDatatypeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Datatype__Group__2__Impl
	rule__Datatype__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeAccess().getContextAssignment_2()); }
	(rule__Datatype__ContextAssignment_2)?
	{ after(grammarAccess.getDatatypeAccess().getContextAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Datatype__Group__3__Impl
	rule__Datatype__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeAccess().getConstructorsAssignment_3()); }
	(rule__Datatype__ConstructorsAssignment_3)*
	{ after(grammarAccess.getDatatypeAccess().getConstructorsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Datatype__Group__4__Impl
	rule__Datatype__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getDatatypeAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Datatype__Group__5__Impl
	rule__Datatype__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeAccess().getBodyElementsAssignment_5()); }
	(rule__Datatype__BodyElementsAssignment_5)*
	{ after(grammarAccess.getDatatypeAccess().getBodyElementsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Datatype__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getDatatypeAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DatatypeConstructor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DatatypeConstructor__Group__0__Impl
	rule__DatatypeConstructor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeConstructor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeConstructorAccess().getVerticalLineKeyword_0()); }
	'|'
	{ after(grammarAccess.getDatatypeConstructorAccess().getVerticalLineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeConstructor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DatatypeConstructor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeConstructor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeConstructorAccess().getAlternatives_1()); }
	(rule__DatatypeConstructor__Alternatives_1)
	{ after(grammarAccess.getDatatypeConstructorAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DTypeConstructor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DTypeConstructor__Group__0__Impl
	rule__DTypeConstructor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DTypeConstructor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDTypeConstructorAccess().getNameAssignment_0()); }
	(rule__DTypeConstructor__NameAssignment_0)
	{ after(grammarAccess.getDTypeConstructorAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DTypeConstructor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DTypeConstructor__Group__1__Impl
	rule__DTypeConstructor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DTypeConstructor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDTypeConstructorAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getDTypeConstructorAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DTypeConstructor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DTypeConstructor__Group__2__Impl
	rule__DTypeConstructor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DTypeConstructor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDTypeConstructorAccess().getDeconsAssignment_2()); }
	(rule__DTypeConstructor__DeconsAssignment_2)
	{ after(grammarAccess.getDTypeConstructorAccess().getDeconsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DTypeConstructor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DTypeConstructor__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DTypeConstructor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDTypeConstructorAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getDTypeConstructorAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Extend__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Extend__Group__0__Impl
	rule__Extend__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendAccess().getNameAssignment_0()); }
	(rule__Extend__NameAssignment_0)
	{ after(grammarAccess.getExtendAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Extend__Group__1__Impl
	rule__Extend__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getExtendAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Extend__Group__2__Impl
	rule__Extend__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendAccess().getExtesnionAssignment_2()); }
	(rule__Extend__ExtesnionAssignment_2)
	{ after(grammarAccess.getExtendAccess().getExtesnionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Extend__Group__3__Impl
	rule__Extend__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getExtendAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Extend__Group__4__Impl
	rule__Extend__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getExtendAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Extend__Group__5__Impl
	rule__Extend__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendAccess().getBodyElementsAssignment_5()); }
	(rule__Extend__BodyElementsAssignment_5)*
	{ after(grammarAccess.getExtendAccess().getBodyElementsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Extend__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getExtendAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDecl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDecl__Group__0__Impl
	rule__FunctionDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclAccess().getNameAssignment_0()); }
	(rule__FunctionDecl__NameAssignment_0)
	{ after(grammarAccess.getFunctionDeclAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDecl__Group__1__Impl
	rule__FunctionDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclAccess().getContextAssignment_1()); }
	(rule__FunctionDecl__ContextAssignment_1)?
	{ after(grammarAccess.getFunctionDeclAccess().getContextAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDecl__Group__2__Impl
	rule__FunctionDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getFunctionDeclAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDecl__Group__3__Impl
	rule__FunctionDecl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclAccess().getVariablesAssignment_3()); }
	(rule__FunctionDecl__VariablesAssignment_3)?
	{ after(grammarAccess.getFunctionDeclAccess().getVariablesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDecl__Group__4__Impl
	rule__FunctionDecl__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getFunctionDeclAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDecl__Group__5__Impl
	rule__FunctionDecl__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclAccess().getBodyAssignment_5()); }
	(rule__FunctionDecl__BodyAssignment_5)
	{ after(grammarAccess.getFunctionDeclAccess().getBodyAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDecl__Group__6__Impl
	rule__FunctionDecl__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclAccess().getColonKeyword_6()); }
	':'
	{ after(grammarAccess.getFunctionDeclAccess().getColonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDecl__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclAccess().getReturnTypeAssignment_7()); }
	(rule__FunctionDecl__ReturnTypeAssignment_7)
	{ after(grammarAccess.getFunctionDeclAccess().getReturnTypeAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypedVariableList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypedVariableList__Group__0__Impl
	rule__TypedVariableList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariableList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypedVariableListAccess().getTypeVarAssignment_0()); }
	(rule__TypedVariableList__TypeVarAssignment_0)
	{ after(grammarAccess.getTypedVariableListAccess().getTypeVarAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariableList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypedVariableList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariableList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypedVariableListAccess().getGroup_1()); }
	(rule__TypedVariableList__Group_1__0)
	{ after(grammarAccess.getTypedVariableListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypedVariableList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypedVariableList__Group_1__0__Impl
	rule__TypedVariableList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariableList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypedVariableListAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getTypedVariableListAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariableList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypedVariableList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariableList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypedVariableListAccess().getTypeVarAssignment_1_1()); }
	(rule__TypedVariableList__TypeVarAssignment_1_1)
	{ after(grammarAccess.getTypedVariableListAccess().getTypeVarAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypedVariable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypedVariable__Group__0__Impl
	rule__TypedVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypedVariableAccess().getNameAssignment_0()); }
	(rule__TypedVariable__NameAssignment_0)
	{ after(grammarAccess.getTypedVariableAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypedVariable__Group__1__Impl
	rule__TypedVariable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypedVariableAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getTypedVariableAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypedVariable__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypedVariableAccess().getTypeAssignment_2()); }
	(rule__TypedVariable__TypeAssignment_2)
	{ after(grammarAccess.getTypedVariableAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DomainModel__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDomainModelAccess().getElementsTopLevelParserRuleCall_0()); }
		ruleTopLevel
		{ after(grammarAccess.getDomainModelAccess().getElementsTopLevelParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportStatement__ImportsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportStatementAccess().getImportsImportParserRuleCall_1_0()); }
		ruleImport
		{ after(grammarAccess.getImportStatementAccess().getImportsImportParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getImportNameImportComponentParserRuleCall_0_0()); }
		ruleImportComponent
		{ after(grammarAccess.getImportAccess().getImportNameImportComponentParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportNameAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getImportNameImportComponentParserRuleCall_1_1_0()); }
		ruleImportComponent
		{ after(grammarAccess.getImportAccess().getImportNameImportComponentParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportComponent__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportComponentAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getImportComponentAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__TypeNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getTypeNameTypeNameParserRuleCall_1_0()); }
		ruleTypeName
		{ after(grammarAccess.getClassAccess().getTypeNameTypeNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__ContextAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getContextPolyContextParserRuleCall_2_0()); }
		rulePolyContext
		{ after(grammarAccess.getClassAccess().getContextPolyContextParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__SupertypesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getSupertypesSuperTypeListParserRuleCall_3_0()); }
		ruleSuperTypeList
		{ after(grammarAccess.getClassAccess().getSupertypesSuperTypeListParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__WhereAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getWhereWhereParserRuleCall_4_0()); }
		ruleWhere
		{ after(grammarAccess.getClassAccess().getWhereWhereParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__BodyElementsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getBodyElementsTypeBodyElementsParserRuleCall_6_0()); }
		ruleTypeBodyElements
		{ after(grammarAccess.getClassAccess().getBodyElementsTypeBodyElementsParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeName__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeNameAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getTypeNameAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolymorphicTypeName__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolymorphicTypeNameAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getPolymorphicTypeNameAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyContext__PolyTypesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolyContextAccess().getPolyTypesPolyContextTypesParserRuleCall_1_0()); }
		rulePolyContextTypes
		{ after(grammarAccess.getPolyContextAccess().getPolyTypesPolyContextTypesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyContextTypes__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolyContextTypesAccess().getNamePolymorphicTypeNameParserRuleCall_0_0()); }
		rulePolymorphicTypeName
		{ after(grammarAccess.getPolyContextTypesAccess().getNamePolymorphicTypeNameParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyContextTypes__ConstraintsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolyContextTypesAccess().getConstraintsPolyTypeConstraintsParserRuleCall_1_0()); }
		rulePolyTypeConstraints
		{ after(grammarAccess.getPolyContextTypesAccess().getConstraintsPolyTypeConstraintsParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyTypeConstraints__TypeNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolyTypeConstraintsAccess().getTypeNameTypeNameCrossReference_1_0()); }
		(
			{ before(grammarAccess.getPolyTypeConstraintsAccess().getTypeNameTypeNameIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPolyTypeConstraintsAccess().getTypeNameTypeNameIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getPolyTypeConstraintsAccess().getTypeNameTypeNameCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyTypeConstraints__TypeNameAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolyTypeConstraintsAccess().getTypeNameTypeNameCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getPolyTypeConstraintsAccess().getTypeNameTypeNameIDTerminalRuleCall_2_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPolyTypeConstraintsAccess().getTypeNameTypeNameIDTerminalRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getPolyTypeConstraintsAccess().getTypeNameTypeNameCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperTypeList__SuperTypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSuperTypeListAccess().getSuperTypeConstructedTypeParserRuleCall_1_0()); }
		ruleConstructedType
		{ after(grammarAccess.getSuperTypeListAccess().getSuperTypeConstructedTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperTypeList__SuperTypeAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSuperTypeListAccess().getSuperTypeConstructedTypeParserRuleCall_2_1_0()); }
		ruleConstructedType
		{ after(grammarAccess.getSuperTypeListAccess().getSuperTypeConstructedTypeParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructedType__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstructedTypeAccess().getTypeTypeConstructorParserRuleCall_0_0()); }
		ruleTypeConstructor
		{ after(grammarAccess.getConstructedTypeAccess().getTypeTypeConstructorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructedType__TypeAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstructedTypeAccess().getTypeConstructedTypeParserRuleCall_1_1_0()); }
		ruleConstructedType
		{ after(grammarAccess.getConstructedTypeAccess().getTypeConstructedTypeParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeConstructor__TypeNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeConstructorAccess().getTypeNameNameCrossReference_0_0()); }
		(
			{ before(grammarAccess.getTypeConstructorAccess().getTypeNameNameIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTypeConstructorAccess().getTypeNameNameIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getTypeConstructorAccess().getTypeNameNameCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeConstructor__ContextAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeConstructorAccess().getContextTypeDeclContextParserRuleCall_1_0()); }
		ruleTypeDeclContext
		{ after(grammarAccess.getTypeConstructorAccess().getContextTypeDeclContextParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__TypeNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeDeclContextAccess().getTypeNameConstructedTypeParserRuleCall_1_0()); }
		ruleConstructedType
		{ after(grammarAccess.getTypeDeclContextAccess().getTypeNameConstructedTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__TypeNameAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeDeclContextAccess().getTypeNameConstructedTypeParserRuleCall_2_1_0()); }
		ruleConstructedType
		{ after(grammarAccess.getTypeDeclContextAccess().getTypeNameConstructedTypeParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__ExpessionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhereAccess().getExpessionsExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getWhereAccess().getExpessionsExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__ExpressionsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhereAccess().getExpressionsExpressionParserRuleCall_2_1_0()); }
		ruleExpression
		{ after(grammarAccess.getWhereAccess().getExpressionsExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypeAccess().getNameTypeNameParserRuleCall_1_0()); }
		ruleTypeName
		{ after(grammarAccess.getDatatypeAccess().getNameTypeNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__ContextAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypeAccess().getContextPolyContextParserRuleCall_2_0()); }
		rulePolyContext
		{ after(grammarAccess.getDatatypeAccess().getContextPolyContextParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__ConstructorsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypeAccess().getConstructorsDatatypeConstructorParserRuleCall_3_0()); }
		ruleDatatypeConstructor
		{ after(grammarAccess.getDatatypeAccess().getConstructorsDatatypeConstructorParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__BodyElementsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypeAccess().getBodyElementsTypeBodyElementsParserRuleCall_5_0()); }
		ruleTypeBodyElements
		{ after(grammarAccess.getDatatypeAccess().getBodyElementsTypeBodyElementsParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseConstructor__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBaseConstructorAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getBaseConstructorAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DTypeConstructor__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDTypeConstructorAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getDTypeConstructorAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DTypeConstructor__DeconsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDTypeConstructorAccess().getDeconsTypedVariableListParserRuleCall_2_0()); }
		ruleTypedVariableList
		{ after(grammarAccess.getDTypeConstructorAccess().getDeconsTypedVariableListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtendAccess().getNameTypeNameCrossReference_0_0()); }
		(
			{ before(grammarAccess.getExtendAccess().getNameTypeNameIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getExtendAccess().getNameTypeNameIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getExtendAccess().getNameTypeNameCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__ExtesnionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtendAccess().getExtesnionIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getExtendAccess().getExtesnionIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__BodyElementsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtendAccess().getBodyElementsTypeBodyElementsParserRuleCall_5_0()); }
		ruleTypeBodyElements
		{ after(grammarAccess.getExtendAccess().getBodyElementsTypeBodyElementsParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeBodyElements__FunctionsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeBodyElementsAccess().getFunctionsFunctionDeclParserRuleCall_0_0()); }
		ruleFunctionDecl
		{ after(grammarAccess.getTypeBodyElementsAccess().getFunctionsFunctionDeclParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeBodyElements__TheoremsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeBodyElementsAccess().getTheoremsTheoremBodyParserRuleCall_1_0()); }
		ruleTheoremBody
		{ after(grammarAccess.getTypeBodyElementsAccess().getTheoremsTheoremBodyParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclAccess().getNameFunctionNameParserRuleCall_0_0()); }
		ruleFunctionName
		{ after(grammarAccess.getFunctionDeclAccess().getNameFunctionNameParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__ContextAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclAccess().getContextPolyContextParserRuleCall_1_0()); }
		rulePolyContext
		{ after(grammarAccess.getFunctionDeclAccess().getContextPolyContextParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__VariablesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclAccess().getVariablesTypedVariableListParserRuleCall_3_0()); }
		ruleTypedVariableList
		{ after(grammarAccess.getFunctionDeclAccess().getVariablesTypedVariableListParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__BodyAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclAccess().getBodyFunctionBodyParserRuleCall_5_0()); }
		ruleFunctionBody
		{ after(grammarAccess.getFunctionDeclAccess().getBodyFunctionBodyParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__ReturnTypeAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclAccess().getReturnTypeTypeConstructorParserRuleCall_7_0()); }
		ruleTypeConstructor
		{ after(grammarAccess.getFunctionDeclAccess().getReturnTypeTypeConstructorParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDirectDef__ExpressionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncDirectDefAccess().getExpressionExpressionParserRuleCall_0()); }
		ruleExpression
		{ after(grammarAccess.getFuncDirectDefAccess().getExpressionExpressionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TheoremBody__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTheoremBodyAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getTheoremBodyAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariableList__TypeVarAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypedVariableListAccess().getTypeVarTypedVariableParserRuleCall_0_0()); }
		ruleTypedVariable
		{ after(grammarAccess.getTypedVariableListAccess().getTypeVarTypedVariableParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariableList__TypeVarAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypedVariableListAccess().getTypeVarTypedVariableParserRuleCall_1_1_0()); }
		ruleTypedVariable
		{ after(grammarAccess.getTypedVariableListAccess().getTypeVarTypedVariableParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariable__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypedVariableAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getTypedVariableAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariable__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypedVariableAccess().getTypeConstructedTypeParserRuleCall_2_0()); }
		ruleConstructedType
		{ after(grammarAccess.getTypedVariableAccess().getTypeConstructedTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionName__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionNameAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionNameAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getExpressionAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
