/*
 * generated by Xtext 2.12.0
 */
package org.xtext.sampleProj.mydsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.sampleProj.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.sampleProj.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Inject
	private MyDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTopLevelAccess().getAlternatives(), "rule__TopLevel__Alternatives");
					put(grammarAccess.getClassDeclAccess().getAlternatives(), "rule__ClassDecl__Alternatives");
					put(grammarAccess.getDatatypeConstructorAccess().getAlternatives(), "rule__DatatypeConstructor__Alternatives");
					put(grammarAccess.getTypeBodyElementsAccess().getAlternatives(), "rule__TypeBodyElements__Alternatives");
					put(grammarAccess.getImportSatementAccess().getGroup(), "rule__ImportSatement__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getImportAccess().getGroup_1(), "rule__Import__Group_1__0");
					put(grammarAccess.getPolyContextAccess().getGroup(), "rule__PolyContext__Group__0");
					put(grammarAccess.getPolyContextTypesAccess().getGroup(), "rule__PolyContextTypes__Group__0");
					put(grammarAccess.getTypeConstraintsAccess().getGroup(), "rule__TypeConstraints__Group__0");
					put(grammarAccess.getTypeConstraintsAccess().getGroup_2(), "rule__TypeConstraints__Group_2__0");
					put(grammarAccess.getTypedVariableAccess().getGroup(), "rule__TypedVariable__Group__0");
					put(grammarAccess.getTypeDeclarationAccess().getGroup(), "rule__TypeDeclaration__Group__0");
					put(grammarAccess.getTypeDeclContextAccess().getGroup(), "rule__TypeDeclContext__Group__0");
					put(grammarAccess.getTypeDeclContextAccess().getGroup_1(), "rule__TypeDeclContext__Group_1__0");
					put(grammarAccess.getSupertypeAccess().getGroup(), "rule__Supertype__Group__0");
					put(grammarAccess.getSupertypeAccess().getGroup_2(), "rule__Supertype__Group_2__0");
					put(grammarAccess.getWhereAccess().getGroup(), "rule__Where__Group__0");
					put(grammarAccess.getWhereAccess().getGroup_2(), "rule__Where__Group_2__0");
					put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
					put(grammarAccess.getDatatypeAccess().getGroup(), "rule__Datatype__Group__0");
					put(grammarAccess.getConstructorAccess().getGroup(), "rule__Constructor__Group__0");
					put(grammarAccess.getExtendAccess().getGroup(), "rule__Extend__Group__0");
					put(grammarAccess.getFunctionDeclAccess().getGroup(), "rule__FunctionDecl__Group__0");
					put(grammarAccess.getTheoremBodyAccess().getGroup(), "rule__TheoremBody__Group__0");
					put(grammarAccess.getDomainModelAccess().getElementsAssignment(), "rule__DomainModel__ElementsAssignment");
					put(grammarAccess.getImportSatementAccess().getImportsAssignment_1(), "rule__ImportSatement__ImportsAssignment_1");
					put(grammarAccess.getImportAccess().getImportNameAssignment_0(), "rule__Import__ImportNameAssignment_0");
					put(grammarAccess.getImportAccess().getImportNameAssignment_1_1(), "rule__Import__ImportNameAssignment_1_1");
					put(grammarAccess.getImportComponentAccess().getNameAssignment(), "rule__ImportComponent__NameAssignment");
					put(grammarAccess.getPolyContextAccess().getPolyTypesAssignment_1(), "rule__PolyContext__PolyTypesAssignment_1");
					put(grammarAccess.getPolyContextTypesAccess().getNameAssignment_0(), "rule__PolyContextTypes__NameAssignment_0");
					put(grammarAccess.getPolyContextTypesAccess().getConstraintsAssignment_1(), "rule__PolyContextTypes__ConstraintsAssignment_1");
					put(grammarAccess.getTypeConstraintsAccess().getTypeNameAssignment_1(), "rule__TypeConstraints__TypeNameAssignment_1");
					put(grammarAccess.getTypeConstraintsAccess().getTypeNameAssignment_2_1(), "rule__TypeConstraints__TypeNameAssignment_2_1");
					put(grammarAccess.getTypedVariableAccess().getNameAssignment_0(), "rule__TypedVariable__NameAssignment_0");
					put(grammarAccess.getTypedVariableAccess().getConstraintsAssignment_1(), "rule__TypedVariable__ConstraintsAssignment_1");
					put(grammarAccess.getTypeDeclarationAccess().getTypeNameAssignment_0(), "rule__TypeDeclaration__TypeNameAssignment_0");
					put(grammarAccess.getTypeDeclarationAccess().getContextAssignment_1(), "rule__TypeDeclaration__ContextAssignment_1");
					put(grammarAccess.getTypeDeclContextAccess().getTypeNameAssignment_1_1(), "rule__TypeDeclContext__TypeNameAssignment_1_1");
					put(grammarAccess.getTypeNameAccess().getNameAssignment(), "rule__TypeName__NameAssignment");
					put(grammarAccess.getFunctionNameAccess().getNameAssignment(), "rule__FunctionName__NameAssignment");
					put(grammarAccess.getSupertypeAccess().getSuperTypeAssignment_1(), "rule__Supertype__SuperTypeAssignment_1");
					put(grammarAccess.getSupertypeAccess().getSuperTypeAssignment_2_1(), "rule__Supertype__SuperTypeAssignment_2_1");
					put(grammarAccess.getWhereAccess().getExpessionsAssignment_1(), "rule__Where__ExpessionsAssignment_1");
					put(grammarAccess.getWhereAccess().getExpressionsAssignment_2_1(), "rule__Where__ExpressionsAssignment_2_1");
					put(grammarAccess.getClassAccess().getNameAssignment_1(), "rule__Class__NameAssignment_1");
					put(grammarAccess.getClassAccess().getContextAssignment_2(), "rule__Class__ContextAssignment_2");
					put(grammarAccess.getClassAccess().getBodyElementsAssignment_4(), "rule__Class__BodyElementsAssignment_4");
					put(grammarAccess.getDatatypeAccess().getNameAssignment_1(), "rule__Datatype__NameAssignment_1");
					put(grammarAccess.getDatatypeAccess().getContextAssignment_2(), "rule__Datatype__ContextAssignment_2");
					put(grammarAccess.getDatatypeAccess().getConstructorsAssignment_3(), "rule__Datatype__ConstructorsAssignment_3");
					put(grammarAccess.getDatatypeAccess().getBodyElementsAssignment_5(), "rule__Datatype__BodyElementsAssignment_5");
					put(grammarAccess.getBaseConstructorAccess().getNameAssignment(), "rule__BaseConstructor__NameAssignment");
					put(grammarAccess.getConstructorAccess().getNameAssignment_0(), "rule__Constructor__NameAssignment_0");
					put(grammarAccess.getConstructorAccess().getTypedVariablesAssignment_2(), "rule__Constructor__TypedVariablesAssignment_2");
					put(grammarAccess.getExtendAccess().getNameAssignment_0(), "rule__Extend__NameAssignment_0");
					put(grammarAccess.getExtendAccess().getExtesnionAssignment_2(), "rule__Extend__ExtesnionAssignment_2");
					put(grammarAccess.getExtendAccess().getBodyElementsAssignment_5(), "rule__Extend__BodyElementsAssignment_5");
					put(grammarAccess.getTypeBodyElementsAccess().getFunctionsAssignment_0(), "rule__TypeBodyElements__FunctionsAssignment_0");
					put(grammarAccess.getTypeBodyElementsAccess().getTheoremsAssignment_1(), "rule__TypeBodyElements__TheoremsAssignment_1");
					put(grammarAccess.getFunctionDeclAccess().getNameAssignment_0(), "rule__FunctionDecl__NameAssignment_0");
					put(grammarAccess.getFunctionDeclAccess().getTypeVariablesAssignment_2(), "rule__FunctionDecl__TypeVariablesAssignment_2");
					put(grammarAccess.getExpressionAccess().getNameAssignment(), "rule__Expression__NameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
