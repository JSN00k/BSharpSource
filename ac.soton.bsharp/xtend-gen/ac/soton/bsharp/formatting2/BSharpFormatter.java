/**
 * generated by Xtext 2.14.0
 */
package ac.soton.bsharp.formatting2;

import ac.soton.bsharp.bSharp.DomainModel;
import ac.soton.bsharp.bSharp.Import;
import ac.soton.bsharp.bSharp.ImportStatement;
import ac.soton.bsharp.bSharp.TopLevel;
import ac.soton.bsharp.services.BSharpGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class BSharpFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private BSharpGrammarAccess _bSharpGrammarAccess;
  
  protected void _format(final DomainModel domainModel, @Extension final IFormattableDocument document) {
    EList<TopLevel> _elements = domainModel.getElements();
    for (final TopLevel topLevel : _elements) {
      document.<TopLevel>format(topLevel);
    }
  }
  
  protected void _format(final ImportStatement importStatement, @Extension final IFormattableDocument document) {
    EList<Import> _imports = importStatement.getImports();
    for (final Import _import : _imports) {
      document.<Import>format(_import);
    }
  }
  
  public void format(final Object importStatement, final IFormattableDocument document) {
    if (importStatement instanceof XtextResource) {
      _format((XtextResource)importStatement, document);
      return;
    } else if (importStatement instanceof ImportStatement) {
      _format((ImportStatement)importStatement, document);
      return;
    } else if (importStatement instanceof DomainModel) {
      _format((DomainModel)importStatement, document);
      return;
    } else if (importStatement instanceof EObject) {
      _format((EObject)importStatement, document);
      return;
    } else if (importStatement == null) {
      _format((Void)null, document);
      return;
    } else if (importStatement != null) {
      _format(importStatement, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(importStatement, document).toString());
    }
  }
}
