/**
 * generated by Xtext 2.14.0
 */
package ac.soton.bsharp.formatting2;

import ac.soton.bsharp.bSharp.ClassDecl;
import ac.soton.bsharp.bSharp.Extend;
import ac.soton.bsharp.bSharp.GlobalImport;
import ac.soton.bsharp.bSharp.Instance;
import ac.soton.bsharp.bSharp.LocalImport;
import ac.soton.bsharp.bSharp.TopLevel;
import ac.soton.bsharp.bSharp.TopLevelFile;
import ac.soton.bsharp.services.BSharpGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class BSharpFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private BSharpGrammarAccess _bSharpGrammarAccess;
  
  protected void _format(final TopLevel topLevel, @Extension final IFormattableDocument document) {
    document.<TopLevelFile>format(topLevel.getTopLevelFile());
  }
  
  protected void _format(final TopLevelFile topLevelFile, @Extension final IFormattableDocument document) {
    EList<GlobalImport> _globalImports = topLevelFile.getGlobalImports();
    for (final GlobalImport globalImport : _globalImports) {
      document.<GlobalImport>format(globalImport);
    }
    EList<LocalImport> _localImports = topLevelFile.getLocalImports();
    for (final LocalImport localImport : _localImports) {
      document.<LocalImport>format(localImport);
    }
    EList<ClassDecl> _classes = topLevelFile.getClasses();
    for (final ClassDecl classDecl : _classes) {
      document.<ClassDecl>format(classDecl);
    }
    EList<Extend> _extends = topLevelFile.getExtends();
    for (final Extend extend : _extends) {
      document.<Extend>format(extend);
    }
    EList<Instance> _instances = topLevelFile.getInstances();
    for (final Instance instance : _instances) {
      document.<Instance>format(instance);
    }
  }
  
  public void format(final Object topLevel, final IFormattableDocument document) {
    if (topLevel instanceof XtextResource) {
      _format((XtextResource)topLevel, document);
      return;
    } else if (topLevel instanceof TopLevel) {
      _format((TopLevel)topLevel, document);
      return;
    } else if (topLevel instanceof TopLevelFile) {
      _format((TopLevelFile)topLevel, document);
      return;
    } else if (topLevel instanceof EObject) {
      _format((EObject)topLevel, document);
      return;
    } else if (topLevel == null) {
      _format((Void)null, document);
      return;
    } else if (topLevel != null) {
      _format(topLevel, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(topLevel, document).toString());
    }
  }
}
