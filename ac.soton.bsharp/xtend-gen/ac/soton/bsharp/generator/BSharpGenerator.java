/**
 * generated by Xtext 2.13.0
 */
package ac.soton.bsharp.generator;

import ac.soton.bsharp.bSharp.TopLevel;
import ac.soton.bsharp.bSharp.TopLevelFile;
import ac.soton.bsharp.bSharp.TopLevelInstance;
import ch.ethz.eventb.utils.EventBUtils;
import java.util.ArrayList;
import org.eclipse.core.resources.IWorkspaceRunnable;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eventb.core.IEventBProject;
import org.rodinp.core.IRodinProject;
import org.rodinp.core.RodinCore;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class BSharpGenerator extends AbstractGenerator {
  protected IProgressMonitor nullMonitor = new NullProgressMonitor();
  
  private String projName;
  
  private IRodinProject proj;
  
  /**
   * An array of arrays, each Array contains the elements that need to be compiled for the current import block
   */
  private ArrayList<EList<TopLevelInstance>> elementsForImport;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    try {
      EObject _get = resource.getContents().get(0);
      final TopLevel topLevel = ((TopLevel) _get);
      String _name = topLevel.getName();
      String _plus = (_name + "-gen");
      this.projName = _plus;
      this.elementsForImport = CollectionLiterals.<EList<TopLevelInstance>>newArrayList();
      IEventBProject eventBproj = EventBUtils.getEventBProject(this.projName);
      boolean _exists = eventBproj.getRodinProject().exists();
      boolean _not = (!_exists);
      if (_not) {
        eventBproj = EventBUtils.createEventBProject(this.projName, this.nullMonitor);
      }
      this.proj = eventBproj.getRodinProject();
      final TopLevelFile topLevelFile = topLevel.getTopLevelFile();
      final IWorkspaceRunnable wsRunnable = new IWorkspaceRunnable() {
        @Override
        public void run(final IProgressMonitor monitor) throws CoreException {
          topLevelFile.compile(BSharpGenerator.this.nullMonitor, BSharpGenerator.this.proj);
        }
      };
      NullProgressMonitor _nullProgressMonitor = new NullProgressMonitor();
      RodinCore.run(wsRunnable, _nullProgressMonitor);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
