/**
 * generated by Xtext 2.12.0
 */
package ac.soton.bsharp.scoping;

import ac.soton.bsharp.bSharp.FileImport;
import ac.soton.bsharp.bSharp.GlobalImport;
import ac.soton.bsharp.bSharp.LocalImport;
import ac.soton.bsharp.bSharp.TopLevel;
import ac.soton.bsharp.bSharp.TopLevelFile;
import ac.soton.bsharp.bSharp.TopLevelInstance;
import com.google.common.collect.Lists;
import java.util.List;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.scoping.impl.ImportNormalizer;
import org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class BSharpImportedNamespaceAwareLocalScopeProvider extends ImportedNamespaceAwareLocalScopeProvider {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public List<ImportNormalizer> internalGetImportedNamespaceResolvers(final EObject context, final boolean ignoreCase) {
    List<ImportNormalizer> importedNamespaceResolvers = Lists.<ImportNormalizer>newArrayList();
    final QualifiedName packageName = this._iQualifiedNameProvider.getFullyQualifiedName(context);
    if ((context instanceof TopLevel)) {
      TopLevel topLevel = ((TopLevel) context);
      if ((packageName != null)) {
        ImportNormalizer _importNormalizer = new ImportNormalizer(packageName, true, ignoreCase);
        importedNamespaceResolvers.add(_importNormalizer);
      }
      TopLevelFile topLevelFile = topLevel.getTopLevelFile();
      final EList<LocalImport> localImports = topLevelFile.getLocalImports();
      if ((localImports != null)) {
        for (final LocalImport localImport : localImports) {
          EList<FileImport> _fileImports = localImport.getFileImports();
          for (final FileImport imports : _fileImports) {
            {
              String importfileName = imports.getFileName();
              String _plus = (packageName + ".");
              String _plus_1 = (_plus + importfileName);
              String importString = (_plus_1 + ".");
              TopLevelInstance _type = imports.getType();
              boolean _tripleNotEquals = (_type != null);
              if (_tripleNotEquals) {
                String _importString = importString;
                TopLevelInstance _type_1 = imports.getType();
                importString = (_importString + _type_1);
              } else {
                String _importString_1 = importString;
                importString = (_importString_1 + "*");
              }
            }
          }
        }
      }
      final EList<GlobalImport> globalImports = topLevelFile.getGlobalImports();
    }
    return importedNamespaceResolvers;
  }
  
  @Override
  public List<ImportNormalizer> getImplicitImports(final boolean ignoreCase) {
    QualifiedName _create = QualifiedName.create("ac", "soton", "bsharp", "main");
    ImportNormalizer _importNormalizer = new ImportNormalizer(_create, true, ignoreCase);
    return CollectionLiterals.<ImportNormalizer>newArrayList(_importNormalizer);
  }
}
