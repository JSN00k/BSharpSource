/**
 * generated by Xtext 2.12.0
 */
package ac.soton.bsharp.scoping;

import com.google.common.collect.Lists;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.scoping.impl.ImportNormalizer;
import org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class BSharpImportedNamespaceAwareLocalScopeProvider extends ImportedNamespaceAwareLocalScopeProvider {
  @Override
  public List<ImportNormalizer> internalGetImportedNamespaceResolvers(final EObject context, final boolean ignoreCase) {
    List<ImportNormalizer> importedNamespaceResolvers = Lists.<ImportNormalizer>newArrayList();
    EList<EObject> eContents = context.eContents();
    for (final EObject child : eContents) {
      {
        final EStructuralFeature feature = child.eClass().getEStructuralFeature("imports");
        if (((feature != null) && String.class.equals(feature.getEType().getInstanceClass()))) {
          Object _eGet = child.eGet(feature);
          final EList<String> list = ((EList<String>) _eGet);
          for (final String importString : list) {
            {
              final ImportNormalizer resolver = this.createImportedNamespaceResolver(importString, ignoreCase);
              if ((resolver != null)) {
                importedNamespaceResolvers.add(resolver);
              }
            }
          }
        }
      }
    }
    return importedNamespaceResolvers;
  }
  
  @Override
  public List<ImportNormalizer> getImplicitImports(final boolean ignoreCase) {
    QualifiedName _create = QualifiedName.create("ac", "soton", "bsharp", "main");
    ImportNormalizer _importNormalizer = new ImportNormalizer(_create, true, ignoreCase);
    return CollectionLiterals.<ImportNormalizer>newArrayList(_importNormalizer);
  }
}
