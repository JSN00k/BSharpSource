/**
 * generated by Xtext 2.13.0
 */
package ac.soton.bsharp.bSharp;

import org.eclipse.emf.common.util.EList;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Func Inductive</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.bsharp.bSharp.FuncInductive#getVariableName <em>Variable Name</em>}</li>
 *   <li>{@link ac.soton.bsharp.bSharp.FuncInductive#getInductCase <em>Induct Case</em>}</li>
 * </ul>
 *
 * @see ac.soton.bsharp.bSharp.BSharpPackage#getFuncInductive()
 * @model
 * @generated
 */
public interface FuncInductive extends FunctionBody
{
  /**
   * Returns the value of the '<em><b>Variable Name</b></em>' reference.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Variable Name</em>' reference isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Variable Name</em>' reference.
   * @see #setVariableName(TypedVariable)
   * @see ac.soton.bsharp.bSharp.BSharpPackage#getFuncInductive_VariableName()
   * @model
   * @generated
   */
  TypedVariable getVariableName();

  /**
   * Sets the value of the '{@link ac.soton.bsharp.bSharp.FuncInductive#getVariableName <em>Variable Name</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Variable Name</em>' reference.
   * @see #getVariableName()
   * @generated
   */
  void setVariableName(TypedVariable value);

  /**
   * Returns the value of the '<em><b>Induct Case</b></em>' containment reference list.
   * The list contents are of type {@link ac.soton.bsharp.bSharp.FuncInductiveCase}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Induct Case</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Induct Case</em>' containment reference list.
   * @see ac.soton.bsharp.bSharp.BSharpPackage#getFuncInductive_InductCase()
   * @model containment="true"
   * @generated
   */
  EList<FuncInductiveCase> getInductCase();

} // FuncInductive
