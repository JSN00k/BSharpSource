/**
 * generated by Xtext 2.13.0
 */
package ac.soton.bsharp.bSharp.impl;

import ac.soton.bsharp.bSharp.BSharpPackage;
import ac.soton.bsharp.bSharp.FunctionDecl;
import ac.soton.bsharp.bSharp.TheoremBody;
import ac.soton.bsharp.bSharp.TypeBodyElements;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Type Body Elements</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.TypeBodyElementsImpl#getFunctions <em>Functions</em>}</li>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.TypeBodyElementsImpl#getTheorems <em>Theorems</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TypeBodyElementsImpl extends MinimalEObjectImpl.Container implements TypeBodyElements
{
  /**
   * The cached value of the '{@link #getFunctions() <em>Functions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctions()
   * @generated
   * @ordered
   */
  protected EList<FunctionDecl> functions;

  /**
   * The cached value of the '{@link #getTheorems() <em>Theorems</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTheorems()
   * @generated
   * @ordered
   */
  protected EList<TheoremBody> theorems;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypeBodyElementsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BSharpPackage.Literals.TYPE_BODY_ELEMENTS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<FunctionDecl> getFunctions()
  {
    if (functions == null)
    {
      functions = new EObjectContainmentEList<FunctionDecl>(FunctionDecl.class, this, BSharpPackage.TYPE_BODY_ELEMENTS__FUNCTIONS);
    }
    return functions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TheoremBody> getTheorems()
  {
    if (theorems == null)
    {
      theorems = new EObjectContainmentEList<TheoremBody>(TheoremBody.class, this, BSharpPackage.TYPE_BODY_ELEMENTS__THEOREMS);
    }
    return theorems;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BSharpPackage.TYPE_BODY_ELEMENTS__FUNCTIONS:
        return ((InternalEList<?>)getFunctions()).basicRemove(otherEnd, msgs);
      case BSharpPackage.TYPE_BODY_ELEMENTS__THEOREMS:
        return ((InternalEList<?>)getTheorems()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BSharpPackage.TYPE_BODY_ELEMENTS__FUNCTIONS:
        return getFunctions();
      case BSharpPackage.TYPE_BODY_ELEMENTS__THEOREMS:
        return getTheorems();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BSharpPackage.TYPE_BODY_ELEMENTS__FUNCTIONS:
        getFunctions().clear();
        getFunctions().addAll((Collection<? extends FunctionDecl>)newValue);
        return;
      case BSharpPackage.TYPE_BODY_ELEMENTS__THEOREMS:
        getTheorems().clear();
        getTheorems().addAll((Collection<? extends TheoremBody>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BSharpPackage.TYPE_BODY_ELEMENTS__FUNCTIONS:
        getFunctions().clear();
        return;
      case BSharpPackage.TYPE_BODY_ELEMENTS__THEOREMS:
        getTheorems().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BSharpPackage.TYPE_BODY_ELEMENTS__FUNCTIONS:
        return functions != null && !functions.isEmpty();
      case BSharpPackage.TYPE_BODY_ELEMENTS__THEOREMS:
        return theorems != null && !theorems.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //TypeBodyElementsImpl
