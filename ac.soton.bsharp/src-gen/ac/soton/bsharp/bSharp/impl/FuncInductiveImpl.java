/**
 * generated by Xtext 2.13.0
 */
package ac.soton.bsharp.bSharp.impl;

import ac.soton.bsharp.bSharp.BSharpPackage;
import ac.soton.bsharp.bSharp.FuncInductive;
import ac.soton.bsharp.bSharp.FuncInductiveCase;
import ac.soton.bsharp.bSharp.TypedVariable;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Func Inductive</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.FuncInductiveImpl#getMatch <em>Match</em>}</li>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.FuncInductiveImpl#getInductCase <em>Induct Case</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FuncInductiveImpl extends FunctionBodyImpl implements FuncInductive
{
  /**
   * The cached value of the '{@link #getMatch() <em>Match</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMatch()
   * @generated
   * @ordered
   */
  protected TypedVariable match;

  /**
   * The cached value of the '{@link #getInductCase() <em>Induct Case</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInductCase()
   * @generated
   * @ordered
   */
  protected EList<FuncInductiveCase> inductCase;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FuncInductiveImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BSharpPackage.Literals.FUNC_INDUCTIVE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypedVariable getMatch()
  {
    if (match != null && match.eIsProxy())
    {
      InternalEObject oldMatch = (InternalEObject)match;
      match = (TypedVariable)eResolveProxy(oldMatch);
      if (match != oldMatch)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, BSharpPackage.FUNC_INDUCTIVE__MATCH, oldMatch, match));
      }
    }
    return match;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypedVariable basicGetMatch()
  {
    return match;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMatch(TypedVariable newMatch)
  {
    TypedVariable oldMatch = match;
    match = newMatch;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BSharpPackage.FUNC_INDUCTIVE__MATCH, oldMatch, match));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<FuncInductiveCase> getInductCase()
  {
    if (inductCase == null)
    {
      inductCase = new EObjectContainmentEList<FuncInductiveCase>(FuncInductiveCase.class, this, BSharpPackage.FUNC_INDUCTIVE__INDUCT_CASE);
    }
    return inductCase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BSharpPackage.FUNC_INDUCTIVE__INDUCT_CASE:
        return ((InternalEList<?>)getInductCase()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BSharpPackage.FUNC_INDUCTIVE__MATCH:
        if (resolve) return getMatch();
        return basicGetMatch();
      case BSharpPackage.FUNC_INDUCTIVE__INDUCT_CASE:
        return getInductCase();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BSharpPackage.FUNC_INDUCTIVE__MATCH:
        setMatch((TypedVariable)newValue);
        return;
      case BSharpPackage.FUNC_INDUCTIVE__INDUCT_CASE:
        getInductCase().clear();
        getInductCase().addAll((Collection<? extends FuncInductiveCase>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BSharpPackage.FUNC_INDUCTIVE__MATCH:
        setMatch((TypedVariable)null);
        return;
      case BSharpPackage.FUNC_INDUCTIVE__INDUCT_CASE:
        getInductCase().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BSharpPackage.FUNC_INDUCTIVE__MATCH:
        return match != null;
      case BSharpPackage.FUNC_INDUCTIVE__INDUCT_CASE:
        return inductCase != null && !inductCase.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //FuncInductiveImpl
