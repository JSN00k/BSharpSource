/*
 * generated by Xtext 2.14.0
 */
grammar InternalBSharp;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package ac.soton.bsharp.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ac.soton.bsharp.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ac.soton.bsharp.services.BSharpGrammarAccess;

}

@parser::members {

 	private BSharpGrammarAccess grammarAccess;

    public InternalBSharpParser(TokenStream input, BSharpGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "DomainModel";
   	}

   	@Override
   	protected BSharpGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDomainModel
entryRuleDomainModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainModelRule()); }
	iv_ruleDomainModel=ruleDomainModel
	{ $current=$iv_ruleDomainModel.current; }
	EOF;

// Rule DomainModel
ruleDomainModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDomainModelAccess().getElementsTopLevelParserRuleCall_0());
			}
			lv_elements_0_0=ruleTopLevel
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDomainModelRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"ac.soton.bsharp.BSharp.TopLevel");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleTHM_NAME
entryRuleTHM_NAME returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTHM_NAMERule()); }
	iv_ruleTHM_NAME=ruleTHM_NAME
	{ $current=$iv_ruleTHM_NAME.current.getText(); }
	EOF;

// Rule THM_NAME
ruleTHM_NAME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_INT_0=RULE_INT
			{
				$current.merge(this_INT_0);
			}
			{
				newLeafNode(this_INT_0, grammarAccess.getTHM_NAMEAccess().getINTTerminalRuleCall_0_0());
			}
			    |
			this_ID_1=RULE_ID
			{
				$current.merge(this_ID_1);
			}
			{
				newLeafNode(this_ID_1, grammarAccess.getTHM_NAMEAccess().getIDTerminalRuleCall_0_1());
			}
			    |
			this_WS_2=RULE_WS
			{
				$current.merge(this_WS_2);
			}
			{
				newLeafNode(this_WS_2, grammarAccess.getTHM_NAMEAccess().getWSTerminalRuleCall_0_2());
			}
		)*
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTHM_NAMEAccess().getColonKeyword_1());
		}
	)
;

// Entry rule entryRuleTopLevel
entryRuleTopLevel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTopLevelRule()); }
	iv_ruleTopLevel=ruleTopLevel
	{ $current=$iv_ruleTopLevel.current; }
	EOF;

// Rule TopLevel
ruleTopLevel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTopLevelAccess().getImportStatementParserRuleCall_0());
		}
		this_ImportStatement_0=ruleImportStatement
		{
			$current = $this_ImportStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTopLevelAccess().getClassDeclParserRuleCall_1());
		}
		this_ClassDecl_1=ruleClassDecl
		{
			$current = $this_ClassDecl_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTopLevelAccess().getExtendParserRuleCall_2());
		}
		this_Extend_2=ruleExtend
		{
			$current = $this_Extend_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTopLevelAccess().getInstanceParserRuleCall_3());
		}
		this_Instance_3=ruleInstance
		{
			$current = $this_Instance_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleClassDecl
entryRuleClassDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassDeclRule()); }
	iv_ruleClassDecl=ruleClassDecl
	{ $current=$iv_ruleClassDecl.current; }
	EOF;

// Rule ClassDecl
ruleClassDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getClassDeclAccess().getClassParserRuleCall_0());
		}
		this_Class_0=ruleClass
		{
			$current = $this_Class_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getClassDeclAccess().getDatatypeParserRuleCall_1());
		}
		this_Datatype_1=ruleDatatype
		{
			$current = $this_Datatype_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getTypeAccess().getClassDeclParserRuleCall());
	}
	this_ClassDecl_0=ruleClassDecl
	{
		$current = $this_ClassDecl_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); }
	iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard
	{ $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }
	EOF;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0());
		}
		this_QualifiedName_0=ruleQualifiedName
		{
			$current.merge(this_QualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleImportStatement
entryRuleImportStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportStatementRule()); }
	iv_ruleImportStatement=ruleImportStatement
	{ $current=$iv_ruleImportStatement.current; }
	EOF;

// Rule ImportStatement
ruleImportStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportStatementAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportStatementAccess().getImportsQualifiedNameWithWildcardParserRuleCall_1_0());
				}
				lv_imports_1_0=ruleQualifiedNameWithWildcard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportStatementRule());
					}
					add(
						$current,
						"imports",
						lv_imports_1_0,
						"ac.soton.bsharp.BSharp.QualifiedNameWithWildcard");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	iv_ruleClass=ruleClass
	{ $current=$iv_ruleClass.current; }
	EOF;

// Rule Class
ruleClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Class'
		{
			newLeafNode(otherlv_0, grammarAccess.getClassAccess().getClassKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getClassAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"ac.soton.bsharp.BSharp.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getContextPolyContextParserRuleCall_2_0());
				}
				lv_context_2_0=rulePolyContext
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					set(
						$current,
						"context",
						lv_context_2_0,
						"ac.soton.bsharp.BSharp.PolyContext");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getSupertypesSuperTypeListParserRuleCall_3_0());
				}
				lv_supertypes_3_0=ruleSuperTypeList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					set(
						$current,
						"supertypes",
						lv_supertypes_3_0,
						"ac.soton.bsharp.BSharp.SuperTypeList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getVarListTypeStructureParserRuleCall_4_0());
				}
				lv_varList_4_0=ruleTypeStructure
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					set(
						$current,
						"varList",
						lv_varList_4_0,
						"ac.soton.bsharp.BSharp.TypeStructure");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getWhereWhereParserRuleCall_5_0());
				}
				lv_where_5_0=ruleWhere
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					set(
						$current,
						"where",
						lv_where_5_0,
						"ac.soton.bsharp.BSharp.Where");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getClassAccess().getSemicolonKeyword_6());
			}
		)?
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getBodyElementsTypeBodyElementsParserRuleCall_8_0());
				}
				lv_bodyElements_8_0=ruleTypeBodyElements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					add(
						$current,
						"bodyElements",
						lv_bodyElements_8_0,
						"ac.soton.bsharp.BSharp.TypeBodyElements");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getClassAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRulePolymorphicTypeName
entryRulePolymorphicTypeName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPolymorphicTypeNameRule()); }
	iv_rulePolymorphicTypeName=rulePolymorphicTypeName
	{ $current=$iv_rulePolymorphicTypeName.current; }
	EOF;

// Rule PolymorphicTypeName
rulePolymorphicTypeName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getPolymorphicTypeNameAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPolymorphicTypeNameRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"ac.soton.bsharp.BSharp.ID");
			}
		)
	)
;

// Entry rule entryRulePolyContext
entryRulePolyContext returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPolyContextRule()); }
	iv_rulePolyContext=rulePolyContext
	{ $current=$iv_rulePolyContext.current; }
	EOF;

// Rule PolyContext
rulePolyContext returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<'
		{
			newLeafNode(otherlv_0, grammarAccess.getPolyContextAccess().getLessThanSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPolyContextAccess().getPolyTypesPolyContextTypesParserRuleCall_1_0());
				}
				lv_polyTypes_1_0=rulePolyContextTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolyContextRule());
					}
					add(
						$current,
						"polyTypes",
						lv_polyTypes_1_0,
						"ac.soton.bsharp.BSharp.PolyContextTypes");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2='>'
		{
			newLeafNode(otherlv_2, grammarAccess.getPolyContextAccess().getGreaterThanSignKeyword_2());
		}
	)
;

// Entry rule entryRulePolyContextTypes
entryRulePolyContextTypes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPolyContextTypesRule()); }
	iv_rulePolyContextTypes=rulePolyContextTypes
	{ $current=$iv_rulePolyContextTypes.current; }
	EOF;

// Rule PolyContextTypes
rulePolyContextTypes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPolyContextTypesAccess().getNamePolymorphicTypeNameParserRuleCall_0_0());
				}
				lv_name_0_0=rulePolymorphicTypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolyContextTypesRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"ac.soton.bsharp.BSharp.PolymorphicTypeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPolyContextTypesAccess().getConstraintsPolyTypeConstraintsParserRuleCall_1_0());
				}
				lv_constraints_1_0=rulePolyTypeConstraints
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolyContextTypesRule());
					}
					add(
						$current,
						"constraints",
						lv_constraints_1_0,
						"ac.soton.bsharp.BSharp.PolyTypeConstraints");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRulePolyTypeConstraints
entryRulePolyTypeConstraints returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPolyTypeConstraintsRule()); }
	iv_rulePolyTypeConstraints=rulePolyTypeConstraints
	{ $current=$iv_rulePolyTypeConstraints.current; }
	EOF;

// Rule PolyTypeConstraints
rulePolyTypeConstraints returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=':'
		{
			newLeafNode(otherlv_0, grammarAccess.getPolyTypeConstraintsAccess().getColonKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPolyTypeConstraintsRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getPolyTypeConstraintsAccess().getTypeNameClassDeclCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getPolyTypeConstraintsAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPolyTypeConstraintsRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getPolyTypeConstraintsAccess().getTypeNameClassDeclCrossReference_2_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSuperTypeList
entryRuleSuperTypeList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSuperTypeListRule()); }
	iv_ruleSuperTypeList=ruleSuperTypeList
	{ $current=$iv_ruleSuperTypeList.current; }
	EOF;

// Rule SuperTypeList
ruleSuperTypeList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=':'
		{
			newLeafNode(otherlv_0, grammarAccess.getSuperTypeListAccess().getColonKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSuperTypeListAccess().getSuperTypeConstructedTypeParserRuleCall_1_0());
				}
				lv_superType_1_0=ruleConstructedType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSuperTypeListRule());
					}
					add(
						$current,
						"superType",
						lv_superType_1_0,
						"ac.soton.bsharp.BSharp.ConstructedType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getSuperTypeListAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSuperTypeListAccess().getSuperTypeConstructedTypeParserRuleCall_2_1_0());
					}
					lv_superType_3_0=ruleConstructedType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSuperTypeListRule());
						}
						add(
							$current,
							"superType",
							lv_superType_3_0,
							"ac.soton.bsharp.BSharp.ConstructedType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleConstructedType
entryRuleConstructedType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstructedTypeRule()); }
	iv_ruleConstructedType=ruleConstructedType
	{ $current=$iv_ruleConstructedType.current; }
	EOF;

// Rule ConstructedType
ruleConstructedType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConstructedTypeAccess().getTypeTypeConstructorParserRuleCall_0_0());
				}
				lv_type_0_0=ruleTypeConstructor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstructedTypeRule());
					}
					add(
						$current,
						"type",
						lv_type_0_0,
						"ac.soton.bsharp.BSharp.TypeConstructor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					(
						lv_constructors_1_1='\u00D7'
						{
							newLeafNode(lv_constructors_1_1, grammarAccess.getConstructedTypeAccess().getConstructorsMultiplicationSignKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getConstructedTypeRule());
							}
							addWithLastConsumed($current, "constructors", lv_constructors_1_1, null);
						}
						    |
						lv_constructors_1_2='\u2192'
						{
							newLeafNode(lv_constructors_1_2, grammarAccess.getConstructedTypeAccess().getConstructorsRightwardsArrowKeyword_1_0_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getConstructedTypeRule());
							}
							addWithLastConsumed($current, "constructors", lv_constructors_1_2, null);
						}
						    |
						lv_constructors_1_3='\uE102'
						{
							newLeafNode(lv_constructors_1_3, grammarAccess.getConstructedTypeAccess().getConstructorsPrivateUseAreaE102Keyword_1_0_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getConstructedTypeRule());
							}
							addWithLastConsumed($current, "constructors", lv_constructors_1_3, null);
						}
						    |
						lv_constructors_1_4='\uE100'
						{
							newLeafNode(lv_constructors_1_4, grammarAccess.getConstructedTypeAccess().getConstructorsPrivateUseAreaE100Keyword_1_0_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getConstructedTypeRule());
							}
							addWithLastConsumed($current, "constructors", lv_constructors_1_4, null);
						}
						    |
						lv_constructors_1_5='\u2194'
						{
							newLeafNode(lv_constructors_1_5, grammarAccess.getConstructedTypeAccess().getConstructorsLeftRightArrowKeyword_1_0_0_4());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getConstructedTypeRule());
							}
							addWithLastConsumed($current, "constructors", lv_constructors_1_5, null);
						}
						    |
						lv_constructors_1_6='\u2916'
						{
							newLeafNode(lv_constructors_1_6, grammarAccess.getConstructedTypeAccess().getConstructorsRightwardsTwoHeadedArrowWithTailKeyword_1_0_0_5());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getConstructedTypeRule());
							}
							addWithLastConsumed($current, "constructors", lv_constructors_1_6, null);
						}
						    |
						lv_constructors_1_7='\u21F8'
						{
							newLeafNode(lv_constructors_1_7, grammarAccess.getConstructedTypeAccess().getConstructorsRightwardsArrowWithVerticalStrokeKeyword_1_0_0_6());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getConstructedTypeRule());
							}
							addWithLastConsumed($current, "constructors", lv_constructors_1_7, null);
						}
						    |
						lv_constructors_1_8='\u21A3'
						{
							newLeafNode(lv_constructors_1_8, grammarAccess.getConstructedTypeAccess().getConstructorsRightwardsArrowWithTailKeyword_1_0_0_7());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getConstructedTypeRule());
							}
							addWithLastConsumed($current, "constructors", lv_constructors_1_8, null);
						}
						    |
						lv_constructors_1_9='\u2900'
						{
							newLeafNode(lv_constructors_1_9, grammarAccess.getConstructedTypeAccess().getConstructorsRightwardsTwoHeadedArrowWithVerticalStrokeKeyword_1_0_0_8());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getConstructedTypeRule());
							}
							addWithLastConsumed($current, "constructors", lv_constructors_1_9, null);
						}
						    |
						lv_constructors_1_10='\u21A0'
						{
							newLeafNode(lv_constructors_1_10, grammarAccess.getConstructedTypeAccess().getConstructorsRightwardsTwoHeadedArrowKeyword_1_0_0_9());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getConstructedTypeRule());
							}
							addWithLastConsumed($current, "constructors", lv_constructors_1_10, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConstructedTypeAccess().getTypeConstructedTypeParserRuleCall_1_1_0());
					}
					lv_type_2_0=ruleConstructedType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstructedTypeRule());
						}
						add(
							$current,
							"type",
							lv_type_2_0,
							"ac.soton.bsharp.BSharp.ConstructedType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleTypeConstructor
entryRuleTypeConstructor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeConstructorRule()); }
	iv_ruleTypeConstructor=ruleTypeConstructor
	{ $current=$iv_ruleTypeConstructor.current; }
	EOF;

// Rule TypeConstructor
ruleTypeConstructor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeConstructorRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getTypeConstructorAccess().getTypeNameGenNameCrossReference_0_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeConstructorAccess().getContextTypeDeclContextParserRuleCall_1_0());
				}
				lv_context_1_0=ruleTypeDeclContext
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeConstructorRule());
					}
					add(
						$current,
						"context",
						lv_context_1_0,
						"ac.soton.bsharp.BSharp.TypeDeclContext");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleTypeDeclContext
entryRuleTypeDeclContext returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeDeclContextRule()); }
	iv_ruleTypeDeclContext=ruleTypeDeclContext
	{ $current=$iv_ruleTypeDeclContext.current; }
	EOF;

// Rule TypeDeclContext
ruleTypeDeclContext returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeDeclContextAccess().getLessThanSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeDeclContextAccess().getTypeNameConstructedTypeParserRuleCall_1_0());
				}
				lv_TypeName_1_0=ruleConstructedType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeDeclContextRule());
					}
					add(
						$current,
						"TypeName",
						lv_TypeName_1_0,
						"ac.soton.bsharp.BSharp.ConstructedType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getTypeDeclContextAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypeDeclContextAccess().getTypeNameConstructedTypeParserRuleCall_2_1_0());
					}
					lv_TypeName_3_0=ruleConstructedType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypeDeclContextRule());
						}
						add(
							$current,
							"TypeName",
							lv_TypeName_3_0,
							"ac.soton.bsharp.BSharp.ConstructedType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='>'
		{
			newLeafNode(otherlv_4, grammarAccess.getTypeDeclContextAccess().getGreaterThanSignKeyword_3());
		}
	)
;

// Entry rule entryRuleTypeStructure
entryRuleTypeStructure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeStructureRule()); }
	iv_ruleTypeStructure=ruleTypeStructure
	{ $current=$iv_ruleTypeStructure.current; }
	EOF;

// Rule TypeStructure
ruleTypeStructure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeStructureAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeStructureAccess().getVariablesTypedVariableListParserRuleCall_1_0());
				}
				lv_variables_1_0=ruleTypedVariableList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeStructureRule());
					}
					set(
						$current,
						"variables",
						lv_variables_1_0,
						"ac.soton.bsharp.BSharp.TypedVariableList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getTypeStructureAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleWhere
entryRuleWhere returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhereRule()); }
	iv_ruleWhere=ruleWhere
	{ $current=$iv_ruleWhere.current; }
	EOF;

// Rule Where
ruleWhere returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='where'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhereAccess().getWhereKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhereAccess().getExpessionsQuantifierParserRuleCall_1_0());
				}
				lv_expessions_1_0=ruleQuantifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhereRule());
					}
					add(
						$current,
						"expessions",
						lv_expessions_1_0,
						"ac.soton.bsharp.BSharp.Quantifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getWhereAccess().getSemicolonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getWhereAccess().getExpressionsRootExpressionParserRuleCall_2_1_0());
					}
					lv_expressions_3_0=ruleRootExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWhereRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_3_0,
							"ac.soton.bsharp.BSharp.RootExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleDatatype
entryRuleDatatype returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDatatypeRule()); }
	iv_ruleDatatype=ruleDatatype
	{ $current=$iv_ruleDatatype.current; }
	EOF;

// Rule Datatype
ruleDatatype returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Datatype'
		{
			newLeafNode(otherlv_0, grammarAccess.getDatatypeAccess().getDatatypeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDatatypeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDatatypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"ac.soton.bsharp.BSharp.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDatatypeAccess().getContextPolyContextParserRuleCall_2_0());
				}
				lv_context_2_0=rulePolyContext
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDatatypeRule());
					}
					set(
						$current,
						"context",
						lv_context_2_0,
						"ac.soton.bsharp.BSharp.PolyContext");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_3='|'
			{
				newLeafNode(otherlv_3, grammarAccess.getDatatypeAccess().getVerticalLineKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDatatypeAccess().getConstructorsDatatypeConstructorParserRuleCall_3_1_0());
					}
					lv_constructors_4_0=ruleDatatypeConstructor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDatatypeRule());
						}
						add(
							$current,
							"constructors",
							lv_constructors_4_0,
							"ac.soton.bsharp.BSharp.DatatypeConstructor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getDatatypeAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDatatypeAccess().getBodyElementsTypeBodyElementsParserRuleCall_5_0());
				}
				lv_bodyElements_6_0=ruleTypeBodyElements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDatatypeRule());
					}
					add(
						$current,
						"bodyElements",
						lv_bodyElements_6_0,
						"ac.soton.bsharp.BSharp.TypeBodyElements");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getDatatypeAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleDatatypeConstructor
entryRuleDatatypeConstructor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDatatypeConstructorRule()); }
	iv_ruleDatatypeConstructor=ruleDatatypeConstructor
	{ $current=$iv_ruleDatatypeConstructor.current; }
	EOF;

// Rule DatatypeConstructor
ruleDatatypeConstructor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getDatatypeConstructorAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDatatypeConstructorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"ac.soton.bsharp.BSharp.ID");
				}
			)
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getDatatypeConstructorAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDatatypeConstructorAccess().getDeconsTypedVariableListParserRuleCall_1_1_0());
					}
					lv_decons_2_0=ruleTypedVariableList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDatatypeConstructorRule());
						}
						set(
							$current,
							"decons",
							lv_decons_2_0,
							"ac.soton.bsharp.BSharp.TypedVariableList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getDatatypeConstructorAccess().getRightParenthesisKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRuleExtend
entryRuleExtend returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExtendRule()); }
	iv_ruleExtend=ruleExtend
	{ $current=$iv_ruleExtend.current; }
	EOF;

// Rule Extend
ruleExtend returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Extend'
		{
			newLeafNode(otherlv_0, grammarAccess.getExtendAccess().getExtendKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExtendRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getExtendAccess().getNameClassDeclCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getExtendAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_extension_3_0=RULE_ID
				{
					newLeafNode(lv_extension_3_0, grammarAccess.getExtendAccess().getExtensionIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExtendRule());
					}
					setWithLastConsumed(
						$current,
						"extension",
						lv_extension_3_0,
						"ac.soton.bsharp.BSharp.ID");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getExtendAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getExtendAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExtendAccess().getBodyElementsTypeBodyElementsParserRuleCall_6_0());
				}
				lv_bodyElements_6_0=ruleTypeBodyElements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtendRule());
					}
					add(
						$current,
						"bodyElements",
						lv_bodyElements_6_0,
						"ac.soton.bsharp.BSharp.TypeBodyElements");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getExtendAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleTypeBodyElements
entryRuleTypeBodyElements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeBodyElementsRule()); }
	iv_ruleTypeBodyElements=ruleTypeBodyElements
	{ $current=$iv_ruleTypeBodyElements.current; }
	EOF;

// Rule TypeBodyElements
ruleTypeBodyElements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeBodyElementsAccess().getFunctionsFunctionDeclParserRuleCall_0_0());
				}
				lv_functions_0_0=ruleFunctionDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeBodyElementsRule());
					}
					add(
						$current,
						"functions",
						lv_functions_0_0,
						"ac.soton.bsharp.BSharp.FunctionDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeBodyElementsAccess().getTheoremsTheoremBodyParserRuleCall_1_0());
				}
				lv_theorems_1_0=ruleTheoremBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeBodyElementsRule());
					}
					add(
						$current,
						"theorems",
						lv_theorems_1_0,
						"ac.soton.bsharp.BSharp.TheoremBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFunctionDecl
entryRuleFunctionDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDeclRule()); }
	iv_ruleFunctionDecl=ruleFunctionDecl
	{ $current=$iv_ruleFunctionDecl.current; }
	EOF;

// Rule FunctionDecl
ruleFunctionDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclAccess().getNameFunctionNameParserRuleCall_0_0());
				}
				lv_name_0_0=ruleFunctionName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"ac.soton.bsharp.BSharp.FunctionName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclAccess().getContextPolyContextParserRuleCall_1_0());
				}
				lv_context_1_0=rulePolyContext
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclRule());
					}
					set(
						$current,
						"context",
						lv_context_1_0,
						"ac.soton.bsharp.BSharp.PolyContext");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getFunctionDeclAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclAccess().getVarListTypedVariableListParserRuleCall_3_0());
				}
				lv_varList_3_0=ruleTypedVariableList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclRule());
					}
					set(
						$current,
						"varList",
						lv_varList_3_0,
						"ac.soton.bsharp.BSharp.TypedVariableList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getFunctionDeclAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getFunctionDeclAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclAccess().getReturnTypeTypeConstructorParserRuleCall_6_0());
				}
				lv_returnType_6_0=ruleTypeConstructor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclRule());
					}
					set(
						$current,
						"returnType",
						lv_returnType_6_0,
						"ac.soton.bsharp.BSharp.TypeConstructor");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_infix_7_0='INFIX'
				{
					newLeafNode(lv_infix_7_0, grammarAccess.getFunctionDeclAccess().getInfixINFIXKeyword_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionDeclRule());
					}
					setWithLastConsumed($current, "infix", lv_infix_7_0, "INFIX");
				}
			)
		)?
		(
			(
				lv_precedence_8_0=RULE_INT
				{
					newLeafNode(lv_precedence_8_0, grammarAccess.getFunctionDeclAccess().getPrecedenceINTTerminalRuleCall_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionDeclRule());
					}
					setWithLastConsumed(
						$current,
						"precedence",
						lv_precedence_8_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclAccess().getExprRootExpressionParserRuleCall_9_0());
				}
				lv_expr_9_0=ruleRootExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclRule());
					}
					set(
						$current,
						"expr",
						lv_expr_9_0,
						"ac.soton.bsharp.BSharp.RootExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFunctionName
entryRuleFunctionName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionNameRule()); }
	iv_ruleFunctionName=ruleFunctionName
	{ $current=$iv_ruleFunctionName.current; }
	EOF;

// Rule FunctionName
ruleFunctionName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getFunctionNameAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFunctionNameRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"ac.soton.bsharp.BSharp.ID");
			}
		)
	)
;

// Entry rule entryRuleMatchStatement
entryRuleMatchStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMatchStatementRule()); }
	iv_ruleMatchStatement=ruleMatchStatement
	{ $current=$iv_ruleMatchStatement.current; }
	EOF;

// Rule MatchStatement
ruleMatchStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='match'
		{
			newLeafNode(otherlv_0, grammarAccess.getMatchStatementAccess().getMatchKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMatchStatementRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getMatchStatementAccess().getMatchDatatypeConstructorCrossReference_1_0());
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getMatchStatementAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMatchStatementAccess().getInductCaseMatchCaseParserRuleCall_3_0());
				}
				lv_inductCase_3_0=ruleMatchCase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMatchStatementRule());
					}
					add(
						$current,
						"inductCase",
						lv_inductCase_3_0,
						"ac.soton.bsharp.BSharp.MatchCase");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMatchStatementAccess().getInductCaseMatchCaseParserRuleCall_4_0());
				}
				lv_inductCase_4_0=ruleMatchCase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMatchStatementRule());
					}
					add(
						$current,
						"inductCase",
						lv_inductCase_4_0,
						"ac.soton.bsharp.BSharp.MatchCase");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getMatchStatementAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleMatchCase
entryRuleMatchCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMatchCaseRule()); }
	iv_ruleMatchCase=ruleMatchCase
	{ $current=$iv_ruleMatchCase.current; }
	EOF;

// Rule MatchCase
ruleMatchCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='|'
		{
			newLeafNode(otherlv_0, grammarAccess.getMatchCaseAccess().getVerticalLineKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMatchCaseRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getMatchCaseAccess().getDeconNameTypedVariableCrossReference_1_0());
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getMatchCaseAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMatchCaseAccess().getVariablesTypedVariableParserRuleCall_2_1_0());
					}
					lv_variables_3_0=ruleTypedVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMatchCaseRule());
						}
						add(
							$current,
							"variables",
							lv_variables_3_0,
							"ac.soton.bsharp.BSharp.TypedVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getMatchCaseAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getMatchCaseAccess().getVariablesTypedVariableParserRuleCall_2_2_1_0());
						}
						lv_variables_5_0=ruleTypedVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMatchCaseRule());
							}
							add(
								$current,
								"variables",
								lv_variables_5_0,
								"ac.soton.bsharp.BSharp.TypedVariable");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getMatchCaseAccess().getRightParenthesisKeyword_2_3());
			}
		)?
		otherlv_7=':'
		{
			newLeafNode(otherlv_7, grammarAccess.getMatchCaseAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMatchCaseAccess().getExprRootExpressionParserRuleCall_4_0());
				}
				lv_expr_8_0=ruleRootExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMatchCaseRule());
					}
					set(
						$current,
						"expr",
						lv_expr_8_0,
						"ac.soton.bsharp.BSharp.RootExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTheoremBody
entryRuleTheoremBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTheoremBodyRule()); }
	iv_ruleTheoremBody=ruleTheoremBody
	{ $current=$iv_ruleTheoremBody.current; }
	EOF;

// Rule TheoremBody
ruleTheoremBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Theorems'
		{
			newLeafNode(otherlv_0, grammarAccess.getTheoremBodyAccess().getTheoremsKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getTheoremBodyAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTheoremBodyAccess().getTheoremDeclTheoremDeclParserRuleCall_2_0());
				}
				lv_theoremDecl_2_0=ruleTheoremDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTheoremBodyRule());
					}
					add(
						$current,
						"theoremDecl",
						lv_theoremDecl_2_0,
						"ac.soton.bsharp.BSharp.TheoremDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getTheoremBodyAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleTheoremDecl
entryRuleTheoremDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTheoremDeclRule()); }
	iv_ruleTheoremDecl=ruleTheoremDecl
	{ $current=$iv_ruleTheoremDecl.current; }
	EOF;

// Rule TheoremDecl
ruleTheoremDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTheoremDeclAccess().getNameTHM_NAMEParserRuleCall_0_0());
				}
				lv_name_0_0=ruleTHM_NAME
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTheoremDeclRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"ac.soton.bsharp.BSharp.THM_NAME");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTheoremDeclAccess().getExprRootExpressionParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleRootExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTheoremDeclRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"ac.soton.bsharp.BSharp.RootExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getTheoremDeclAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleTypedVariableList
entryRuleTypedVariableList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypedVariableListRule()); }
	iv_ruleTypedVariableList=ruleTypedVariableList
	{ $current=$iv_ruleTypedVariableList.current; }
	EOF;

// Rule TypedVariableList
ruleTypedVariableList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypedVariableListAccess().getVariablesOfTypeVariableTypingParserRuleCall_0_0());
				}
				lv_variablesOfType_0_0=ruleVariableTyping
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypedVariableListRule());
					}
					add(
						$current,
						"variablesOfType",
						lv_variablesOfType_0_0,
						"ac.soton.bsharp.BSharp.VariableTyping");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getTypedVariableListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTypedVariableListAccess().getVariablesOfTypeVariableTypingParserRuleCall_1_1_0());
					}
					lv_variablesOfType_2_0=ruleVariableTyping
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTypedVariableListRule());
						}
						add(
							$current,
							"variablesOfType",
							lv_variablesOfType_2_0,
							"ac.soton.bsharp.BSharp.VariableTyping");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleVariableTyping
entryRuleVariableTyping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableTypingRule()); }
	iv_ruleVariableTyping=ruleVariableTyping
	{ $current=$iv_ruleVariableTyping.current; }
	EOF;

// Rule VariableTyping
ruleVariableTyping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableTypingAccess().getTypeVarTypedVariableParserRuleCall_0_0());
				}
				lv_typeVar_0_0=ruleTypedVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableTypingRule());
					}
					add(
						$current,
						"typeVar",
						lv_typeVar_0_0,
						"ac.soton.bsharp.BSharp.TypedVariable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getVariableTypingAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableTypingAccess().getTypeVarTypedVariableParserRuleCall_1_1_0());
					}
					lv_typeVar_2_0=ruleTypedVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableTypingRule());
						}
						add(
							$current,
							"typeVar",
							lv_typeVar_2_0,
							"ac.soton.bsharp.BSharp.TypedVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getVariableTypingAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableTypingAccess().getTypeConstructedTypeParserRuleCall_3_0());
				}
				lv_type_4_0=ruleConstructedType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableTypingRule());
					}
					set(
						$current,
						"type",
						lv_type_4_0,
						"ac.soton.bsharp.BSharp.ConstructedType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTypedVariable
entryRuleTypedVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypedVariableRule()); }
	iv_ruleTypedVariable=ruleTypedVariable
	{ $current=$iv_ruleTypedVariable.current; }
	EOF;

// Rule TypedVariable
ruleTypedVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getTypedVariableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTypedVariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"ac.soton.bsharp.BSharp.ID");
			}
		)
	)
;

// Entry rule entryRuleLambda
entryRuleLambda returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLambdaRule()); }
	iv_ruleLambda=ruleLambda
	{ $current=$iv_ruleLambda.current; }
	EOF;

// Rule Lambda
ruleLambda returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_qType_0_0='\u03BB'
				{
					newLeafNode(lv_qType_0_0, grammarAccess.getLambdaAccess().getQTypeGreekSmallLetterLamdaKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLambdaRule());
					}
					setWithLastConsumed($current, "qType", lv_qType_0_0, "\u03BB");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLambdaAccess().getContextPolyContextParserRuleCall_1_0());
				}
				lv_context_1_0=rulePolyContext
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLambdaRule());
					}
					set(
						$current,
						"context",
						lv_context_1_0,
						"ac.soton.bsharp.BSharp.PolyContext");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getLambdaAccess().getVarListTypedVariableListParserRuleCall_2_0());
				}
				lv_varList_2_0=ruleTypedVariableList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLambdaRule());
					}
					set(
						$current,
						"varList",
						lv_varList_2_0,
						"ac.soton.bsharp.BSharp.TypedVariableList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='|'
		{
			newLeafNode(otherlv_3, grammarAccess.getLambdaAccess().getVerticalLineKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLambdaAccess().getExprRootExpressionParserRuleCall_4_0());
				}
				lv_expr_4_0=ruleRootExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLambdaRule());
					}
					set(
						$current,
						"expr",
						lv_expr_4_0,
						"ac.soton.bsharp.BSharp.RootExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQuantifier
entryRuleQuantifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuantifierRule()); }
	iv_ruleQuantifier=ruleQuantifier
	{ $current=$iv_ruleQuantifier.current; }
	EOF;

// Rule Quantifier
ruleQuantifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_qType_0_1='\u2200'
					{
						newLeafNode(lv_qType_0_1, grammarAccess.getQuantifierAccess().getQTypeForAllKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getQuantifierRule());
						}
						setWithLastConsumed($current, "qType", lv_qType_0_1, null);
					}
					    |
					lv_qType_0_2='\u2203'
					{
						newLeafNode(lv_qType_0_2, grammarAccess.getQuantifierAccess().getQTypeThereExistsKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getQuantifierRule());
						}
						setWithLastConsumed($current, "qType", lv_qType_0_2, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getQuantifierAccess().getContextPolyContextParserRuleCall_1_0());
				}
				lv_context_1_0=rulePolyContext
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuantifierRule());
					}
					set(
						$current,
						"context",
						lv_context_1_0,
						"ac.soton.bsharp.BSharp.PolyContext");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getQuantifierAccess().getVarListTypedVariableListParserRuleCall_2_0());
				}
				lv_varList_2_0=ruleTypedVariableList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuantifierRule());
					}
					set(
						$current,
						"varList",
						lv_varList_2_0,
						"ac.soton.bsharp.BSharp.TypedVariableList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='\u00B7'
		{
			newLeafNode(otherlv_3, grammarAccess.getQuantifierAccess().getMiddleDotKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQuantifierAccess().getExprRootExpressionParserRuleCall_4_0());
				}
				lv_expr_4_0=ruleRootExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuantifierRule());
					}
					set(
						$current,
						"expr",
						lv_expr_4_0,
						"ac.soton.bsharp.BSharp.RootExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRootExpression
entryRuleRootExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRootExpressionRule()); }
	iv_ruleRootExpression=ruleRootExpression
	{ $current=$iv_ruleRootExpression.current; }
	EOF;

// Rule RootExpression
ruleRootExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRootExpressionAccess().getLambdaParserRuleCall_0());
		}
		this_Lambda_0=ruleLambda
		{
			$current = $this_Lambda_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRootExpressionAccess().getQuantifierParserRuleCall_1());
		}
		this_Quantifier_1=ruleQuantifier
		{
			$current = $this_Quantifier_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRootExpressionAccess().getInfixParserRuleCall_2());
		}
		this_Infix_2=ruleInfix
		{
			$current = $this_Infix_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRootExpressionAccess().getMatchStatementParserRuleCall_3());
		}
		this_MatchStatement_3=ruleMatchStatement
		{
			$current = $this_MatchStatement_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrefix
entryRulePrefix returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrefixRule()); }
	iv_rulePrefix=rulePrefix
	{ $current=$iv_rulePrefix.current; }
	EOF;

// Rule Prefix
rulePrefix returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrefixAccess().getNamePrefixBuiltInParserRuleCall_0_0());
				}
				lv_name_0_0=rulePrefixBuiltIn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrefixRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"ac.soton.bsharp.BSharp.PrefixBuiltIn");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPrefixAccess().getElemElementParserRuleCall_1_0());
				}
				lv_elem_1_0=ruleElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrefixRule());
					}
					set(
						$current,
						"elem",
						lv_elem_1_0,
						"ac.soton.bsharp.BSharp.Element");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePrefixBuiltIn
entryRulePrefixBuiltIn returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrefixBuiltInRule()); }
	iv_rulePrefixBuiltIn=rulePrefixBuiltIn
	{ $current=$iv_rulePrefixBuiltIn.current.getText(); }
	EOF;

// Rule PrefixBuiltIn
rulePrefixBuiltIn returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='asdglknasdgsajdng'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPrefixBuiltInAccess().getAsdglknasdgsajdngKeyword());
	}
;

// Entry rule entryRuleInfix
entryRuleInfix returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInfixRule()); }
	iv_ruleInfix=ruleInfix
	{ $current=$iv_ruleInfix.current; }
	EOF;

// Rule Infix
ruleInfix returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInfixAccess().getElementParserRuleCall_0());
		}
		this_Element_0=ruleElement
		{
			$current = $this_Element_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getInfixAccess().getInfixLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getInfixRule());
							}
						}
						otherlv_2=RULE_ID
						{
							newLeafNode(otherlv_2, grammarAccess.getInfixAccess().getFuncNameFunctionNameCrossReference_1_1_0_0());
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getInfixAccess().getOpNameInbuiltInfixParserRuleCall_1_1_1_0());
						}
						lv_opName_3_0=ruleInbuiltInfix
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getInfixRule());
							}
							set(
								$current,
								"opName",
								lv_opName_3_0,
								"ac.soton.bsharp.BSharp.InbuiltInfix");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getInfixAccess().getRightElementParserRuleCall_1_2_0());
					}
					lv_right_4_0=ruleElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInfixRule());
						}
						set(
							$current,
							"right",
							lv_right_4_0,
							"ac.soton.bsharp.BSharp.Element");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementAccess().getBracketParserRuleCall_0());
		}
		this_Bracket_0=ruleBracket
		{
			$current = $this_Bracket_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getPrefixParserRuleCall_1());
		}
		this_Prefix_1=rulePrefix
		{
			$current = $this_Prefix_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getFunctionCallParserRuleCall_2());
		}
		this_FunctionCall_2=ruleFunctionCall
		{
			$current = $this_FunctionCall_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBracket
entryRuleBracket returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBracketRule()); }
	iv_ruleBracket=ruleBracket
	{ $current=$iv_ruleBracket.current; }
	EOF;

// Rule Bracket
ruleBracket returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getBracketAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBracketAccess().getChildRootExpressionParserRuleCall_1_0());
				}
				lv_child_1_0=ruleRootExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBracketRule());
					}
					set(
						$current,
						"child",
						lv_child_1_0,
						"ac.soton.bsharp.BSharp.RootExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getBracketAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	iv_ruleFunctionCall=ruleFunctionCall
	{ $current=$iv_ruleFunctionCall.current; }
	EOF;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionCallRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getFunctionCallAccess().getTypeInstExpressionVariableCrossReference_0_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionCallAccess().getArgumentsRootExpressionParserRuleCall_1_1_0());
					}
					lv_arguments_2_0=ruleRootExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_2_0,
							"ac.soton.bsharp.BSharp.RootExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getFunctionCallAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionCallAccess().getArgumentsRootExpressionParserRuleCall_1_2_1_0());
						}
						lv_arguments_4_0=ruleRootExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_4_0,
								"ac.soton.bsharp.BSharp.RootExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_1_3());
			}
		)?
	)
;

// Entry rule entryRuleInbuiltInfix
entryRuleInbuiltInfix returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInbuiltInfixRule()); }
	iv_ruleInbuiltInfix=ruleInbuiltInfix
	{ $current=$iv_ruleInbuiltInfix.current.getText(); }
	EOF;

// Rule InbuiltInfix
ruleInbuiltInfix returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='\u21D4'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInbuiltInfixAccess().getLeftRightDoubleArrowKeyword_0());
		}
		    |
		kw='\u21D2'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInbuiltInfixAccess().getRightwardsDoubleArrowKeyword_1());
		}
		    |
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInbuiltInfixAccess().getEqualsSignKeyword_2());
		}
		    |
		kw='\u2260'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInbuiltInfixAccess().getNotEqualToKeyword_3());
		}
		    |
		kw='\u2227'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInbuiltInfixAccess().getLogicalAndKeyword_4());
		}
		    |
		kw='\u2228'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInbuiltInfixAccess().getLogicalOrKeyword_5());
		}
	)
;

// Entry rule entryRuleInstance
entryRuleInstance returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstanceRule()); }
	iv_ruleInstance=ruleInstance
	{ $current=$iv_ruleInstance.current; }
	EOF;

// Rule Instance
ruleInstance returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Instance'
		{
			newLeafNode(otherlv_0, grammarAccess.getInstanceAccess().getInstanceKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInstanceRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getInstanceAccess().getClassNameClassDeclCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInstanceAccess().getContextTypeDeclContextParserRuleCall_2_0());
				}
				lv_context_2_0=ruleTypeDeclContext
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInstanceRule());
					}
					set(
						$current,
						"context",
						lv_context_2_0,
						"ac.soton.bsharp.BSharp.TypeDeclContext");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getInstanceAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInstanceAccess().getArgumentsRootExpressionParserRuleCall_4_0());
				}
				lv_arguments_4_0=ruleRootExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInstanceRule());
					}
					add(
						$current,
						"arguments",
						lv_arguments_4_0,
						"ac.soton.bsharp.BSharp.RootExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getInstanceAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInstanceAccess().getArgumentsRootExpressionParserRuleCall_5_1_0());
					}
					lv_arguments_6_0=ruleRootExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInstanceRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_6_0,
							"ac.soton.bsharp.BSharp.RootExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getInstanceAccess().getRightParenthesisKeyword_6());
		}
	)
;

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'i'..'\uFFDC') ('a'..'z'|'A'..'Z'|'_'|'i'..'\uFFDC'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
