/**
 * generated by Xtext 2.14.0
 */
package ac.soton.bsharp.bSharp.impl;

import ac.soton.bsharp.bSharp.BSharpPackage;
import ac.soton.bsharp.bSharp.BodyElements;
import ac.soton.bsharp.bSharp.ClassDecl;
import ac.soton.bsharp.bSharp.Extend;
import ac.soton.bsharp.bSharp.GlobalImport;
import ac.soton.bsharp.bSharp.Instance;
import ac.soton.bsharp.bSharp.LocalImport;
import ac.soton.bsharp.bSharp.TopLevelFile;
import ac.soton.bsharp.bSharp.TopLevelImport;
import java.util.Collection;


import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;


/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Top Level File</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.TopLevelFileImpl#getName <em>Name</em>}</li>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.TopLevelFileImpl#getTopLevelImports <em>Top Level Imports</em>}</li>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.TopLevelFileImpl#getNoImportElements <em>No Import Elements</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TopLevelFileImpl extends MinimalEObjectImpl.Container implements TopLevelFile {
	
	/**
	 * The default value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected String name = NAME_EDEFAULT;

	/**
	 * The cached value of the '{@link #getTopLevelImports() <em>Top Level Imports</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getTopLevelImports()
	 * @generated
	 * @ordered
	 */
	protected EList<TopLevelImport> topLevelImports;

	/**
	 * The cached value of the '{@link #getNoImportElements() <em>No Import Elements</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getNoImportElements()
	 * @generated
	 * @ordered
	 */
	protected BodyElements noImportElements;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	protected TopLevelFileImpl() {
		super();
		System.out.print("I'm here");
		
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BSharpPackage.Literals.TOP_LEVEL_FILE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * Hack the name so that it returns the name of the file, without the suffix
	 */
	public String getName() {
		return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, BSharpPackage.TOP_LEVEL_FILE__NAME, oldName, name));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<TopLevelImport> getTopLevelImports() {
		if (topLevelImports == null) {
			topLevelImports = new EObjectContainmentEList<TopLevelImport>(TopLevelImport.class, this, BSharpPackage.TOP_LEVEL_FILE__TOP_LEVEL_IMPORTS);
		}
		return topLevelImports;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BodyElements getNoImportElements() {
		return noImportElements;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetNoImportElements(BodyElements newNoImportElements, NotificationChain msgs) {
		BodyElements oldNoImportElements = noImportElements;
		noImportElements = newNoImportElements;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BSharpPackage.TOP_LEVEL_FILE__NO_IMPORT_ELEMENTS, oldNoImportElements, newNoImportElements);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setNoImportElements(BodyElements newNoImportElements) {
		if (newNoImportElements != noImportElements) {
			NotificationChain msgs = null;
			if (noImportElements != null)
				msgs = ((InternalEObject)noImportElements).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BSharpPackage.TOP_LEVEL_FILE__NO_IMPORT_ELEMENTS, null, msgs);
			if (newNoImportElements != null)
				msgs = ((InternalEObject)newNoImportElements).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BSharpPackage.TOP_LEVEL_FILE__NO_IMPORT_ELEMENTS, null, msgs);
			msgs = basicSetNoImportElements(newNoImportElements, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, BSharpPackage.TOP_LEVEL_FILE__NO_IMPORT_ELEMENTS, newNoImportElements, newNoImportElements));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case BSharpPackage.TOP_LEVEL_FILE__TOP_LEVEL_IMPORTS:
				return ((InternalEList<?>)getTopLevelImports()).basicRemove(otherEnd, msgs);
			case BSharpPackage.TOP_LEVEL_FILE__NO_IMPORT_ELEMENTS:
				return basicSetNoImportElements(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case BSharpPackage.TOP_LEVEL_FILE__NAME:
				return getName();
			case BSharpPackage.TOP_LEVEL_FILE__TOP_LEVEL_IMPORTS:
				return getTopLevelImports();
			case BSharpPackage.TOP_LEVEL_FILE__NO_IMPORT_ELEMENTS:
				return getNoImportElements();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case BSharpPackage.TOP_LEVEL_FILE__NAME:
				setName((String)newValue);
				return;
			case BSharpPackage.TOP_LEVEL_FILE__TOP_LEVEL_IMPORTS:
				getTopLevelImports().clear();
				getTopLevelImports().addAll((Collection<? extends TopLevelImport>)newValue);
				return;
			case BSharpPackage.TOP_LEVEL_FILE__NO_IMPORT_ELEMENTS:
				setNoImportElements((BodyElements)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case BSharpPackage.TOP_LEVEL_FILE__NAME:
				setName(NAME_EDEFAULT);
				return;
			case BSharpPackage.TOP_LEVEL_FILE__TOP_LEVEL_IMPORTS:
				getTopLevelImports().clear();
				return;
			case BSharpPackage.TOP_LEVEL_FILE__NO_IMPORT_ELEMENTS:
				setNoImportElements((BodyElements)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case BSharpPackage.TOP_LEVEL_FILE__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case BSharpPackage.TOP_LEVEL_FILE__TOP_LEVEL_IMPORTS:
				return topLevelImports != null && !topLevelImports.isEmpty();
			case BSharpPackage.TOP_LEVEL_FILE__NO_IMPORT_ELEMENTS:
				return noImportElements != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (name: ");
		result.append(name);
		result.append(')');
		return result.toString();
	}

} //TopLevelFileImpl
