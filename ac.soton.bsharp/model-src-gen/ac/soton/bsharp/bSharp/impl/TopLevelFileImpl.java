/**
 * generated by Xtext 2.14.0
 */
package ac.soton.bsharp.bSharp.impl;

import ac.soton.bsharp.bSharp.BSharpPackage;
import ac.soton.bsharp.bSharp.TopLevel;
import ac.soton.bsharp.bSharp.TopLevelFile;
import ac.soton.bsharp.bSharp.TopLevelImport;
import ac.soton.bsharp.bSharp.TopLevelInstance;
import ac.soton.bsharp.bSharp.util.ComparatorHashSet;
import ac.soton.bsharp.bSharp.util.CompilationUtil;
import ac.soton.bsharp.bSharp.util.EventBFQNImport;
import ac.soton.bsharp.theory.util.TheoryImportCache;

import java.util.Collection;
import java.util.List;
import java.util.Set;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.SubMonitor;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.xtext.xbase.lib.Functions.Function2;
import org.rodinp.core.IRodinProject;


/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Top Level File</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.TopLevelFileImpl#getName <em>Name</em>}</li>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.TopLevelFileImpl#getTopLevelImports <em>Top Level Imports</em>}</li>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.TopLevelFileImpl#getNoImportElements <em>No Import Elements</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TopLevelFileImpl extends ITheoryImportCacheProviderImpl implements TopLevelFile {
	
	/**
	 * The default value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected String name = NAME_EDEFAULT;

	/**
	 * The cached value of the '{@link #getTopLevelImports() <em>Top Level Imports</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getTopLevelImports()
	 * @generated
	 * @ordered
	 */
	protected EList<TopLevelImport> topLevelImports;

	/**
	 * The cached value of the '{@link #getNoImportElements() <em>No Import Elements</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getNoImportElements()
	 * @generated
	 * @ordered
	 */
	protected EList<TopLevelInstance> noImportElements;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	protected TopLevelFileImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BSharpPackage.Literals.TOP_LEVEL_FILE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * Hack the name so that it returns the name of the file, without the suffix
	 */
	public String getName() {
		return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, BSharpPackage.TOP_LEVEL_FILE__NAME, oldName, name));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<TopLevelImport> getTopLevelImports() {
		if (topLevelImports == null) {
			topLevelImports = new EObjectContainmentEList<TopLevelImport>(TopLevelImport.class, this, BSharpPackage.TOP_LEVEL_FILE__TOP_LEVEL_IMPORTS);
		}
		return topLevelImports;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<TopLevelInstance> getNoImportElements() {
		if (noImportElements == null) {
			noImportElements = new EObjectContainmentEList<TopLevelInstance>(TopLevelInstance.class, this, BSharpPackage.TOP_LEVEL_FILE__NO_IMPORT_ELEMENTS);
		}
		return noImportElements;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case BSharpPackage.TOP_LEVEL_FILE__TOP_LEVEL_IMPORTS:
				return ((InternalEList<?>)getTopLevelImports()).basicRemove(otherEnd, msgs);
			case BSharpPackage.TOP_LEVEL_FILE__NO_IMPORT_ELEMENTS:
				return ((InternalEList<?>)getNoImportElements()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case BSharpPackage.TOP_LEVEL_FILE__NAME:
				return getName();
			case BSharpPackage.TOP_LEVEL_FILE__TOP_LEVEL_IMPORTS:
				return getTopLevelImports();
			case BSharpPackage.TOP_LEVEL_FILE__NO_IMPORT_ELEMENTS:
				return getNoImportElements();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case BSharpPackage.TOP_LEVEL_FILE__NAME:
				setName((String)newValue);
				return;
			case BSharpPackage.TOP_LEVEL_FILE__TOP_LEVEL_IMPORTS:
				getTopLevelImports().clear();
				getTopLevelImports().addAll((Collection<? extends TopLevelImport>)newValue);
				return;
			case BSharpPackage.TOP_LEVEL_FILE__NO_IMPORT_ELEMENTS:
				getNoImportElements().clear();
				getNoImportElements().addAll((Collection<? extends TopLevelInstance>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case BSharpPackage.TOP_LEVEL_FILE__NAME:
				setName(NAME_EDEFAULT);
				return;
			case BSharpPackage.TOP_LEVEL_FILE__TOP_LEVEL_IMPORTS:
				getTopLevelImports().clear();
				return;
			case BSharpPackage.TOP_LEVEL_FILE__NO_IMPORT_ELEMENTS:
				getNoImportElements().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case BSharpPackage.TOP_LEVEL_FILE__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case BSharpPackage.TOP_LEVEL_FILE__TOP_LEVEL_IMPORTS:
				return topLevelImports != null && !topLevelImports.isEmpty();
			case BSharpPackage.TOP_LEVEL_FILE__NO_IMPORT_ELEMENTS:
				return noImportElements != null && !noImportElements.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (name: ");
		result.append(name);
		result.append(')');
		return result.toString();
	}
	
	protected TheoryImportCache thyCache;

	@Override
	public TheoryImportCache getTheoryImportCache() {
		return thyCache;
	}

	@Override
	public void setTheoryImportCache(TheoryImportCache thyCache) {
		this.thyCache = thyCache;
	}
	
	@Override 
	public void appendFileImportsUpToAlreadyImported(TopLevelInstance upto, Set<EventBFQNImport> alreadyImported, Set<EventBFQNImport> newImports) {
		List<TopLevelInstance> noImportElements = getNoImportElements();
		if (upto != null && noImportElements.contains(upto)) {
			return;
		}
		
		List<TopLevelImport> topLevelImports = getTopLevelImports();
		for (TopLevelImport imps : topLevelImports) {
			imps.addAllElementsToAlreadyImported(alreadyImported, newImports);
			if (upto != null && imps.getBodyElements().contains(upto))
				return;
		}
	}
	
	Function2<EventBFQNImport, Object, Boolean> comparator = new Function2<EventBFQNImport, Object, Boolean>() {

		@Override
		public Boolean apply(EventBFQNImport containedObj, Object other) {
			if (!(other instanceof EventBFQNImport))
				return false;
				
			return containedObj.isInferredImporterOf((EventBFQNImport)other);
		}
	};
	
	@Override
	public void compile(IProgressMonitor monitor, IRodinProject proj) {
		String packageName = ((TopLevel)eContainer()).getName();
		String fileName = getName();
		List<TopLevelInstance> noImportElements = getNoImportElements();
		List<TopLevelImport> imports = getTopLevelImports();
		int importsSize = 0;
		ComparatorHashSet<EventBFQNImport> alreadyImported = new ComparatorHashSet<EventBFQNImport>(comparator);
		
		int adder = 0;
		TheoryImportCache currentCache = null;
		
		int createdFilesCount;
		if (imports != null) {
			importsSize = imports.size();
			createdFilesCount = importsSize;
		} else 
			createdFilesCount = 0;
		
		SubMonitor subMonitor;
		if (noImportElements != null && !noImportElements.isEmpty()) {
			createdFilesCount++;
			subMonitor = SubMonitor.convert(monitor, 20 * createdFilesCount);
			adder = 1;
			EventBFQNImport currentFqn = null;
			
			if (imports == null || imports.isEmpty()) { 
				currentFqn = new EventBFQNImport(packageName, fileName);
				thyCache = new TheoryImportCache(proj, currentFqn, currentCache);
			} else {
				currentFqn = new EventBFQNImport(packageName, fileName, 0);
				thyCache = new TheoryImportCache(proj, currentFqn, currentCache);
			}
			
			alreadyImported.add(currentFqn);
			
			currentCache = thyCache;
			
			CompilationUtil.compileTopLevelInstances(noImportElements, subMonitor.newChild(20));
			currentCache.save();
		} else {
			subMonitor = SubMonitor.convert(monitor, 20 * createdFilesCount);
		}
		
		if (importsSize == 0) {
			return;
		}
		
		for (int i = 0; i < importsSize - 1; ++i) {
			TopLevelImport imp = imports.get(i);
			currentCache = new TheoryImportCache(proj, imp, new EventBFQNImport(packageName, fileName, adder + i), currentCache);
			imp.setTheoryImportCache(currentCache);
			CompilationUtil.compileTopLevelInstances(imp.getBodyElements(), subMonitor);
			currentCache.save();
		}
		
		
		TopLevelImport imp = imports.get(importsSize - 1);
		currentCache = new TheoryImportCache(proj, imp, new EventBFQNImport(packageName, fileName), currentCache);
		imp.setTheoryImportCache(currentCache);
		CompilationUtil.compileTopLevelInstances(imp.getBodyElements(), subMonitor);
		currentCache.save();
	}

} //TopLevelFileImpl
