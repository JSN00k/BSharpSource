/**
 * generated by Xtext 2.14.0
 */
package ac.soton.bsharp.bSharp.impl;

import ac.soton.bsharp.bSharp.BSharpFactory;
import ac.soton.bsharp.bSharp.BSharpPackage;
import ac.soton.bsharp.bSharp.ConstructedType;
import ac.soton.bsharp.bSharp.Expression;
import ac.soton.bsharp.bSharp.InbuiltPrefixFuncName;
import ac.soton.bsharp.bSharp.TypeBuilder;
import ac.soton.bsharp.bSharp.TypeDeclContext;
import ac.soton.bsharp.bSharp.TypePowerSet;

import java.util.List;

import org.eclipse.emf.ecore.EClass;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Inbuilt Prefix Func Name</b></em>'.
 * <!-- end-user-doc -->
 *
 * @generated
 */
public class InbuiltPrefixFuncNameImpl extends ExpressionVariableImpl implements InbuiltPrefixFuncName {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InbuiltPrefixFuncNameImpl() {
		super();
	}
	
	public static String DOM = "dom";
	public static String RANGE = "ran";
	public static String PRJ1 = "prj1";
	public static String PRJ2 = "prj2";
	
	public enum InbuiltInfixType {
		DOM, RAN, PRJ1, PRJ2
	}
	
	InbuiltInfixType inbuitFuncType;
	
	String typeString() {
		switch (inbuitFuncType) {
		case DOM:
			return DOM;
		case RAN:
			return RANGE;
		case PRJ1:
			return PRJ1;
		case PRJ2:
			return PRJ2;
		default:
			/* Java is stupid, this can obviously never happen. */
			return "";
		}
			
	}
	
	public void setInbuiltFuncType(InbuiltInfixType type) {
		inbuitFuncType = type;
		name = typeString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BSharpPackage.Literals.INBUILT_PREFIX_FUNC_NAME;
	}
	
	TypeBuilder type = null;

	@Override
	public TypeBuilder calculateReturnType(TypeDeclContext ctx, List<Expression> args) {
		if (type != null) {
			return type;
		}
		
		if (args.size() != 1) {
			System.err.println("This should have been validated against.");
		}
		
		Expression arg = args.get(0);
		TypeBuilder argType = arg.calculateType();
		
		TypePowerSet powerSet;
		switch (inbuitFuncType) {
		case DOM:
			powerSet = BSharpFactory.eINSTANCE.createTypePowerSet();
			powerSet.setChild(((ConstructedType)argType).getLeft());
			type = powerSet;
			break;
		case RAN:
			powerSet = BSharpFactory.eINSTANCE.createTypePowerSet();
			powerSet.setChild(((ConstructedType)argType).getRight());
			type = powerSet;
			break;
		case PRJ1:
			type = ((ConstructedType)argType).getLeft().calculateType();
			break;
		case PRJ2:
			type = ((ConstructedType)argType).getRight().calculateType();
			break;

		default:
			break;
		}
		
		return type;
	}

	@Override
	public TypeBuilder calculateType() {
		return null;
	}

} //InbuiltPrefixFuncNameImpl
