/**
 * generated by Xtext 2.14.0
 */
package ac.soton.bsharp.bSharp.impl;

import ac.soton.bsharp.bSharp.BSharpPackage;
import ac.soton.bsharp.bSharp.Expression;
import ac.soton.bsharp.bSharp.IfElse;
import ac.soton.bsharp.bSharp.TypeBuilder;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>If Else</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.IfElseImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.IfElseImpl#getIfTrueExpr <em>If True Expr</em>}</li>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.IfElseImpl#getIfFalseExpr <em>If False Expr</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IfElseImpl extends ExpressionImpl implements IfElse {
	/**
	 * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getCondition()
	 * @generated
	 * @ordered
	 */
	protected Expression condition;

	/**
	 * The cached value of the '{@link #getIfTrueExpr() <em>If True Expr</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getIfTrueExpr()
	 * @generated
	 * @ordered
	 */
	protected Expression ifTrueExpr;

	/**
	 * The cached value of the '{@link #getIfFalseExpr() <em>If False Expr</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getIfFalseExpr()
	 * @generated
	 * @ordered
	 */
	protected Expression ifFalseExpr;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IfElseImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BSharpPackage.Literals.IF_ELSE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Expression getCondition() {
		return condition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetCondition(Expression newCondition, NotificationChain msgs) {
		Expression oldCondition = condition;
		condition = newCondition;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BSharpPackage.IF_ELSE__CONDITION, oldCondition, newCondition);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setCondition(Expression newCondition) {
		if (newCondition != condition) {
			NotificationChain msgs = null;
			if (condition != null)
				msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BSharpPackage.IF_ELSE__CONDITION, null, msgs);
			if (newCondition != null)
				msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BSharpPackage.IF_ELSE__CONDITION, null, msgs);
			msgs = basicSetCondition(newCondition, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, BSharpPackage.IF_ELSE__CONDITION, newCondition, newCondition));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Expression getIfTrueExpr() {
		return ifTrueExpr;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetIfTrueExpr(Expression newIfTrueExpr, NotificationChain msgs) {
		Expression oldIfTrueExpr = ifTrueExpr;
		ifTrueExpr = newIfTrueExpr;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BSharpPackage.IF_ELSE__IF_TRUE_EXPR, oldIfTrueExpr, newIfTrueExpr);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setIfTrueExpr(Expression newIfTrueExpr) {
		if (newIfTrueExpr != ifTrueExpr) {
			NotificationChain msgs = null;
			if (ifTrueExpr != null)
				msgs = ((InternalEObject)ifTrueExpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BSharpPackage.IF_ELSE__IF_TRUE_EXPR, null, msgs);
			if (newIfTrueExpr != null)
				msgs = ((InternalEObject)newIfTrueExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BSharpPackage.IF_ELSE__IF_TRUE_EXPR, null, msgs);
			msgs = basicSetIfTrueExpr(newIfTrueExpr, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, BSharpPackage.IF_ELSE__IF_TRUE_EXPR, newIfTrueExpr, newIfTrueExpr));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Expression getIfFalseExpr() {
		return ifFalseExpr;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetIfFalseExpr(Expression newIfFalseExpr, NotificationChain msgs) {
		Expression oldIfFalseExpr = ifFalseExpr;
		ifFalseExpr = newIfFalseExpr;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BSharpPackage.IF_ELSE__IF_FALSE_EXPR, oldIfFalseExpr, newIfFalseExpr);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setIfFalseExpr(Expression newIfFalseExpr) {
		if (newIfFalseExpr != ifFalseExpr) {
			NotificationChain msgs = null;
			if (ifFalseExpr != null)
				msgs = ((InternalEObject)ifFalseExpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BSharpPackage.IF_ELSE__IF_FALSE_EXPR, null, msgs);
			if (newIfFalseExpr != null)
				msgs = ((InternalEObject)newIfFalseExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BSharpPackage.IF_ELSE__IF_FALSE_EXPR, null, msgs);
			msgs = basicSetIfFalseExpr(newIfFalseExpr, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, BSharpPackage.IF_ELSE__IF_FALSE_EXPR, newIfFalseExpr, newIfFalseExpr));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case BSharpPackage.IF_ELSE__CONDITION:
				return basicSetCondition(null, msgs);
			case BSharpPackage.IF_ELSE__IF_TRUE_EXPR:
				return basicSetIfTrueExpr(null, msgs);
			case BSharpPackage.IF_ELSE__IF_FALSE_EXPR:
				return basicSetIfFalseExpr(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case BSharpPackage.IF_ELSE__CONDITION:
				return getCondition();
			case BSharpPackage.IF_ELSE__IF_TRUE_EXPR:
				return getIfTrueExpr();
			case BSharpPackage.IF_ELSE__IF_FALSE_EXPR:
				return getIfFalseExpr();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case BSharpPackage.IF_ELSE__CONDITION:
				setCondition((Expression)newValue);
				return;
			case BSharpPackage.IF_ELSE__IF_TRUE_EXPR:
				setIfTrueExpr((Expression)newValue);
				return;
			case BSharpPackage.IF_ELSE__IF_FALSE_EXPR:
				setIfFalseExpr((Expression)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case BSharpPackage.IF_ELSE__CONDITION:
				setCondition((Expression)null);
				return;
			case BSharpPackage.IF_ELSE__IF_TRUE_EXPR:
				setIfTrueExpr((Expression)null);
				return;
			case BSharpPackage.IF_ELSE__IF_FALSE_EXPR:
				setIfFalseExpr((Expression)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case BSharpPackage.IF_ELSE__CONDITION:
				return condition != null;
			case BSharpPackage.IF_ELSE__IF_TRUE_EXPR:
				return ifTrueExpr != null;
			case BSharpPackage.IF_ELSE__IF_FALSE_EXPR:
				return ifFalseExpr != null;
		}
		return super.eIsSet(featureID);
	}

	@Override
	public String constructLatexExpressionTree(String indent) {
		/* I'd rather get the bsharp expression here, but I haven't
		 * yet written the methods to do this.
		 */
		String name;
		try {
			name = condition.compileToEventBString(false);
		} catch (Exception e) {
			name = "ifCond";
		}
		String result = indent + "[.$" + name + "$\n";
		
		result += ifTrueExpr.constructLatexExpressionTree("  " + indent) + "\n";
		result += ifFalseExpr.constructLatexExpressionTree("  " + indent) + "\n" ;
		result += indent + "]";
		
		return result;
	}

	@Override
	public String compileToEventBString(Boolean asPredicate) throws Exception {
		String result = "Cond(";
		result += condition.compileToEventBString(true) + ",";
		result += ifTrueExpr.compileToEventBString(false) + ",";
		result += ifFalseExpr.compileToEventBString(false);
		
		if (asPredicate) {
			//TODO: Turn this into a validator error.
			throw new Exception("if/else statements should not return a Bool, as these "
					+ "can always be rewritten without the if/else statement");
		}
		
		return result;
	}

	@Override
	public Integer eventBPrecedence(Boolean whenPredicate) {
		/* Any expression returned from this must be used as a 
		 * functional rather than infix expression, so precedence 
		 * doesn't make sense.
		 */
		return 0;
	}

	@Override
	public Boolean requiresInferredContext() {
		return condition.requiresInferredContext() || ifTrueExpr.requiresInferredContext() || ifFalseExpr.requiresInferredContext();
	}

	@Override
	public Expression reorderExpresionTree() {
		if (reordered)
			return this;
		
		condition.reorderExpresionTree();
		ifTrueExpr.reorderExpresionTree();
		ifFalseExpr.reorderExpresionTree();
		reordered = true;
		return this;
	}

	@Override
	public boolean referencesContainingType() {
		return condition.referencesContainingType() || ifTrueExpr.referencesContainingType() || ifFalseExpr.referencesContainingType();
	}

	@Override
	public TypeBuilder calculateType() {
		/* TODO Validate that the type of the condition is a boolean, and that 
				the types of the ifTrue and ifFalse statements are the same. */
		return ifTrueExpr.calculateType();
	}

} //IfElseImpl
