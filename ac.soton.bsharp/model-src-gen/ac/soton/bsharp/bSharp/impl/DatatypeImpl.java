/**
 * generated by Xtext 2.14.0
 */
package ac.soton.bsharp.bSharp.impl;

import ac.soton.bsharp.bSharp.BSharpFactory;
import ac.soton.bsharp.bSharp.BSharpPackage;
import ac.soton.bsharp.bSharp.ClassDecl;
import ac.soton.bsharp.bSharp.Datatype;
import ac.soton.bsharp.bSharp.DatatypeConstructor;
import ac.soton.bsharp.bSharp.Expression;
import ac.soton.bsharp.bSharp.ExpressionVariable;
import ac.soton.bsharp.bSharp.FunctionCall;
import ac.soton.bsharp.bSharp.PolyType;
import ac.soton.bsharp.bSharp.TypeBuilder;
import ac.soton.bsharp.bSharp.TypeConstructor;
import ac.soton.bsharp.bSharp.TypeDeclContext;
import ac.soton.bsharp.bSharp.TypePowerSet;
import ac.soton.bsharp.bSharp.util.CompilationUtil;
import ac.soton.bsharp.bSharp.util.Tuple2;
import ac.soton.bsharp.theory.util.TheoryImportCache;
import ac.soton.bsharp.theory.util.TheoryUtils;
import ac.soton.bsharp.typeInstanceRepresentation.ConcreteTypeInstance;
import ac.soton.bsharp.typeInstanceRepresentation.ITypeInstance;
import ac.soton.bsharp.typeInstanceRepresentation.ITypeInstanceOpArgs;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eventb.theory.core.IDatatypeDefinition;
import org.eventb.theory.core.ITheoryRoot;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Datatype</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.DatatypeImpl#getConstructors <em>Constructors</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DatatypeImpl extends ClassDeclImpl implements Datatype {
	/**
	 * The cached value of the '{@link #getConstructors() <em>Constructors</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getConstructors()
	 * @generated
	 * @ordered
	 */
	protected EList<DatatypeConstructor> constructors;
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatatypeImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BSharpPackage.Literals.DATATYPE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<DatatypeConstructor> getConstructors() {
		if (constructors == null) {
			constructors = new EObjectContainmentEList<DatatypeConstructor>(DatatypeConstructor.class, this, BSharpPackage.DATATYPE__CONSTRUCTORS);
		}
		return constructors;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case BSharpPackage.DATATYPE__CONSTRUCTORS:
				return ((InternalEList<?>)getConstructors()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case BSharpPackage.DATATYPE__CONSTRUCTORS:
				return getConstructors();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case BSharpPackage.DATATYPE__CONSTRUCTORS:
				getConstructors().clear();
				getConstructors().addAll((Collection<? extends DatatypeConstructor>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case BSharpPackage.DATATYPE__CONSTRUCTORS:
				getConstructors().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case BSharpPackage.DATATYPE__CONSTRUCTORS:
				return constructors != null && !constructors.isEmpty();
		}
		return super.eIsSet(featureID);
	}
	
	protected IProgressMonitor nullMonitor = new NullProgressMonitor();

	public Collection<EObject> getVariablesNames() {
		ArrayList<EObject> result = new ArrayList<EObject>();
		
		result.add(this);
		
		for (DatatypeConstructor constr : constructors) {
			result.addAll(constr.getVariablesNames());
		}
		
		return result;
	}
	
	@Override
	public String eventBPrefix() {
		// TODO Change this when user defined prefixes are added.
		return name;
	}

	@Override
	public String eventBPolymorphicTypeConstructorName() {
		return name;
	}

	@Override
	public void compile(IProgressMonitor monitor) throws Exception {
		TheoryImportCache thyCache = CompilationUtil.getTheoryCacheForElement(this);
		ITheoryRoot thyRoot = thyCache.theory;
		
		IDatatypeDefinition datatype = TheoryUtils.createDataType(thyRoot, eventBPolymorphicTypeConstructorName(),
				null, nullMonitor);
		
		/* Subtyping has to be done when a BSharp type is used to create a Datatype. The initial datatype
		 * simply has a type for each of the types in the polymorphic context.
		 */
		
		if (context != null) {
			Collection<PolyType> pTypes =  context.getPolyTypes();
			for (PolyType pType : pTypes) {
				String evBName = thyCache.getEventBTypeParamNameForName(pType.getName());
				TheoryUtils.createTypeArgument(datatype, evBName, null, nullMonitor);
			}
		}
		
		for (DatatypeConstructor constr : constructors) {
			constr.compileInto(datatype, nullMonitor);
		}
		
		block.compile(monitor);
	}

	@Override
	public String compileToStringWithContextAndArguments(FunctionCall fc, Boolean asPred) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String applyMemberOrFuncGetter(ExpressionVariable typeInst, PolyType ownerType, FunctionCall fc,
			Boolean asPred) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String appyMemberOrFunc(ExpressionVariable typeInst, FunctionCall fc, Boolean asPred) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String constructWithTypeContext(TypeDeclContext context, ClassDecl containingClass) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String inferredPolyTypeArgsForType(ClassDecl t) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String typeStringWithContext(TypeDeclContext ctx) {
		if (context == null || context.eventBPolyVarCount() == 0) {
			return name;
		}
		
		/* If there is a poly context and the types are BSharp subtypes
		 * rather than total types (such as datatypes) a new Event-B op
		 * needs to be constructed to represent that type. This needs to be done.
		 */
		
		//TODO: read comment above and implement.
		String result = name + "(";
		boolean first = true;
		
		Collection<PolyType> pTypes = context.getPolyTypes();
		for (PolyType pType : pTypes) {
			if (!first)
				result += ", ";
				
			result += pType.baseTypeString();
		}
		
		result += ")";
		
		return result;
	}

	@Override
	public String opNameForMatchStatement(MatchStatementImpl match) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public TypeBuilder calculateReturnType() {
		/* DatatypeImpl cannot be called like a function. */
		return null;
	}
	
	@Override
	public TypeBuilder calculateType() {
		TypePowerSet tps = BSharpFactory.eINSTANCE.createTypePowerSet();
		TypeConstructor tc = BSharpFactory.eINSTANCE.createTypeConstructor();
		tc.setTypeName(this);
		tps.setChild(tps);
		return tps;
	}

	@Override
	public Collection<? extends Tuple2<String, String>> inScopeTypedVariables() {
		/* Datatypes don't provide any type variables that are required by functions. */
		return new ArrayList<Tuple2<String,String>>();
	}

	@Override
	public ITypeInstanceOpArgs genericTypeInstance(EObject context) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String constructorArgsForTypeInstance(ITypeInstance typeInst) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String constructWithTypeInstances(List<ITypeInstance> instList) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ConcreteTypeInstance typeInstanceForContext(EObject context) {
		return new ConcreteTypeInstance(this, context);
	}

	@Override
	public ITypeInstance getInferredTypeInstance() {
		return new ConcreteTypeInstance(this, this);
	}
} //DatatypeImpl
