/**
 * generated by Xtext 2.14.0
 */
package ac.soton.bsharp.bSharp.impl;

import ac.soton.bsharp.bSharp.BSharpPackage;
import ac.soton.bsharp.bSharp.Import;
import ac.soton.bsharp.bSharp.TopLevelFile;
import ac.soton.bsharp.bSharp.TopLevelImport;
import ac.soton.bsharp.bSharp.TopLevelInstance;
import ac.soton.bsharp.bSharp.util.EventBFQNImport;
import ac.soton.bsharp.theory.util.TheoryImportCache;
import java.util.Collection;
import java.util.List;
import java.util.Set;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;


import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Top Level Import</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.TopLevelImportImpl#getImports <em>Imports</em>}</li>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.TopLevelImportImpl#getBodyElements <em>Body Elements</em>}</li>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.TopLevelImportImpl#getImportRefs <em>Import Refs</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TopLevelImportImpl extends ITheoryImportCacheProviderImpl implements TopLevelImport {
	/**
	 * The cached value of the '{@link #getImports() <em>Imports</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getImports()
	 * @generated
	 * @ordered
	 */
	protected EList<Import> imports;

	/**
	 * The cached value of the '{@link #getBodyElements() <em>Body Elements</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getBodyElements()
	 * @generated
	 * @ordered
	 */
	protected EList<TopLevelInstance> bodyElements;

	/**
	 * The cached value of the '{@link #getImportRefs() <em>Import Refs</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getImportRefs()
	 * @generated
	 * @ordered
	 */
	protected EList<TopLevelFile> importRefs;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopLevelImportImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BSharpPackage.Literals.TOP_LEVEL_IMPORT;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Import> getImports() {
		if (imports == null) {
			imports = new EObjectContainmentEList<Import>(Import.class, this, BSharpPackage.TOP_LEVEL_IMPORT__IMPORTS);
		}
		return imports;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<TopLevelInstance> getBodyElements() {
		if (bodyElements == null) {
			bodyElements = new EObjectContainmentEList<TopLevelInstance>(TopLevelInstance.class, this, BSharpPackage.TOP_LEVEL_IMPORT__BODY_ELEMENTS);
		}
		return bodyElements;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<TopLevelFile> getImportRefs() {
		if (importRefs == null) {
			importRefs = new EObjectContainmentEList<TopLevelFile>(TopLevelFile.class, this, BSharpPackage.TOP_LEVEL_IMPORT__IMPORT_REFS);
		}
		return importRefs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case BSharpPackage.TOP_LEVEL_IMPORT__IMPORTS:
				return ((InternalEList<?>)getImports()).basicRemove(otherEnd, msgs);
			case BSharpPackage.TOP_LEVEL_IMPORT__BODY_ELEMENTS:
				return ((InternalEList<?>)getBodyElements()).basicRemove(otherEnd, msgs);
			case BSharpPackage.TOP_LEVEL_IMPORT__IMPORT_REFS:
				return ((InternalEList<?>)getImportRefs()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case BSharpPackage.TOP_LEVEL_IMPORT__IMPORTS:
				return getImports();
			case BSharpPackage.TOP_LEVEL_IMPORT__BODY_ELEMENTS:
				return getBodyElements();
			case BSharpPackage.TOP_LEVEL_IMPORT__IMPORT_REFS:
				return getImportRefs();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case BSharpPackage.TOP_LEVEL_IMPORT__IMPORTS:
				getImports().clear();
				getImports().addAll((Collection<? extends Import>)newValue);
				return;
			case BSharpPackage.TOP_LEVEL_IMPORT__BODY_ELEMENTS:
				getBodyElements().clear();
				getBodyElements().addAll((Collection<? extends TopLevelInstance>)newValue);
				return;
			case BSharpPackage.TOP_LEVEL_IMPORT__IMPORT_REFS:
				getImportRefs().clear();
				getImportRefs().addAll((Collection<? extends TopLevelFile>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case BSharpPackage.TOP_LEVEL_IMPORT__IMPORTS:
				getImports().clear();
				return;
			case BSharpPackage.TOP_LEVEL_IMPORT__BODY_ELEMENTS:
				getBodyElements().clear();
				return;
			case BSharpPackage.TOP_LEVEL_IMPORT__IMPORT_REFS:
				getImportRefs().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case BSharpPackage.TOP_LEVEL_IMPORT__IMPORTS:
				return imports != null && !imports.isEmpty();
			case BSharpPackage.TOP_LEVEL_IMPORT__BODY_ELEMENTS:
				return bodyElements != null && !bodyElements.isEmpty();
			case BSharpPackage.TOP_LEVEL_IMPORT__IMPORT_REFS:
				return importRefs != null && !importRefs.isEmpty();
		}
		return super.eIsSet(featureID);
	}
	
	protected TheoryImportCache thyCache;

	@Override
	public TheoryImportCache getTheoryImportCache() {
		return thyCache;
	}

	@Override
	public void setTheoryImportCache(TheoryImportCache thyCache) {
		this.thyCache = thyCache;
	}

	
	/* Also immediately adds the elements to already imported, so there is no chance of them getting 
	 * imported again.
	 */
	@Override
	public
	void addAllEventBImportsToNewImports(Set<EventBFQNImport> alreadyImported, Set<EventBFQNImport> newImports) {
		List<Import> fileImports = getImports();
		
		if (fileImports == null || fileImports.isEmpty()) {
			return;
		}
		
		for (Import imp : fileImports) {
			imp.addAllImportFqnsToNewImports(alreadyImported, newImports);
		}
	}
	
	/* This is called when we're going to add an element to the newImports, it adds anything that it has already
	 * imported to the alreadyImported set. If the element being added to the alreadyImported set is in the
	 * newImports set it is removed from the newImports set.
	 */
	@Override
	public void addAllElementsToAlreadyImported(Set<EventBFQNImport> alreadyImported, Set<EventBFQNImport> newImports) {
		List<Import> fileImports = getImports();
		
		if (fileImports == null || fileImports.isEmpty()) {
			return;
		}
		
		for (Import imp : fileImports) {
			imp.addAllElementsToAlreadyImported(alreadyImported, newImports);
		}
	}

} //TopLevelImportImpl
