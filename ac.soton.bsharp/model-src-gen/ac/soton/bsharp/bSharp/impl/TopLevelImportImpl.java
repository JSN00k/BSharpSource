/**
 * generated by Xtext 2.14.0
 */
package ac.soton.bsharp.bSharp.impl;

import ac.soton.bsharp.bSharp.BSharpPackage;
import ac.soton.bsharp.bSharp.BodyElements;
import ac.soton.bsharp.bSharp.GlobalImport;
import ac.soton.bsharp.bSharp.LocalImport;
import ac.soton.bsharp.bSharp.TopLevelFile;
import ac.soton.bsharp.bSharp.TopLevelImport;
import ac.soton.bsharp.theory.util.TheoryImportCache;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Top Level Import</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.TopLevelImportImpl#getGlobalImports <em>Global Imports</em>}</li>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.TopLevelImportImpl#getLocalImports <em>Local Imports</em>}</li>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.TopLevelImportImpl#getBodyElements <em>Body Elements</em>}</li>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.TopLevelImportImpl#getImportRefs <em>Import Refs</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TopLevelImportImpl extends ITheoryImportCacheProviderImpl implements TopLevelImport {
	/**
	 * The cached value of the '{@link #getGlobalImports() <em>Global Imports</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getGlobalImports()
	 * @generated
	 * @ordered
	 */
	protected EList<GlobalImport> globalImports;

	/**
	 * The cached value of the '{@link #getLocalImports() <em>Local Imports</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getLocalImports()
	 * @generated
	 * @ordered
	 */
	protected EList<LocalImport> localImports;

	/**
	 * The cached value of the '{@link #getBodyElements() <em>Body Elements</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getBodyElements()
	 * @generated
	 * @ordered
	 */
	protected BodyElements bodyElements;

	/**
	 * The cached value of the '{@link #getImportRefs() <em>Import Refs</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getImportRefs()
	 * @generated
	 * @ordered
	 */
	protected EList<TopLevelFile> importRefs;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopLevelImportImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BSharpPackage.Literals.TOP_LEVEL_IMPORT;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<GlobalImport> getGlobalImports() {
		if (globalImports == null) {
			globalImports = new EObjectContainmentEList<GlobalImport>(GlobalImport.class, this, BSharpPackage.TOP_LEVEL_IMPORT__GLOBAL_IMPORTS);
		}
		return globalImports;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<LocalImport> getLocalImports() {
		if (localImports == null) {
			localImports = new EObjectContainmentEList<LocalImport>(LocalImport.class, this, BSharpPackage.TOP_LEVEL_IMPORT__LOCAL_IMPORTS);
		}
		return localImports;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BodyElements getBodyElements() {
		return bodyElements;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetBodyElements(BodyElements newBodyElements, NotificationChain msgs) {
		BodyElements oldBodyElements = bodyElements;
		bodyElements = newBodyElements;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BSharpPackage.TOP_LEVEL_IMPORT__BODY_ELEMENTS, oldBodyElements, newBodyElements);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setBodyElements(BodyElements newBodyElements) {
		if (newBodyElements != bodyElements) {
			NotificationChain msgs = null;
			if (bodyElements != null)
				msgs = ((InternalEObject)bodyElements).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BSharpPackage.TOP_LEVEL_IMPORT__BODY_ELEMENTS, null, msgs);
			if (newBodyElements != null)
				msgs = ((InternalEObject)newBodyElements).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BSharpPackage.TOP_LEVEL_IMPORT__BODY_ELEMENTS, null, msgs);
			msgs = basicSetBodyElements(newBodyElements, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, BSharpPackage.TOP_LEVEL_IMPORT__BODY_ELEMENTS, newBodyElements, newBodyElements));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<TopLevelFile> getImportRefs() {
		if (importRefs == null) {
			importRefs = new EObjectContainmentEList<TopLevelFile>(TopLevelFile.class, this, BSharpPackage.TOP_LEVEL_IMPORT__IMPORT_REFS);
		}
		return importRefs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case BSharpPackage.TOP_LEVEL_IMPORT__GLOBAL_IMPORTS:
				return ((InternalEList<?>)getGlobalImports()).basicRemove(otherEnd, msgs);
			case BSharpPackage.TOP_LEVEL_IMPORT__LOCAL_IMPORTS:
				return ((InternalEList<?>)getLocalImports()).basicRemove(otherEnd, msgs);
			case BSharpPackage.TOP_LEVEL_IMPORT__BODY_ELEMENTS:
				return basicSetBodyElements(null, msgs);
			case BSharpPackage.TOP_LEVEL_IMPORT__IMPORT_REFS:
				return ((InternalEList<?>)getImportRefs()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case BSharpPackage.TOP_LEVEL_IMPORT__GLOBAL_IMPORTS:
				return getGlobalImports();
			case BSharpPackage.TOP_LEVEL_IMPORT__LOCAL_IMPORTS:
				return getLocalImports();
			case BSharpPackage.TOP_LEVEL_IMPORT__BODY_ELEMENTS:
				return getBodyElements();
			case BSharpPackage.TOP_LEVEL_IMPORT__IMPORT_REFS:
				return getImportRefs();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case BSharpPackage.TOP_LEVEL_IMPORT__GLOBAL_IMPORTS:
				getGlobalImports().clear();
				getGlobalImports().addAll((Collection<? extends GlobalImport>)newValue);
				return;
			case BSharpPackage.TOP_LEVEL_IMPORT__LOCAL_IMPORTS:
				getLocalImports().clear();
				getLocalImports().addAll((Collection<? extends LocalImport>)newValue);
				return;
			case BSharpPackage.TOP_LEVEL_IMPORT__BODY_ELEMENTS:
				setBodyElements((BodyElements)newValue);
				return;
			case BSharpPackage.TOP_LEVEL_IMPORT__IMPORT_REFS:
				getImportRefs().clear();
				getImportRefs().addAll((Collection<? extends TopLevelFile>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case BSharpPackage.TOP_LEVEL_IMPORT__GLOBAL_IMPORTS:
				getGlobalImports().clear();
				return;
			case BSharpPackage.TOP_LEVEL_IMPORT__LOCAL_IMPORTS:
				getLocalImports().clear();
				return;
			case BSharpPackage.TOP_LEVEL_IMPORT__BODY_ELEMENTS:
				setBodyElements((BodyElements)null);
				return;
			case BSharpPackage.TOP_LEVEL_IMPORT__IMPORT_REFS:
				getImportRefs().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case BSharpPackage.TOP_LEVEL_IMPORT__GLOBAL_IMPORTS:
				return globalImports != null && !globalImports.isEmpty();
			case BSharpPackage.TOP_LEVEL_IMPORT__LOCAL_IMPORTS:
				return localImports != null && !localImports.isEmpty();
			case BSharpPackage.TOP_LEVEL_IMPORT__BODY_ELEMENTS:
				return bodyElements != null;
			case BSharpPackage.TOP_LEVEL_IMPORT__IMPORT_REFS:
				return importRefs != null && !importRefs.isEmpty();
		}
		return super.eIsSet(featureID);
	}
	
	protected TheoryImportCache thyCache;

	@Override
	public TheoryImportCache getTheoryImportCache() {
		return thyCache;
	}

	@Override
	public void setTheoryImportCache(TheoryImportCache thyCache) {
		this.thyCache = thyCache;
	}

} //TopLevelImportImpl
