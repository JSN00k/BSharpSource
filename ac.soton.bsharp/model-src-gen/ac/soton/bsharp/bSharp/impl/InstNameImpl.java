/**
 * generated by Xtext 2.14.0
 */
package ac.soton.bsharp.bSharp.impl;

import ac.soton.bsharp.bSharp.BSClass;
import ac.soton.bsharp.bSharp.BSharpFactory;
import ac.soton.bsharp.bSharp.BSharpPackage;
import ac.soton.bsharp.bSharp.ConstructedType;
import ac.soton.bsharp.bSharp.Expression;
import ac.soton.bsharp.bSharp.FunctionCall;
import ac.soton.bsharp.bSharp.InstName;
import ac.soton.bsharp.bSharp.TypeBuilder;
import ac.soton.bsharp.bSharp.TypeConstructor;
import ac.soton.bsharp.bSharp.TypeDeclContext;
import ac.soton.bsharp.bSharp.util.CompilationUtil;
import ac.soton.bsharp.typeInstanceRepresentation.ITypeInstance;

import java.util.List;

import org.eclipse.emf.ecore.EClass;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Inst Name</b></em>'.
 * <!-- end-user-doc -->
 *
 * @generated
 */
public class InstNameImpl extends ExpressionVariableImpl implements InstName {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstNameImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BSharpPackage.Literals.INST_NAME;
	}

	@Override
	public TypeBuilder calculateReturnType(TypeDeclContext ctx, List<Expression> args) {
		BSClass bs = (BSClass)this.eContainer();
		TypeBuilder tb = bs.baseType();
		
		tb = tb.reorderTypeTree();
		if (tb instanceof ConstructedType)
			return ((ConstructedType)tb).getRight();
		
		return null;
	}

	@Override
	public TypeBuilder calculateType() {
		TypeConstructor tc = BSharpFactory.eINSTANCE.createTypeConstructor();
		tc.setTypeName((BSClass)eContainer());
		return tc;
	}
} //InstNameImpl
