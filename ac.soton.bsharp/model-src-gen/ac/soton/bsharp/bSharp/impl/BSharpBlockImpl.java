/**
 * generated by Xtext 2.14.0
 */
package ac.soton.bsharp.bSharp.impl;

import ac.soton.bsharp.bSharp.BSharpBlock;
import ac.soton.bsharp.bSharp.BSharpPackage;
import ac.soton.bsharp.bSharp.FunctionDecl;
import ac.soton.bsharp.bSharp.Instance;
import ac.soton.bsharp.bSharp.TheoremBody;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Block</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.BSharpBlockImpl#getFunctions <em>Functions</em>}</li>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.BSharpBlockImpl#getTheorems <em>Theorems</em>}</li>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.BSharpBlockImpl#getInstances <em>Instances</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BSharpBlockImpl extends MinimalEObjectImpl.Container implements BSharpBlock {
	/**
	 * The cached value of the '{@link #getFunctions() <em>Functions</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getFunctions()
	 * @generated
	 * @ordered
	 */
	protected EList<FunctionDecl> functions;
	/**
	 * The cached value of the '{@link #getTheorems() <em>Theorems</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getTheorems()
	 * @generated
	 * @ordered
	 */
	protected EList<TheoremBody> theorems;
	/**
	 * The cached value of the '{@link #getInstances() <em>Instances</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getInstances()
	 * @generated
	 * @ordered
	 */
	protected EList<Instance> instances;
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BSharpBlockImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BSharpPackage.Literals.BSHARP_BLOCK;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<FunctionDecl> getFunctions() {
		if (functions == null) {
			functions = new EObjectContainmentEList<FunctionDecl>(FunctionDecl.class, this, BSharpPackage.BSHARP_BLOCK__FUNCTIONS);
		}
		return functions;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<TheoremBody> getTheorems() {
		if (theorems == null) {
			theorems = new EObjectContainmentEList<TheoremBody>(TheoremBody.class, this, BSharpPackage.BSHARP_BLOCK__THEOREMS);
		}
		return theorems;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Instance> getInstances() {
		if (instances == null) {
			instances = new EObjectContainmentEList<Instance>(Instance.class, this, BSharpPackage.BSHARP_BLOCK__INSTANCES);
		}
		return instances;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case BSharpPackage.BSHARP_BLOCK__FUNCTIONS:
				return ((InternalEList<?>)getFunctions()).basicRemove(otherEnd, msgs);
			case BSharpPackage.BSHARP_BLOCK__THEOREMS:
				return ((InternalEList<?>)getTheorems()).basicRemove(otherEnd, msgs);
			case BSharpPackage.BSHARP_BLOCK__INSTANCES:
				return ((InternalEList<?>)getInstances()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case BSharpPackage.BSHARP_BLOCK__FUNCTIONS:
				return getFunctions();
			case BSharpPackage.BSHARP_BLOCK__THEOREMS:
				return getTheorems();
			case BSharpPackage.BSHARP_BLOCK__INSTANCES:
				return getInstances();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case BSharpPackage.BSHARP_BLOCK__FUNCTIONS:
				getFunctions().clear();
				getFunctions().addAll((Collection<? extends FunctionDecl>)newValue);
				return;
			case BSharpPackage.BSHARP_BLOCK__THEOREMS:
				getTheorems().clear();
				getTheorems().addAll((Collection<? extends TheoremBody>)newValue);
				return;
			case BSharpPackage.BSHARP_BLOCK__INSTANCES:
				getInstances().clear();
				getInstances().addAll((Collection<? extends Instance>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case BSharpPackage.BSHARP_BLOCK__FUNCTIONS:
				getFunctions().clear();
				return;
			case BSharpPackage.BSHARP_BLOCK__THEOREMS:
				getTheorems().clear();
				return;
			case BSharpPackage.BSHARP_BLOCK__INSTANCES:
				getInstances().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case BSharpPackage.BSHARP_BLOCK__FUNCTIONS:
				return functions != null && !functions.isEmpty();
			case BSharpPackage.BSHARP_BLOCK__THEOREMS:
				return theorems != null && !theorems.isEmpty();
			case BSharpPackage.BSHARP_BLOCK__INSTANCES:
				return instances != null && !instances.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	@Override
	public void compile() {
		if (functions != null && !functions.isEmpty()) {
			for (FunctionDecl func : functions) {
				func.compile();
			}
		}
		
		if (theorems != null && !theorems.isEmpty()) {
			for (TheoremBody theoremBod : theorems) {
				theoremBod.compile();
			}
		}
	}

} //BSharpBlockImpl
