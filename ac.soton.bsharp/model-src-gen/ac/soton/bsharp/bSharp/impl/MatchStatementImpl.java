/**
 * generated by Xtext 2.14.0
 */
package ac.soton.bsharp.bSharp.impl;

import ac.soton.bsharp.bSharp.BSharpPackage;
import ac.soton.bsharp.bSharp.MatchCase;
import ac.soton.bsharp.bSharp.MatchStatement;
import ac.soton.bsharp.bSharp.TypedVariable;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Match Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.MatchStatementImpl#getMatch <em>Match</em>}</li>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.MatchStatementImpl#getInductCase <em>Induct Case</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MatchStatementImpl extends ExpressionImpl implements MatchStatement {
	/**
	 * The cached value of the '{@link #getMatch() <em>Match</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getMatch()
	 * @generated
	 * @ordered
	 */
	protected TypedVariable match;

	/**
	 * The cached value of the '{@link #getInductCase() <em>Induct Case</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getInductCase()
	 * @generated
	 * @ordered
	 */
	protected EList<MatchCase> inductCase;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchStatementImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BSharpPackage.Literals.MATCH_STATEMENT;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TypedVariable getMatch() {
		if (match != null && match.eIsProxy()) {
			InternalEObject oldMatch = (InternalEObject)match;
			match = (TypedVariable)eResolveProxy(oldMatch);
			if (match != oldMatch) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, BSharpPackage.MATCH_STATEMENT__MATCH, oldMatch, match));
			}
		}
		return match;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TypedVariable basicGetMatch() {
		return match;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setMatch(TypedVariable newMatch) {
		TypedVariable oldMatch = match;
		match = newMatch;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, BSharpPackage.MATCH_STATEMENT__MATCH, oldMatch, match));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<MatchCase> getInductCase() {
		if (inductCase == null) {
			inductCase = new EObjectContainmentEList<MatchCase>(MatchCase.class, this, BSharpPackage.MATCH_STATEMENT__INDUCT_CASE);
		}
		return inductCase;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case BSharpPackage.MATCH_STATEMENT__INDUCT_CASE:
				return ((InternalEList<?>)getInductCase()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case BSharpPackage.MATCH_STATEMENT__MATCH:
				if (resolve) return getMatch();
				return basicGetMatch();
			case BSharpPackage.MATCH_STATEMENT__INDUCT_CASE:
				return getInductCase();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case BSharpPackage.MATCH_STATEMENT__MATCH:
				setMatch((TypedVariable)newValue);
				return;
			case BSharpPackage.MATCH_STATEMENT__INDUCT_CASE:
				getInductCase().clear();
				getInductCase().addAll((Collection<? extends MatchCase>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case BSharpPackage.MATCH_STATEMENT__MATCH:
				setMatch((TypedVariable)null);
				return;
			case BSharpPackage.MATCH_STATEMENT__INDUCT_CASE:
				getInductCase().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case BSharpPackage.MATCH_STATEMENT__MATCH:
				return match != null;
			case BSharpPackage.MATCH_STATEMENT__INDUCT_CASE:
				return inductCase != null && !inductCase.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	@Override
	public String constructLatexExpressionTree(String indent) {
		String result = indent + "[.$match\\ " + getMatch() + "$ \n";
		EList<MatchCase> cases = getInductCase();
		for (MatchCase matchCase : cases) {
			result += "[.$" + matchCase.getDeconName() + "$\n";
			result += matchCase.getExpr().constructLatexExpressionTree("  " + indent);
		}
		
		return result;
	}

	@Override
	public String compileToEventBString(Boolean asPredicate) throws Exception {
		/* Match statements could be handled either my generating a new recursive function
		 * (This is the only thing to do if the match statement is the opt level statement),
		 * This would involve either passing all variables to the new function or working 
		 * out which variables need to be passed.
		 * 
		 * They could also be handled using a series of COND statements, this has the advantage
		 * of working Even on non-recursively defined types, however the nested COND have the potential
		 * to get large. 
		 * 
		 * In general I think I should take the functional approach where possible.
		 */
		
		//TODO: Implement me!
		
		throw new Exception("In MatchStatementImpl compileToEventBString is unimplemented");
	}

	@Override
	public Integer eventBPrecedence(Boolean whenPredicate) {
		return 2;
	}

} //MatchStatementImpl
