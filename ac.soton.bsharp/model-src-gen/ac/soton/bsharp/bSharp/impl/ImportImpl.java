/**
 * generated by Xtext 2.14.0
 */
package ac.soton.bsharp.bSharp.impl;

import ac.soton.bsharp.bSharp.BSharpPackage;
import ac.soton.bsharp.bSharp.FileImport;
import ac.soton.bsharp.bSharp.Import;
import ac.soton.bsharp.bSharp.TopLevelInstance;
import ac.soton.bsharp.bSharp.util.ComparatorHashSet;
import ac.soton.bsharp.bSharp.util.EventBFQNImport;

import java.util.Collection;
import java.util.List;
import java.util.Set;

import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Import</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.ImportImpl#getFileImports <em>File Imports</em>}</li>
 * </ul>
 *
 * @generated
 */
public abstract class ImportImpl extends MinimalEObjectImpl.Container implements Import {
	/**
	 * The cached value of the '{@link #getFileImports() <em>File Imports</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getFileImports()
	 * @generated
	 * @ordered
	 */
	protected EList<FileImport> fileImports;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BSharpPackage.Literals.IMPORT;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<FileImport> getFileImports() {
		if (fileImports == null) {
			fileImports = new EObjectContainmentEList<FileImport>(FileImport.class, this, BSharpPackage.IMPORT__FILE_IMPORTS);
		}
		return fileImports;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case BSharpPackage.IMPORT__FILE_IMPORTS:
				return ((InternalEList<?>)getFileImports()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case BSharpPackage.IMPORT__FILE_IMPORTS:
				return getFileImports();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case BSharpPackage.IMPORT__FILE_IMPORTS:
				getFileImports().clear();
				getFileImports().addAll((Collection<? extends FileImport>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case BSharpPackage.IMPORT__FILE_IMPORTS:
				getFileImports().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case BSharpPackage.IMPORT__FILE_IMPORTS:
				return fileImports != null && !fileImports.isEmpty();
		}
		return super.eIsSet(featureID);
	}
	
	@Override
	public void addAllImportFqnsToNewImports(Set<EventBFQNImport> alreadyImported, Set<EventBFQNImport> newImports) {
		List<FileImport> fileImports = getFileImports();
		if (fileImports == null || fileImports.isEmpty())
			return;
		
		for (FileImport imp : fileImports) {
			imp.addImportFqnsRecursive(alreadyImported, newImports);
		}
	}
	
	/* This is called when we're going to add an element to the newImports, it adds anything that it has already
	 * imported to the alreadyImported set. If the element being added to the alreadyImported set is in the
	 * newImports set it is removed from the newImports set.
	 */
	@Override
	public void addAllElementsToAlreadyImported(Set<EventBFQNImport> alreadyImported, Set<EventBFQNImport> newImports) {
		List<FileImport> fileImports = getFileImports();
		if (fileImports == null || fileImports.isEmpty())
			return;
		
		for (FileImport imp : fileImports) {
			imp.addImportFqnsToAlreadyImportedRecursive(alreadyImported, newImports);
		}
	}

} //ImportImpl
