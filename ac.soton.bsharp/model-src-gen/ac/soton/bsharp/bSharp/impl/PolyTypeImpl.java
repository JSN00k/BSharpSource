/**
 * generated by Xtext 2.14.0
 */
package ac.soton.bsharp.bSharp.impl;

import ac.soton.bsharp.bSharp.BSClass;
import ac.soton.bsharp.bSharp.BSharpPackage;
import ac.soton.bsharp.bSharp.ClassDecl;
import ac.soton.bsharp.bSharp.ConstructedType;
import ac.soton.bsharp.bSharp.Datatype;
import ac.soton.bsharp.bSharp.GenName;
import ac.soton.bsharp.bSharp.PolyType;
import ac.soton.bsharp.bSharp.TypeBuilder;
import ac.soton.bsharp.bSharp.TypeConstrBracket;
import ac.soton.bsharp.bSharp.TypeConstructor;
import ac.soton.bsharp.bSharp.util.CompilationUtil;
import ac.soton.bsharp.bSharp.util.Tuple2;
import ac.soton.bsharp.theory.util.TheoryImportCache;
import ac.soton.bsharp.theory.util.TheoryUtils;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eventb.theory.core.INewOperatorDefinition;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Poly Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.PolyTypeImpl#getSuperTypes <em>Super Types</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PolyTypeImpl extends GenNameImpl implements PolyType {
	/**
	 * The cached value of the '{@link #getSuperTypes() <em>Super Types</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSuperTypes()
	 * @generated
	 * @ordered
	 */
	protected EList<ClassDecl> superTypes;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PolyTypeImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BSharpPackage.Literals.POLY_TYPE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<ClassDecl> getSuperTypes() {
		if (superTypes == null) {
			superTypes = new EObjectResolvingEList<ClassDecl>(ClassDecl.class, this, BSharpPackage.POLY_TYPE__SUPER_TYPES);
		}
		return superTypes;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case BSharpPackage.POLY_TYPE__SUPER_TYPES:
				return getSuperTypes();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case BSharpPackage.POLY_TYPE__SUPER_TYPES:
				getSuperTypes().clear();
				getSuperTypes().addAll((Collection<? extends ClassDecl>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case BSharpPackage.POLY_TYPE__SUPER_TYPES:
				getSuperTypes().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case BSharpPackage.POLY_TYPE__SUPER_TYPES:
				return superTypes != null && !superTypes.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	protected IProgressMonitor nullMonitor = new NullProgressMonitor();
	
	String deconstructionType(TypeBuilder callType, ClassDecl containerType) {
		callType.reorderTypeTree();
		
		if (callType instanceof ConstructedType) {
			return callType.buildEventBType();
		}
		
		if (superTypes == null || superTypes.isEmpty())
			return callType.buildEventBType();
		
		BSClass sType = (BSClass)superTypes.get(0); 
		
		/* All brackets have been removed so the only thing left is a TypeConstructor */
		TypeConstructor tConstr = (TypeConstructor)callType;
		
		GenName generic = tConstr.getTypeName();
		if (generic instanceof BSClass) {
			Integer prjsRequired = ((BSClass)generic).prjsRequiredForSupertype(sType);
			if (generic == containerType) {
				/* When within a type class declaration the type class can be refered to as a type
				 * without any constructors rather than having a this/self structure. I believe that
				 * we can only get to this point within the type class declaration, so
				 * we need to use the supertype inst. */
				return CompilationUtil.wrapNameInPrjs(((BSClass)generic).constructionInstName(), prjsRequired - 1);
			}
			
			return CompilationUtil.wrapNameInPrjs(callType.buildEventBType(), prjsRequired);
		}
		
		if (generic instanceof Datatype) {
			return callType.buildEventBType() + "_" + sType.getName();
		}
		
		return null;
	}

	/* A BSharp type in a polynomial context is represented by several EventB types, given an
	 * EventB type the necessary other arguments can be constructed by deconstructing the 
	 * total EventB type. This is what this method does.
	 */
	@Override
	public String deconstructTypeToArguments(TypeBuilder callType, ClassDecl containerType) {
		/* All the supertypes require the same type structure. so we can get the
		 * first supertype and go from there. If there are no supertypes then
		 * just return the call type compiled as is.
		 */
		if (superTypes == null || superTypes.isEmpty()) {
			return callType.buildEventBType();
		}
		
		BSClass sType = (BSClass)superTypes.get(0);
		return sType.deconstructEventBTypeToArguments(deconstructionType(callType, containerType));
	}
	
	@Override
	public String baseTypeString() {
		if (superTypes != null && !superTypes.isEmpty()) {
			BSClass sup = (BSClass)superTypes.get(0);
			return sup.baseTypeStringForPolymorphicType(this);
		}
		
		return name;
	}
	
	@Override
	public ArrayList<String> typeNames() {
		ArrayList<String> result = new ArrayList<String>();
		
		if (superTypes == null || superTypes.isEmpty()) {
			result.add(name);
			return result;
		}
		
		BSClass superT = (BSClass)superTypes.iterator().next();
		Integer argsRequied = superT.eventBRequiredPolyTypes();
		
		for (Integer i = 1; i <= argsRequied; ++i) {
			result.add(name + i.toString());
		}
		
		result.add(name);
		
		return result;
	}
	
	@Override
	public ArrayList<Tuple2<String, String>> eBNamesAndTypes(TheoryImportCache theoryCache) {
		TheoryImportCache thyCache = theoryCache;
		ArrayList<Tuple2<String, String>> result = new ArrayList<Tuple2<String,String>>();
		if (thyCache == null) {
			/* This will crash if the current type is a reference. */
			thyCache = CompilationUtil.getTheoryCacheForElement(this);
		}
		ArrayList<String> varNames = new ArrayList<String>();
		
		if (superTypes == null || superTypes.isEmpty()) {
			String type = "ℙ(" + thyCache.getEventBTypeParamNameForName(name) + ")";
			result.add(new Tuple2<String, String>(name, type));
			return result;
		}
		
		
		Boolean first = true;
		String constructedType = "";
		/* This will only work if the supertypes have a very similar structure due to the Event-B mapping.
		 * This requires more thought. The final result could be the union or inner product of the types.
		 * I can't think of a situation where multiple supertypes would be neccessary, so maybe it would be
		 * better to only allow one.
		 */
		for (ClassDecl supertype : superTypes) {
			BSClass superT = (BSClass)supertype;
			
			if (first) {
				/* Supertypes are currently constrained to all have similar structures. A better decision 
				 * needs to be made about this.
				 */
				Integer argsRequired = superT.eventBRequiredPolyTypes();
				for (Integer i = 1; i <= argsRequired; ++i) {
					String varName = name + i.toString();
					String typeName = "ℙ("  +thyCache.getEventBTypeParamNameForName(varName) + ")";
					result.add(new Tuple2<String, String>(varName, typeName));
					
					varNames.add(varName);
				}
				
				first = false;
			} else {
				constructedType += "∩";
			}
			
			String superConstr = superT.eventBPolymorphicTypeConstructorName() + "(";
			Boolean first2 = true;
			for (String polyname : varNames) {
				if (!first2) 
					superConstr += ", ";
				
				first2 = false;
					
				superConstr += polyname;
			}
			
			superConstr += ")";
			
			constructedType += superConstr;
		}
		
		result.add(new Tuple2<String, String>(name, constructedType));
		
		return result;
	}

} //PolyTypeImpl
