/**
 * generated by Xtext 2.14.0
 */
package ac.soton.bsharp.bSharp.impl;

import ac.soton.bsharp.bSharp.BSClass;
import ac.soton.bsharp.bSharp.BSharpPackage;
import ac.soton.bsharp.bSharp.ClassDecl;
import ac.soton.bsharp.bSharp.ConstructedType;
import ac.soton.bsharp.bSharp.GenName;
import ac.soton.bsharp.bSharp.PolyType;
import ac.soton.bsharp.bSharp.TypeConstrBracket;
import ac.soton.bsharp.bSharp.TypeConstructor;
import ac.soton.bsharp.bSharp.util.CompilationUtil;
import ac.soton.bsharp.theory.util.TheoryImportCache;
import ac.soton.bsharp.theory.util.TheoryUtils;

import java.util.Collection;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eventb.theory.core.INewOperatorDefinition;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Poly Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.PolyTypeImpl#getSuperTypes <em>Super Types</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PolyTypeImpl extends GenNameImpl implements PolyType {
	/**
	 * The cached value of the '{@link #getSuperTypes() <em>Super Types</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSuperTypes()
	 * @generated
	 * @ordered
	 */
	protected EList<ClassDecl> superTypes;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PolyTypeImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BSharpPackage.Literals.POLY_TYPE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<ClassDecl> getSuperTypes() {
		if (superTypes == null) {
			superTypes = new EObjectResolvingEList<ClassDecl>(ClassDecl.class, this, BSharpPackage.POLY_TYPE__SUPER_TYPES);
		}
		return superTypes;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case BSharpPackage.POLY_TYPE__SUPER_TYPES:
				return getSuperTypes();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case BSharpPackage.POLY_TYPE__SUPER_TYPES:
				getSuperTypes().clear();
				getSuperTypes().addAll((Collection<? extends ClassDecl>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case BSharpPackage.POLY_TYPE__SUPER_TYPES:
				getSuperTypes().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case BSharpPackage.POLY_TYPE__SUPER_TYPES:
				return superTypes != null && !superTypes.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	protected IProgressMonitor nullMonitor = new NullProgressMonitor();

	/*TODO: The two methods below need to be completed as I get to examples where these things are needed.
	 * It is currently too complex to try to compile it all at once without real examples to work from.
	 */
	
	@Override
	public void compileToBSClassOpArgs(INewOperatorDefinition op) {
		TheoryImportCache thyCache = CompilationUtil.getTheoryCacheForElement(this);
		
		if (superTypes == null || superTypes.isEmpty()) {
			String eventBTypeParamName = thyCache.getEventBTypeParamNameForName(name);
			
			try {
				TheoryUtils.createArgument(op, name, "â„™(" + eventBTypeParamName + ")", null, nullMonitor);
			} catch (Exception e) {
				System.err.println("Unable to create EventB type param named: " + eventBTypeParamName + e.getLocalizedMessage());
			}
			
			return;
		}
		
		for (ClassDecl supertype : superTypes) {
			/* I think that the supertypes should only be able to be type classes. */
			if (!(supertype instanceof BSClass)) {
				System.err.println("Need to either make it so polymorphic types can have non BSClasses as supertypes"
						+ "or change the BSharp file so we can only have BSClasses here.");
			}
			
			BSClass bsSuper = (BSClass)supertype;
			/* TODO: Work out what I was doing here and finish the implementation. */
				
		}
	}

	/* The polyConstext becomes the list of arguments to build a generic type based on specific 
	 * type instances. e.g., given a monoid declared Monoid<T> : Setoid<T> the set of all monoids
	 * on the naturals can be created with Monoid<pNat>. This is made considerably more complicated
	 * with a type class such as Homo<S : Setoid, T : Setoid>... Now the EventB when Homo<pNat, pNat>
	 * is called needs to be Homo(pNat, Setoid<pNat>, pNat, Setoid<pNat>). This complexity again comes
	 * down to allowing Type Classes to have non-trivial classes at their base. Something that I'm not 
	 * sure whether or not to allow.
	 */
	@Override
	public String expandToEventBTypeWithConstrType(ConstructedType constrType) {
		/* TODO: With a constructed type add a proof obligation to demonstrate the constructed
		 * type is of the required type.
		 */
		
		ConstructedType workingType = constrType;
		while (workingType instanceof TypeConstrBracket) {
			workingType = ((TypeConstrBracket)workingType).getChild();
		}
		
		if (superTypes == nullMonitor || superTypes.isEmpty()) {
			if (!(workingType instanceof TypeConstructor)) {
				return ((ConstructedType)workingType).buildEventBType();
			} else {
				/* Base type goes all the way back to the simplest type that the 
				 * type class was based on. */
				return ((TypeConstructor)workingType).getTypeName().getName();
			}
		}
		
		/* we need something with a matching type to that of the supertype of the polytype. 
		 * Yet another point where validation is needed.
		 */
		
		
		String classString = null;
		ClassDecl supertype1 = superTypes.get(0);
		
		if ((workingType instanceof TypeConstructor)) {
			GenName constrTypeClass = ((TypeConstructor) workingType).getTypeName();
			
			if (constrTypeClass instanceof PolyType) {
				
			}
		}
		
		return null;
	}
	
	

} //PolyTypeImpl
