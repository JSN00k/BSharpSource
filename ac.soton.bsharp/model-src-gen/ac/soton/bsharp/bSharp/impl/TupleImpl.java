/**
 * generated by Xtext 2.14.0
 */
package ac.soton.bsharp.bSharp.impl;

import ac.soton.bsharp.bSharp.BSharpFactory;
import ac.soton.bsharp.bSharp.BSharpPackage;
import ac.soton.bsharp.bSharp.ConstructedType;
import ac.soton.bsharp.bSharp.Expression;
import ac.soton.bsharp.bSharp.Tuple;
import ac.soton.bsharp.bSharp.TypeBuilder;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Tuple</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.TupleImpl#getElements <em>Elements</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TupleImpl extends ExpressionImpl implements Tuple {
	/**
	 * The cached value of the '{@link #getElements() <em>Elements</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getElements()
	 * @generated
	 * @ordered
	 */
	protected EList<Expression> elements;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TupleImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BSharpPackage.Literals.TUPLE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<Expression> getElements() {
		if (elements == null) {
			elements = new EObjectContainmentEList<Expression>(Expression.class, this, BSharpPackage.TUPLE__ELEMENTS);
		}
		return elements;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case BSharpPackage.TUPLE__ELEMENTS:
				return ((InternalEList<?>)getElements()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case BSharpPackage.TUPLE__ELEMENTS:
				return getElements();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case BSharpPackage.TUPLE__ELEMENTS:
				getElements().clear();
				getElements().addAll((Collection<? extends Expression>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case BSharpPackage.TUPLE__ELEMENTS:
				getElements().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case BSharpPackage.TUPLE__ELEMENTS:
				return elements != null && !elements.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	@Override
	public String constructLatexExpressionTree(String indent) {
		String name = "tuple";
		String result = indent + "[.$" + name + "$\n";
		
		List<Expression> elements = getElements();
		
		for (Expression elem : elements) {
			result += elem.constructLatexExpressionTree("  "  + indent);
		}
		result += indent + "]";
		
		return result;
	}

	@Override
	public String compileToEventBString(Boolean asPredicate) throws Exception {
		List<Expression> elements = getElements();
		String result = "";
		
		if (asPredicate && elements.size() != 1) {
			throw new Exception("Tried to compile a multi-element tuple as a predicate");
		}
		
		boolean first = true;
		for (Expression elem : elements) {
			if (!first) {
				result += "â†¦";
			}
			first = false;
			
			if (elem instanceof Tuple) {
				result += "(" + elem.compileToEventBString(asPredicate) + ")";
			} else {
				result += elem.compileToEventBString(asPredicate);
			}
		}
		
		return result;
	}

	@Override
	public Integer eventBPrecedence(Boolean whenPredicate) {
		return 0;
	}

	@Override
	public Boolean requiresInferredContext() {
		List<Expression> elements = getElements();
		for (Expression elem : elements) {
			if (elem.requiresInferredContext())
				return true;
		}
		
		return false;
	}

	@Override
	public Expression reorderExpresionTree() {
		if (reordered) {
			return this;
		}
		
		reordered = true;
		
		List<Expression> elements = getElements();
		
		if (elements.size() == 1) {
			/* A single element tuple is just brackets and these
			 * can be removed.
			 */
			return elements.get(0).reorderExpresionTree();
		}
		
		for (Expression elem : elements) {
			elem.reorderExpresionTree();
		}
		
		return this;
	}

	@Override
	public boolean referencesContainingType() {
		List<Expression> elements = getElements();
		for (Expression elem : elements) {
			if (elem.referencesContainingType())
				return true;
		}
		
		return false;
	}

	@Override
	public TypeBuilder calculateType() {
		List<Expression> elements = getElements();
		if (elements.size() == 1) {
			/* This is brackets (not really a tuple */
			return elements.get(0).calculateType();
		}
		
		Iterator<Expression> iterator = elements.iterator();
		ConstructedType result = BSharpFactory.eINSTANCE.createConstructedType();
		result.setLeft(iterator.next().calculateType());
		
		while (iterator.hasNext()) {
			Expression next = iterator.next();
			result.setRight(next.calculateType());
			if (iterator.hasNext()) {
				ConstructedType newRes = BSharpFactory.eINSTANCE.createConstructedType();
				newRes.setLeft(result);
				result = newRes;
			}
		}
		
		return result;
	}

} //TupleImpl
