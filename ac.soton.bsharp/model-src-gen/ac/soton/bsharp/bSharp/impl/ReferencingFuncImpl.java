/**
 * generated by Xtext 2.14.0
 */
package ac.soton.bsharp.bSharp.impl;

import ac.soton.bsharp.bSharp.BSharpPackage;
import ac.soton.bsharp.bSharp.FunctionDecl;
import ac.soton.bsharp.bSharp.Instance;
import ac.soton.bsharp.bSharp.PolyContext;
import ac.soton.bsharp.bSharp.ReferencingFunc;
import ac.soton.bsharp.bSharp.TypedVariableList;
import ac.soton.bsharp.bSharp.util.CompilationUtil;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.xtext.EcoreUtil2;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Referencing Func</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.ReferencingFuncImpl#getReferencedFunc <em>Referenced Func</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ReferencingFuncImpl extends FunctionDeclImpl implements ReferencingFunc {
	/**
	 * The cached value of the '{@link #getReferencedFunc() <em>Referenced Func</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getReferencedFunc()
	 * @generated
	 * @ordered
	 */
	protected FunctionDecl referencedFunc;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferencingFuncImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BSharpPackage.Literals.REFERENCING_FUNC;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public FunctionDecl getReferencedFunc() {
		if (referencedFunc != null && referencedFunc.eIsProxy()) {
			InternalEObject oldReferencedFunc = (InternalEObject)referencedFunc;
			referencedFunc = (FunctionDecl)eResolveProxy(oldReferencedFunc);
			if (referencedFunc != oldReferencedFunc) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, BSharpPackage.REFERENCING_FUNC__REFERENCED_FUNC, oldReferencedFunc, referencedFunc));
			}
		}
		return referencedFunc;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FunctionDecl basicGetReferencedFunc() {
		return referencedFunc;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setReferencedFunc(FunctionDecl newReferencedFunc) {
		FunctionDecl oldReferencedFunc = referencedFunc;
		referencedFunc = newReferencedFunc;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, BSharpPackage.REFERENCING_FUNC__REFERENCED_FUNC, oldReferencedFunc, referencedFunc));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case BSharpPackage.REFERENCING_FUNC__REFERENCED_FUNC:
				if (resolve) return getReferencedFunc();
				return basicGetReferencedFunc();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case BSharpPackage.REFERENCING_FUNC__REFERENCED_FUNC:
				setReferencedFunc((FunctionDecl)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case BSharpPackage.REFERENCING_FUNC__REFERENCED_FUNC:
				setReferencedFunc((FunctionDecl)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case BSharpPackage.REFERENCING_FUNC__REFERENCED_FUNC:
				return referencedFunc != null;
		}
		return super.eIsSet(featureID);
	}
	
	@Override
	public PolyContext getContext() {
		return getReferencedFunc().getContext();
	}
	
	@Override
	public TypedVariableList getVarList() {
		return getReferencedFunc().getVarList();
	}
	
	@Override
	public boolean compilationRequiresContext(EObject cont) {
		/* This needs to be overriden because it is assumed that FunctionDecls have a
		 * expr, and referencing ones don't. Also we know that this class doesn't have
		 * an inferred reference to the current type class as these are generated in 
		 * instances.
		 */
		FunctionDecl refedFunc = getReferencedFunc();
		PolyContext ctx = refedFunc.getContext();
		return ctx != null && !ctx.isEmpty();
	}
	
	@Override
	public boolean hasInferredContext() {
		return getReferencedFunc().hasInferredContext();
	}
	
	@Override
	public
	String eventBExprName() {
		return CompilationUtil.getClassDecl(this).getName() + "_" + getName();
	}

} //ReferencingFuncImpl
