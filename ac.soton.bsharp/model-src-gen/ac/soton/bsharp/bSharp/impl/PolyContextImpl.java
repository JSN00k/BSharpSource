/**
 * generated by Xtext 2.14.0
 */
package ac.soton.bsharp.bSharp.impl;

import ac.soton.bsharp.bSharp.BSharpPackage;
import ac.soton.bsharp.bSharp.PolyContext;
import ac.soton.bsharp.bSharp.PolyType;
import ac.soton.bsharp.theory.util.TheoryImportCache;
import ac.soton.bsharp.theory.util.TheoryUtils;

import java.util.Collection;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eventb.theory.core.INewOperatorDefinition;
import org.eventb.theory.core.ITypeParameter;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Poly Context</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.PolyContextImpl#getPolyTypes <em>Poly Types</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PolyContextImpl extends MinimalEObjectImpl.Container implements PolyContext {
	/**
	 * The cached value of the '{@link #getPolyTypes() <em>Poly Types</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getPolyTypes()
	 * @generated
	 * @ordered
	 */
	protected EList<PolyType> polyTypes;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PolyContextImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BSharpPackage.Literals.POLY_CONTEXT;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<PolyType> getPolyTypes() {
		if (polyTypes == null) {
			polyTypes = new EObjectContainmentEList<PolyType>(PolyType.class, this, BSharpPackage.POLY_CONTEXT__POLY_TYPES);
		}
		return polyTypes;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case BSharpPackage.POLY_CONTEXT__POLY_TYPES:
				return ((InternalEList<?>)getPolyTypes()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case BSharpPackage.POLY_CONTEXT__POLY_TYPES:
				return getPolyTypes();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case BSharpPackage.POLY_CONTEXT__POLY_TYPES:
				getPolyTypes().clear();
				getPolyTypes().addAll((Collection<? extends PolyType>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case BSharpPackage.POLY_CONTEXT__POLY_TYPES:
				getPolyTypes().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case BSharpPackage.POLY_CONTEXT__POLY_TYPES:
				return polyTypes != null && !polyTypes.isEmpty();
		}
		return super.eIsSet(featureID);
	}
	

	@Override
	public Integer eventBPolyVarCount() {
		Collection<PolyType> polyTypes = getPolyTypes();
		if (polyTypes == null) {
			return 1;
		} else {
			Integer count = polyTypes.size();
			if (count == 0)
				return 1;
			else 
				return count;
		}
	}
	
	private TheoryImportCache thyCache;
	protected IProgressMonitor nullMonitor = new NullProgressMonitor();

	@Override
	public void setupCompilation(TheoryImportCache theoryCache) {
		thyCache = theoryCache;
	}

	@Override
	public void compileToBSClassOpArgs(INewOperatorDefinition op) {
		if (polyTypes == null || polyTypes.size() == 0)
			return;
		
		for (PolyType polyType : polyTypes) {
			String name = polyType.getName();
			String eventBTypeParamName = thyCache.getEventBTypeParamNameForName(name);
			
			try {
				TheoryUtils.createArgument(op, name, "â„™(" + eventBTypeParamName + ")", null, nullMonitor);
			} catch (Exception e) {
				System.err.println("Unable to create EventB type param named: " + eventBTypeParamName + e.getLocalizedMessage());
			}
		}
	}

} //PolyContextImpl
