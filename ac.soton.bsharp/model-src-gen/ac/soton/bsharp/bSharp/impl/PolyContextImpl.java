/**
 * generated by Xtext 2.14.0
 */
package ac.soton.bsharp.bSharp.impl;

import ac.soton.bsharp.bSharp.BSharpPackage;
import ac.soton.bsharp.bSharp.ClassDecl;
import ac.soton.bsharp.bSharp.PolyContext;
import ac.soton.bsharp.bSharp.PolyType;
import ac.soton.bsharp.bSharp.TypeDeclContext;
import ac.soton.bsharp.bSharp.util.Tuple2;
import ac.soton.bsharp.theory.util.TheoryImportCache;
import ac.soton.bsharp.typeInstanceRepresentation.ITypeInstance;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Poly Context</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.PolyContextImpl#getPolyTypes <em>Poly Types</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PolyContextImpl extends MinimalEObjectImpl.Container implements PolyContext {
	/**
	 * The cached value of the '{@link #getPolyTypes() <em>Poly Types</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getPolyTypes()
	 * @generated
	 * @ordered
	 */
	protected EList<PolyType> polyTypes;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PolyContextImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BSharpPackage.Literals.POLY_CONTEXT;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<PolyType> getPolyTypes() {
		if (polyTypes == null) {
			polyTypes = new EObjectContainmentEList<PolyType>(PolyType.class, this, BSharpPackage.POLY_CONTEXT__POLY_TYPES);
		}
		return polyTypes;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case BSharpPackage.POLY_CONTEXT__POLY_TYPES:
				return ((InternalEList<?>)getPolyTypes()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case BSharpPackage.POLY_CONTEXT__POLY_TYPES:
				return getPolyTypes();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case BSharpPackage.POLY_CONTEXT__POLY_TYPES:
				getPolyTypes().clear();
				getPolyTypes().addAll((Collection<? extends PolyType>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case BSharpPackage.POLY_CONTEXT__POLY_TYPES:
				getPolyTypes().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case BSharpPackage.POLY_CONTEXT__POLY_TYPES:
				return polyTypes != null && !polyTypes.isEmpty();
		}
		return super.eIsSet(featureID);
	}
	

	@Override
	public Integer eventBPolyVarCount() {
		Collection<PolyType> polyTypes = getPolyTypes();
		if (polyTypes == null) {
			return 1;
		} else {
			Integer count = polyTypes.size();
			if (count == 0)
				return 1;
			else 
				return count;
		}
	}

	protected IProgressMonitor nullMonitor = new NullProgressMonitor();
	
	@Override
	public int polyTypesCount() {
		if (polyTypes == null)
			return 0;
		
		return polyTypes.size();
	}
	
	@Override
	public ArrayList<String> namesForPolyContextTypes() {
		ArrayList<String> result = new ArrayList<String>();
		
		if (polyTypes == null || polyTypes.isEmpty())
			return result;
		
		for (PolyType polyType : polyTypes) {
			result.addAll(polyType.typeNames());
		}
		
		return result;
	}
	
	@Override
	public ArrayList<Tuple2<String, String>> namesAndTypesForPolyContext(TheoryImportCache thyCache) {
		ArrayList<Tuple2<String, String>> result = new ArrayList<Tuple2<String,String>>();
		
		/* Multiple supertypes in a polymorphic context are going to work with the following rules.
		 * 1. Each of the super types must have the same base type, with no additional variables added.
		 * 2. The base type will have the polymorphic types that it requires added as arguments to the Type/function/lambda
		 * 3. The final type will be constructed as the intersection of the previous types. 
		 */
		
		if (polyTypes == null || polyTypes.isEmpty()) {
			return result;
		}
		
		for (PolyType polytype : polyTypes) {
			result.addAll(polytype.eBNamesAndTypes(thyCache));
		}
		
		return result;
	}

	@Override
	public String compileCallWithTypeContext(TypeDeclContext ctx) throws Exception {
		if (polyTypes == null || polyTypes.isEmpty()) {
			return "()";
		}

		String result = "(";
		for (int i = 0; i < polyTypes.size(); ++i) {
			PolyType pType = polyTypes.get(i);
			
			result += pType.deconstructTypeToArguments(ctx.getTypeName().get(i));
		}
		
		result += ")";
		
		return result;
	}
	
	/* A type constructor needs the polymorphic types compiled. For instance there may be a type constructor
	 * of the form Homomorphism<S : Monoid, T : Monoid> ... The arguments for the EventB type constructor 
	 * would be Monoid_T(S1 : P(S_EvB), S : Monoid_T(S), T1 : P(T_EvB), T : Monoid(T)). Given the statement
	 * Homomophism<pNat_AddMon, pNat_TimesMon> this will compile to the correct EventB statement:
	 * 
	 * Homomorphisc(pNat, pNat |-> = |-> add |-> zero, ...)
	 */
	@Override
	public String compileEventBTypeConstructorArguments(List<ITypeInstance> instList) {
		if (polyTypes == null || polyTypes.isEmpty()) {
			return "()";
		}
		
		String result = "(";
		for (int i = 0; i < polyTypes.size(); ++i) {
			PolyType pType = polyTypes.get(i);
			
			result += pType.getTypeConstructorArgumentsFromTypeInstance(instList.get(i));
		}
		
		result += ")";
		
		return result;
	}

	@Override
	public boolean isEmpty() {
		EList<PolyType> contents = getPolyTypes();
		return contents == null || contents.isEmpty();
	}
	
} //PolyContextImpl
