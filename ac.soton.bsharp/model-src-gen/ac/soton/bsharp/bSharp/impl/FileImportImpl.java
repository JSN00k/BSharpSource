/**
 * generated by Xtext 2.14.0
 */
package ac.soton.bsharp.bSharp.impl;

import ac.soton.bsharp.bSharp.BSharpPackage;
import ac.soton.bsharp.bSharp.FileImport;
import ac.soton.bsharp.bSharp.GlobalImport;
import ac.soton.bsharp.bSharp.LocalImport;
import ac.soton.bsharp.bSharp.TopLevel;
import ac.soton.bsharp.bSharp.TopLevelFile;
import ac.soton.bsharp.bSharp.TopLevelInstance;
import ac.soton.bsharp.bSharp.util.EventBFQNImport;

import java.util.Set;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;
import org.eclipse.xtext.EcoreUtil2;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>File Import</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.FileImportImpl#getFileName <em>File Name</em>}</li>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.FileImportImpl#getFileReference <em>File Reference</em>}</li>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.FileImportImpl#getType <em>Type</em>}</li>
 *   <li>{@link ac.soton.bsharp.bSharp.impl.FileImportImpl#getTypeName <em>Type Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FileImportImpl extends MinimalEObjectImpl.Container implements FileImport {
	/**
	 * The default value of the '{@link #getFileName() <em>File Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getFileName()
	 * @generated
	 * @ordered
	 */
	protected static final String FILE_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getFileName() <em>File Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getFileName()
	 * @generated
	 * @ordered
	 */
	protected String fileName = FILE_NAME_EDEFAULT;

	/**
	 * The cached value of the '{@link #getFileReference() <em>File Reference</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getFileReference()
	 * @generated
	 * @ordered
	 */
	protected TopLevelFile fileReference;

	/**
	 * The cached value of the '{@link #getType() <em>Type</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getType()
	 * @generated
	 * @ordered
	 */
	protected TopLevelInstance type;

	/**
	 * The default value of the '{@link #getTypeName() <em>Type Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getTypeName()
	 * @generated
	 * @ordered
	 */
	protected static final String TYPE_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getTypeName() <em>Type Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getTypeName()
	 * @generated
	 * @ordered
	 */
	protected String typeName = TYPE_NAME_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileImportImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BSharpPackage.Literals.FILE_IMPORT;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getFileName() {
		return fileName;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setFileName(String newFileName) {
		String oldFileName = fileName;
		fileName = newFileName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, BSharpPackage.FILE_IMPORT__FILE_NAME, oldFileName, fileName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public TopLevelFile getFileReference() {
		if (fileReference != null && fileReference.eIsProxy()) {
			InternalEObject oldFileReference = (InternalEObject)fileReference;
			fileReference = (TopLevelFile)eResolveProxy(oldFileReference);
			if (fileReference != oldFileReference) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, BSharpPackage.FILE_IMPORT__FILE_REFERENCE, oldFileReference, fileReference));
			}
		}
		return fileReference;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TopLevelFile basicGetFileReference() {
		return fileReference;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setFileReference(TopLevelFile newFileReference) {
		TopLevelFile oldFileReference = fileReference;
		fileReference = newFileReference;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, BSharpPackage.FILE_IMPORT__FILE_REFERENCE, oldFileReference, fileReference));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public TopLevelInstance getType() {
		if (type != null && type.eIsProxy()) {
			InternalEObject oldType = (InternalEObject)type;
			type = (TopLevelInstance)eResolveProxy(oldType);
			if (type != oldType) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, BSharpPackage.FILE_IMPORT__TYPE, oldType, type));
			}
		}
		return type;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TopLevelInstance basicGetType() {
		return type;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setType(TopLevelInstance newType) {
		TopLevelInstance oldType = type;
		type = newType;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, BSharpPackage.FILE_IMPORT__TYPE, oldType, type));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getTypeName() {
		return typeName;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setTypeName(String newTypeName) {
		String oldTypeName = typeName;
		typeName = newTypeName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, BSharpPackage.FILE_IMPORT__TYPE_NAME, oldTypeName, typeName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case BSharpPackage.FILE_IMPORT__FILE_NAME:
				return getFileName();
			case BSharpPackage.FILE_IMPORT__FILE_REFERENCE:
				if (resolve) return getFileReference();
				return basicGetFileReference();
			case BSharpPackage.FILE_IMPORT__TYPE:
				if (resolve) return getType();
				return basicGetType();
			case BSharpPackage.FILE_IMPORT__TYPE_NAME:
				return getTypeName();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case BSharpPackage.FILE_IMPORT__FILE_NAME:
				setFileName((String)newValue);
				return;
			case BSharpPackage.FILE_IMPORT__FILE_REFERENCE:
				setFileReference((TopLevelFile)newValue);
				return;
			case BSharpPackage.FILE_IMPORT__TYPE:
				setType((TopLevelInstance)newValue);
				return;
			case BSharpPackage.FILE_IMPORT__TYPE_NAME:
				setTypeName((String)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case BSharpPackage.FILE_IMPORT__FILE_NAME:
				setFileName(FILE_NAME_EDEFAULT);
				return;
			case BSharpPackage.FILE_IMPORT__FILE_REFERENCE:
				setFileReference((TopLevelFile)null);
				return;
			case BSharpPackage.FILE_IMPORT__TYPE:
				setType((TopLevelInstance)null);
				return;
			case BSharpPackage.FILE_IMPORT__TYPE_NAME:
				setTypeName(TYPE_NAME_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case BSharpPackage.FILE_IMPORT__FILE_NAME:
				return FILE_NAME_EDEFAULT == null ? fileName != null : !FILE_NAME_EDEFAULT.equals(fileName);
			case BSharpPackage.FILE_IMPORT__FILE_REFERENCE:
				return fileReference != null;
			case BSharpPackage.FILE_IMPORT__TYPE:
				return type != null;
			case BSharpPackage.FILE_IMPORT__TYPE_NAME:
				return TYPE_NAME_EDEFAULT == null ? typeName != null : !TYPE_NAME_EDEFAULT.equals(typeName);
		}
		return super.eIsSet(featureID);
	}
	
	@Override
	public String getPackageName() {
		EObject container = eContainer();
		if (container instanceof LocalImport) {
			return EcoreUtil2.getContainerOfType(this, TopLevel.class).getName();
		} else {
			return ((GlobalImport)container).getProject();
		}
	}

	@Override
	public Object packageFileName() {
		return getPackageName() + "." + fileName;
	}
	
	@Override public 
	EventBFQNImport eventBFqn() {
		
		if (type == null) {
			return new EventBFQNImport(getPackageName(), getFileName());
		}
		
		TopLevelInstance type = getType();
		
		if (type == null) {
			return new EventBFQNImport(getPackageName(), getFileName());
		} else {
			return new EventBFQNImport(getPackageName(), getFileName(), type.eventBImportIndex());
		}
	}
	
	@Override
	public void addImportFqnsRecursive(Set<EventBFQNImport> alreadyImported, Set<EventBFQNImport> newImports) {
		EventBFQNImport myFqn = eventBFqn();
		
		if (alreadyImported.contains(myFqn)) {
			return;
		}
		
		alreadyImported.add(myFqn);
		if (newImports != null)
			newImports.add(myFqn);
		
		getFileReference().appendFileImportsUpToAlreadyImported(getType(), alreadyImported, newImports);
	}

	@Override
	public void addImportFqnsToAlreadyImportedRecursive(Set<EventBFQNImport> alreadyImported,
			Set<EventBFQNImport> newImports) {
		EventBFQNImport myFqn = eventBFqn();
		if (newImports.contains(myFqn)) {
			newImports.remove(myFqn);
			return;
		}
		
		if (alreadyImported.contains(myFqn))
			return;
		
		alreadyImported.add(myFqn);
		getFileReference().appendFileImportsUpToAlreadyImported(getType(), alreadyImported, newImports);
	}
	
	@Override 
	public String toString() {
		if (type == null) {
			return getPackageName() + "." + getFileName();
		} else {
			return getPackageName() + "." + getFileName() + "." + getTypeName();
		}
	}

} //FileImportImpl
