/*
 * generated by Xtext 2.12.0
 */
package ac.soton.bsharp.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider
import org.eclipse.emf.common.util.EList
import java.util.List
import org.eclipse.xtext.scoping.impl.ImportNormalizer
import com.google.common.collect.Lists
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.naming.IQualifiedNameProvider
import javax.inject.Inject
import ac.soton.bsharp.bSharp.TopLevel

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class BSharpImportedNamespaceAwareLocalScopeProvider extends ImportedNamespaceAwareLocalScopeProvider {
	@Inject extension IQualifiedNameProvider
	
	override internalGetImportedNamespaceResolvers(EObject context, boolean ignoreCase) {
		/* I need to override this method because getImportedNamespace returns a single object 
		 * and I need to return a list.
		 */
		var List<ImportNormalizer> importedNamespaceResolvers = Lists.newArrayList()
		var eContents = context.eContents

		for (child : eContents) {
			val feature = child.eClass().getEStructuralFeature("imports")
			if (feature !== null && String.equals(feature.getEType().getInstanceClass())) {
				val list = child.eGet(feature) as EList<String>
				for (importString : list) {
					val resolver = createImportedNamespaceResolver(importString, ignoreCase)
					if (resolver !== null) {
						importedNamespaceResolvers.add(resolver)
					}
				}
			}
		}
		
		/* Add the package to the fully qualified domain names */
		if (context instanceof TopLevel) {
			val fqn = context.fullyQualifiedName
			//fqn is the package of this file
			if (fqn !== null) {
				importedNamespaceResolvers += new ImportNormalizer(fqn, true, ignoreCase)
			}
		}

		return importedNamespaceResolvers
	}
	
	override getImplicitImports(boolean ignoreCase) {
		newArrayList(new ImportNormalizer(QualifiedName.create("ac", "soton", "bsharp", "main"), true, ignoreCase))
	}
}
