grammar ac.soton.bsharp.BSharp with org.eclipse.xtext.common.Terminals

import "http://www.soton.ac/bsharp/BSharp" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

TopLevel:
	'package' name=QualifiedName
	topLevelFile=TopLevelFile
;
	
@Override 
	terminal ID: ('a'..'z'|'A'..'Z'|'_'| 'i'..'ￜ') ('a'..'z'|'A'..'Z'|'_'| 'i'..'ￜ'|'0'..'9')*;
	
// Theorem names can include white space. Work out how to change this to any string without a ':'
THM_NAME: (INT | ID | WS)* ":";

/* TopLevelFile has a hidden name tag which is the file name, this gets the filename into the
 * fully qualified domain names allowing multiple classes per file nicely. TopLevelImport allows
 * the easy splitting of the file based on import locations. It also makes it easy to scope imports
 * so only imports above the current location are scoped.
 */
TopLevelFile:
	{TopLevelFile}
	(noImportElements=BodyElements)? topLevelImports+=TopLevelImport*
;

ClassDecl returns ClassDecl:
	Class | Datatype
;

/* There are three Types which can be used as type variables, inbuilt types, types create
 * with ClassDecl (type classes and Datatypes) and Polymorphic types. There are different
 * occasions where each of these can be used.
 */

Type:
	ClassDecl
;

GenName: PolyType | Type | InstName;

/* -------------------------- Import Statements -------------------- */
/* I had hoped to use a python style import, however this seems to be fighting 
 * the system, and would require a custom implementation of DefaultDeclarativeQualifiedNameProvider.
 * To increase the development speed I am using the java style imports instead.
 */

QualifiedName:
   ID ('.' ID)*
 ;

QualifiedNameWithWildcard:
    QualifiedName '.*'?
;

TopLevelImport:
	(globalImports+=GlobalImport | localImports += LocalImport)+ bodyElements=BodyElements
;

BodyElements:
	(classes+=ClassDecl | extends+=Extend)+
;

GlobalImport:
	'From' project=QualifiedName 'Import' fileImports+=FileImport+
;

/* Imports other files from the current project. The optional type ID allows the importing
 * of a specific type from the file. */
FileImport:
 	fileReference=[TopLevelFile] ('.' ('*' | type=ID))?
;

LocalImport:
	'Import' fileImports+=FileImport+
;

/* ------------------------ Class statements --------------------- */


Class returns BSClass:
	'Class' name=ID (context=PolyContext)? ('[' instName=InstName ']') (supertypes=SuperTypeList)? ('(' varList=TypedVariableList ')')? (where=Where)? (';')? 
	block=BSharpBlock
;

InstName:
	name=ID
;

/*---------------- Polymorphic Context of -------------------------- */

PolyContext:
	'<' (polyTypes+=PolyType)+ '>'
;

PolyType:
	name=ID (':' superTypes+=[ClassDecl|QualifiedName] (',' superTypes+=[ClassDecl|QualifiedName])*)?
;

/* ------------------- SuperTypes ---------------------------------- */

/* Any constriction on the polymorphic context has to be done by declaring the polymorphic context
 * on the new type. If necessary the polymorphic context can be used within type constructors. In the simple case 
 * this will be inferred . Required thought on checking the base types of the super types. At some points these
 * need to be identical declarations. It is also necessary to allow EventB style type constructors at this
 * point. e.g., an associative operator is a subtype of a closed Event-B total function.
 */
SuperTypeList:
	':' superTypes+=ConstructedType (',' superTypes+=ConstructedType)*
;

TypeBuilder:
	ConstructedType | TypeConstructor | TypePowerSet | TypeConstrBracket
;

BuiltinTypeInfixOp:
	'×' | '→' | '' | '' | '↔' | '⤖' | '⇸' | '↣' | '⤀' | '↠'
;

/* Along with the normal Event-B type operator, and new B++ types the  */
ConstructedType returns TypeBuilder:
	BuilderElem ({ConstructedType.left=current} constructor=BuiltinTypeInfixOp right=BuilderElem)*
;

BuilderElem returns TypeBuilder:
	TypeConstructor | TypeConstrBracket | TypePowerSet
;

/* Type constructor has validation rules to check that there is no context when there is a polymorphic name, 
 * and type checking on the polymorphic context. There is also  scope rule to check the usage of polymorphic types.
 * Probably need to add the predicate type to this.
 */
TypeConstructor:
	typeName=[GenName|QualifiedName] (context=TypeDeclContext)?
;

TypePowerSet:
	'ℙ' '(' child=ConstructedType ')'
;

TypeConstrBracket:
	'(' child=ConstructedType ')'
;

/* This is used in two different situations, and may well compile the same for both so don't delete
 * unless the compilation of the two places is different (even then it is more pleasant to not have
 * two identical syntax declarations in this file).
 */
TypeDeclContext:
	'<' typeName+=ConstructedType (',' typeName+=ConstructedType)* '>'
;

/* -------------------- Where Statement -------------------------------- */

/* Type checking (which is not implemented yet) is used to type check that Expression returns a 
 * predicate. Expression has not yet been written, but is far too general to be included in the where
 * statement.
 */
Where:
	'where' expressions+=RootExpression (';' expressions+=RootExpression)*
;

/* ---------------------- Datatype declarations -------------------------- */

Datatype:
	'Datatype' name=ID (context=PolyContext)? ('|' constructors+=DatatypeConstructor)+ block=BSharpBlock
;

/* PolyContext is the same as PolyContext used by the class declaration above. */

DatatypeConstructor:
	 name=ID ('(' decons=TypedVariableList ')')?
;

/* ------------------------ Extension statement ---------------------------- */

Extend: 
	'Extend' extendedClass=[ClassDecl|QualifiedName] '(' name=ID ')' block=BSharpBlock
;

/* ------------------------ TypeBodyElements ------------------------------- */

/* The ordering of theorem bodies and instances is imported so they need to go into
 * a joint list to maintain the order.
 */
BSharpBlock:
	{BSharpBlock}
	'{' ((functions+=FunctionDecl) | (theorems+=TheoremBody) | theorems+=Instance)* '}'
;

/*------------------------- Functions --------------------------------- */

FunctionDecl:
	name=ID (context=PolyContext)? '(' (varList=TypedVariableList)? ')' ':' returnType=TypeConstructor (infix='INFIX')? precedence=INT? expr=RootExpression
;

MatchStatement:
	'match' match=RootExpression '{'
	inductCase+=MatchCase (inductCase+=MatchCase)* '}'
;

MatchCase:
	'|' deconName=[DatatypeConstructor] ('(' variables+=TypedVariable (',' variables+=TypedVariable)* ')')? ':' expr=RootExpression
;

/* ----------------------------- Theorems -------------------------*/

TheoremBody:
	'Theorems' '{' (theoremDecl+=TheoremDecl)+ '}'
;

/* Type check that the expression is a predicate expression. From a lexing point
 * of view the semicolon is necessary because the THM_NAME rule is not good enough.
 */
TheoremDecl:
	name=THM_NAME expr=RootExpression ';'
;

TypedVariableList:
	 variablesOfType+=VariableTyping (',' variablesOfType+=VariableTyping)*
;

VariableTyping:
	((typeVar+=TypedVariable) (',' typeVar+=TypedVariable)* ':' type=ConstructedType)
;

/* I think this is here for reference purposes, e.g., otherwise it's quite difficult
 * to cross reference individual type names. */
TypedVariable:
	name=ID
;

/* --------------------------- Expressions -------------------------- */

/* --------------------------- Lambda and Quantifier ---------------- */

/* The structure of Lambda and Quantifier are so similar that they're going to share a class */

Lambda returns QuantLambda:
	qType='λ' (context=PolyContext)? varList=TypedVariableList '|' expr=RootExpression
;

Quantifier returns QuantLambda:
	qType=('∀' | '∃') (context=PolyContext)? varList=TypedVariableList '·' expr=RootExpression
;

RootExpression returns Expression:
	Lambda | Quantifier | Infix | MatchStatement
;

/* ---------------------- *Fix ------------------------------ */

Prefix returns Prefix:
	name=PrefixBuiltIn  elem=Element
;

PrefixBuiltIn:
  '¬'
;

/* Infix operators cause problems, there are two issues one is avoiding left recursion this 
 * is covered adequately here: https://www.eclipse.org/Xtext/documentation/307_special_languages.html#expressions 
 * The second issue is precedence, this is also covered in the link above, however, implementing it in the 
 * way suggested above will not scale to the creation of ones own infix functions, instead the initial implementation
 * will require brackets for precedence. After that a system will be implemented where each infix operator will 
 * be given a precedence value with higher values being higher precedence. It looks like this can be done by
 * changing the parser using the MyDSLRuntimeModule to build the abstract syntax tree based on the value of the 
 * operators.
 * Before the precedence code is written into a parser override, all the expressions are in effect right bracketed,
 * as you may expect from a language that is read from left to right.
 * 
 * TODO: Programmatically check that the function is an infix function.
 */
Infix returns Expression:
	Element ({Infix.left=current} (funcName=[FunctionDecl] | opName=InbuiltInfix) right=Element)*
;

/* currently it will not build because the quantifier is causing recursion I think. 
 * I think that we need a quantifier free expression to solve the problem Similar to the way
 * precedence is handled here: https://typefox.io/parsing-expressions-with-xtext
 */
Element returns Expression:
	Bracket | Prefix | FunctionCall
;

Bracket returns Bracket:
	'(' child=RootExpression ')'
;


/* This produces an interesting issue in parsing the program because it is necessary to distinguish between the following three
 * scenarios: 
 * A function call f(arguments)
 * A infix function with a bracketed argument on the right 10 f (arguments)
 * A function used without any arguments f add g 
 * 
 * To solve this functions can either be Prefix, Infix, or called with bracketed arguments. You cannot call a Infix function with bracketd 
 * arguments. To do this you would need to write another function to make this call for you. In coq this is achieved when you declare a function
 * you can add a operator name to the function, which is either infix or prefix, this again gives the two names for the function allowing 
 * it to be called either as an operator or a functional call.
 * 
 * This expressions needs a lot of programmatic checking! Starting with the count of the arguments, followed by type checking the arguments.
 */
FunctionCall returns FunctionCall:
	wrapped=WrappedInfix | (typeInst=[ExpressionVariable] | classVarDecl=ClassVarDecl) (context=TypeDeclContext? '(' (arguments+=RootExpression)? (',' arguments+=RootExpression)* ')')?
;

/* This is used to get variables from a class I think that it may be only applicable for
 * concrete and polynomial types, but I'm not entirely sure. */
ClassVarDecl:
	(ownerType=[GenName] '.' typeInst=[ExpressionVariable])
;

ExpressionVariable:
	 FunctionDecl | TypedVariable | InstName | DatatypeConstructor
;

/* Currently all of the Inbuilt infix operators declared here are predicate operators, the code 
 * therefore assumes this is the case. If a new inbuilt operator is included that isn't a predicate
 * operator the code in InfixImpl needs to be changed to check for this. */
InbuiltInfix:
	'⇔' | '⇒' | '=' | '≠' | '∧' | '∨'
;

/* Todo scope/validate this. */
WrappedInfix:
	'[' (inbuilt=InbuiltInfix | funcName=[ExpressionVariable]) ']'
;

/* ------------------------------ Instance ---------------------------------------------*/

Instance:
	'Instance' className=[BSClass|QualifiedName] context=TypeDeclContext '(' (arguments+=RootExpression)? (',' arguments+=RootExpression)* ')' (name=ID)?
;
