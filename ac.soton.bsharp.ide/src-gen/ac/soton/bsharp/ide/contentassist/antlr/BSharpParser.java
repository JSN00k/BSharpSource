/*
 * generated by Xtext 2.14.0
 */
package ac.soton.bsharp.ide.contentassist.antlr;

import ac.soton.bsharp.ide.contentassist.antlr.internal.InternalBSharpParser;
import ac.soton.bsharp.services.BSharpGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class BSharpParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BSharpGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BSharpGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTHM_NAMEAccess().getAlternatives_0(), "rule__THM_NAME__Alternatives_0");
			builder.put(grammarAccess.getClassDeclAccess().getAlternatives(), "rule__ClassDecl__Alternatives");
			builder.put(grammarAccess.getGenNameAccess().getAlternatives(), "rule__GenName__Alternatives");
			builder.put(grammarAccess.getTopLevelImportAccess().getAlternatives_0(), "rule__TopLevelImport__Alternatives_0");
			builder.put(grammarAccess.getBodyElementsAccess().getAlternatives(), "rule__BodyElements__Alternatives");
			builder.put(grammarAccess.getFileImportAccess().getAlternatives_1_1(), "rule__FileImport__Alternatives_1_1");
			builder.put(grammarAccess.getTypeBuilderAccess().getAlternatives(), "rule__TypeBuilder__Alternatives");
			builder.put(grammarAccess.getBuiltinTypeInfixOpAccess().getAlternatives(), "rule__BuiltinTypeInfixOp__Alternatives");
			builder.put(grammarAccess.getBuilderElemAccess().getAlternatives(), "rule__BuilderElem__Alternatives");
			builder.put(grammarAccess.getBSharpBlockAccess().getAlternatives_2(), "rule__BSharpBlock__Alternatives_2");
			builder.put(grammarAccess.getQuantifierAccess().getQTypeAlternatives_0_0(), "rule__Quantifier__QTypeAlternatives_0_0");
			builder.put(grammarAccess.getRootExpressionAccess().getAlternatives(), "rule__RootExpression__Alternatives");
			builder.put(grammarAccess.getInfixAccess().getAlternatives_1_1(), "rule__Infix__Alternatives_1_1");
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getFunctionCallAccess().getAlternatives(), "rule__FunctionCall__Alternatives");
			builder.put(grammarAccess.getFunctionCallAccess().getAlternatives_1_0(), "rule__FunctionCall__Alternatives_1_0");
			builder.put(grammarAccess.getExpressionVariableAccess().getAlternatives(), "rule__ExpressionVariable__Alternatives");
			builder.put(grammarAccess.getInbuiltInfixAccess().getAlternatives(), "rule__InbuiltInfix__Alternatives");
			builder.put(grammarAccess.getWrappedInfixAccess().getAlternatives_1(), "rule__WrappedInfix__Alternatives_1");
			builder.put(grammarAccess.getTopLevelAccess().getGroup(), "rule__TopLevel__Group__0");
			builder.put(grammarAccess.getTHM_NAMEAccess().getGroup(), "rule__THM_NAME__Group__0");
			builder.put(grammarAccess.getTopLevelFileAccess().getGroup(), "rule__TopLevelFile__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
			builder.put(grammarAccess.getTopLevelImportAccess().getGroup(), "rule__TopLevelImport__Group__0");
			builder.put(grammarAccess.getGlobalImportAccess().getGroup(), "rule__GlobalImport__Group__0");
			builder.put(grammarAccess.getFileImportAccess().getGroup(), "rule__FileImport__Group__0");
			builder.put(grammarAccess.getFileImportAccess().getGroup_1(), "rule__FileImport__Group_1__0");
			builder.put(grammarAccess.getLocalImportAccess().getGroup(), "rule__LocalImport__Group__0");
			builder.put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
			builder.put(grammarAccess.getClassAccess().getGroup_3(), "rule__Class__Group_3__0");
			builder.put(grammarAccess.getClassAccess().getGroup_5(), "rule__Class__Group_5__0");
			builder.put(grammarAccess.getPolyContextAccess().getGroup(), "rule__PolyContext__Group__0");
			builder.put(grammarAccess.getPolyTypeAccess().getGroup(), "rule__PolyType__Group__0");
			builder.put(grammarAccess.getPolyTypeAccess().getGroup_1(), "rule__PolyType__Group_1__0");
			builder.put(grammarAccess.getPolyTypeAccess().getGroup_1_2(), "rule__PolyType__Group_1_2__0");
			builder.put(grammarAccess.getSuperTypeListAccess().getGroup(), "rule__SuperTypeList__Group__0");
			builder.put(grammarAccess.getSuperTypeListAccess().getGroup_2(), "rule__SuperTypeList__Group_2__0");
			builder.put(grammarAccess.getConstructedTypeAccess().getGroup(), "rule__ConstructedType__Group__0");
			builder.put(grammarAccess.getConstructedTypeAccess().getGroup_1(), "rule__ConstructedType__Group_1__0");
			builder.put(grammarAccess.getTypeConstructorAccess().getGroup(), "rule__TypeConstructor__Group__0");
			builder.put(grammarAccess.getTypePowerSetAccess().getGroup(), "rule__TypePowerSet__Group__0");
			builder.put(grammarAccess.getTypeConstrBracketAccess().getGroup(), "rule__TypeConstrBracket__Group__0");
			builder.put(grammarAccess.getTypeDeclContextAccess().getGroup(), "rule__TypeDeclContext__Group__0");
			builder.put(grammarAccess.getTypeDeclContextAccess().getGroup_2(), "rule__TypeDeclContext__Group_2__0");
			builder.put(grammarAccess.getWhereAccess().getGroup(), "rule__Where__Group__0");
			builder.put(grammarAccess.getWhereAccess().getGroup_2(), "rule__Where__Group_2__0");
			builder.put(grammarAccess.getDatatypeAccess().getGroup(), "rule__Datatype__Group__0");
			builder.put(grammarAccess.getDatatypeAccess().getGroup_3(), "rule__Datatype__Group_3__0");
			builder.put(grammarAccess.getDatatypeConstructorAccess().getGroup(), "rule__DatatypeConstructor__Group__0");
			builder.put(grammarAccess.getDatatypeConstructorAccess().getGroup_1(), "rule__DatatypeConstructor__Group_1__0");
			builder.put(grammarAccess.getExtendAccess().getGroup(), "rule__Extend__Group__0");
			builder.put(grammarAccess.getBSharpBlockAccess().getGroup(), "rule__BSharpBlock__Group__0");
			builder.put(grammarAccess.getFunctionDeclAccess().getGroup(), "rule__FunctionDecl__Group__0");
			builder.put(grammarAccess.getMatchStatementAccess().getGroup(), "rule__MatchStatement__Group__0");
			builder.put(grammarAccess.getMatchCaseAccess().getGroup(), "rule__MatchCase__Group__0");
			builder.put(grammarAccess.getMatchCaseAccess().getGroup_2(), "rule__MatchCase__Group_2__0");
			builder.put(grammarAccess.getMatchCaseAccess().getGroup_2_2(), "rule__MatchCase__Group_2_2__0");
			builder.put(grammarAccess.getTheoremBodyAccess().getGroup(), "rule__TheoremBody__Group__0");
			builder.put(grammarAccess.getTheoremDeclAccess().getGroup(), "rule__TheoremDecl__Group__0");
			builder.put(grammarAccess.getTypedVariableListAccess().getGroup(), "rule__TypedVariableList__Group__0");
			builder.put(grammarAccess.getTypedVariableListAccess().getGroup_1(), "rule__TypedVariableList__Group_1__0");
			builder.put(grammarAccess.getVariableTypingAccess().getGroup(), "rule__VariableTyping__Group__0");
			builder.put(grammarAccess.getVariableTypingAccess().getGroup_1(), "rule__VariableTyping__Group_1__0");
			builder.put(grammarAccess.getLambdaAccess().getGroup(), "rule__Lambda__Group__0");
			builder.put(grammarAccess.getQuantifierAccess().getGroup(), "rule__Quantifier__Group__0");
			builder.put(grammarAccess.getPrefixAccess().getGroup(), "rule__Prefix__Group__0");
			builder.put(grammarAccess.getInfixAccess().getGroup(), "rule__Infix__Group__0");
			builder.put(grammarAccess.getInfixAccess().getGroup_1(), "rule__Infix__Group_1__0");
			builder.put(grammarAccess.getBracketAccess().getGroup(), "rule__Bracket__Group__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_1(), "rule__FunctionCall__Group_1__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_1_1(), "rule__FunctionCall__Group_1_1__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_1_1_3(), "rule__FunctionCall__Group_1_1_3__0");
			builder.put(grammarAccess.getClassVarDeclAccess().getGroup(), "rule__ClassVarDecl__Group__0");
			builder.put(grammarAccess.getWrappedInfixAccess().getGroup(), "rule__WrappedInfix__Group__0");
			builder.put(grammarAccess.getInstanceAccess().getGroup(), "rule__Instance__Group__0");
			builder.put(grammarAccess.getInstanceAccess().getGroup_7(), "rule__Instance__Group_7__0");
			builder.put(grammarAccess.getTopLevelAccess().getNameAssignment_1(), "rule__TopLevel__NameAssignment_1");
			builder.put(grammarAccess.getTopLevelAccess().getTopLevelFileAssignment_2(), "rule__TopLevel__TopLevelFileAssignment_2");
			builder.put(grammarAccess.getTopLevelFileAccess().getNoImportElementsAssignment_1(), "rule__TopLevelFile__NoImportElementsAssignment_1");
			builder.put(grammarAccess.getTopLevelFileAccess().getTopLevelImportsAssignment_2(), "rule__TopLevelFile__TopLevelImportsAssignment_2");
			builder.put(grammarAccess.getTopLevelImportAccess().getGlobalImportsAssignment_0_0(), "rule__TopLevelImport__GlobalImportsAssignment_0_0");
			builder.put(grammarAccess.getTopLevelImportAccess().getLocalImportsAssignment_0_1(), "rule__TopLevelImport__LocalImportsAssignment_0_1");
			builder.put(grammarAccess.getTopLevelImportAccess().getBodyElementsAssignment_1(), "rule__TopLevelImport__BodyElementsAssignment_1");
			builder.put(grammarAccess.getBodyElementsAccess().getClassesAssignment_0(), "rule__BodyElements__ClassesAssignment_0");
			builder.put(grammarAccess.getBodyElementsAccess().getExtendsAssignment_1(), "rule__BodyElements__ExtendsAssignment_1");
			builder.put(grammarAccess.getGlobalImportAccess().getProjectAssignment_1(), "rule__GlobalImport__ProjectAssignment_1");
			builder.put(grammarAccess.getGlobalImportAccess().getFileImportsAssignment_3(), "rule__GlobalImport__FileImportsAssignment_3");
			builder.put(grammarAccess.getFileImportAccess().getFileReferenceAssignment_0(), "rule__FileImport__FileReferenceAssignment_0");
			builder.put(grammarAccess.getFileImportAccess().getTypeAssignment_1_1_1(), "rule__FileImport__TypeAssignment_1_1_1");
			builder.put(grammarAccess.getLocalImportAccess().getFileImportsAssignment_1(), "rule__LocalImport__FileImportsAssignment_1");
			builder.put(grammarAccess.getClassAccess().getNameAssignment_1(), "rule__Class__NameAssignment_1");
			builder.put(grammarAccess.getClassAccess().getContextAssignment_2(), "rule__Class__ContextAssignment_2");
			builder.put(grammarAccess.getClassAccess().getInstNameAssignment_3_1(), "rule__Class__InstNameAssignment_3_1");
			builder.put(grammarAccess.getClassAccess().getSupertypesAssignment_4(), "rule__Class__SupertypesAssignment_4");
			builder.put(grammarAccess.getClassAccess().getVarListAssignment_5_1(), "rule__Class__VarListAssignment_5_1");
			builder.put(grammarAccess.getClassAccess().getWhereAssignment_6(), "rule__Class__WhereAssignment_6");
			builder.put(grammarAccess.getClassAccess().getBlockAssignment_8(), "rule__Class__BlockAssignment_8");
			builder.put(grammarAccess.getInstNameAccess().getNameAssignment(), "rule__InstName__NameAssignment");
			builder.put(grammarAccess.getPolyContextAccess().getPolyTypesAssignment_1(), "rule__PolyContext__PolyTypesAssignment_1");
			builder.put(grammarAccess.getPolyTypeAccess().getNameAssignment_0(), "rule__PolyType__NameAssignment_0");
			builder.put(grammarAccess.getPolyTypeAccess().getSuperTypesAssignment_1_1(), "rule__PolyType__SuperTypesAssignment_1_1");
			builder.put(grammarAccess.getPolyTypeAccess().getSuperTypesAssignment_1_2_1(), "rule__PolyType__SuperTypesAssignment_1_2_1");
			builder.put(grammarAccess.getSuperTypeListAccess().getSuperTypesAssignment_1(), "rule__SuperTypeList__SuperTypesAssignment_1");
			builder.put(grammarAccess.getSuperTypeListAccess().getSuperTypesAssignment_2_1(), "rule__SuperTypeList__SuperTypesAssignment_2_1");
			builder.put(grammarAccess.getConstructedTypeAccess().getConstructorAssignment_1_1(), "rule__ConstructedType__ConstructorAssignment_1_1");
			builder.put(grammarAccess.getConstructedTypeAccess().getRightAssignment_1_2(), "rule__ConstructedType__RightAssignment_1_2");
			builder.put(grammarAccess.getTypeConstructorAccess().getTypeNameAssignment_0(), "rule__TypeConstructor__TypeNameAssignment_0");
			builder.put(grammarAccess.getTypeConstructorAccess().getContextAssignment_1(), "rule__TypeConstructor__ContextAssignment_1");
			builder.put(grammarAccess.getTypePowerSetAccess().getChildAssignment_2(), "rule__TypePowerSet__ChildAssignment_2");
			builder.put(grammarAccess.getTypeConstrBracketAccess().getChildAssignment_1(), "rule__TypeConstrBracket__ChildAssignment_1");
			builder.put(grammarAccess.getTypeDeclContextAccess().getTypeNameAssignment_1(), "rule__TypeDeclContext__TypeNameAssignment_1");
			builder.put(grammarAccess.getTypeDeclContextAccess().getTypeNameAssignment_2_1(), "rule__TypeDeclContext__TypeNameAssignment_2_1");
			builder.put(grammarAccess.getWhereAccess().getExpressionsAssignment_1(), "rule__Where__ExpressionsAssignment_1");
			builder.put(grammarAccess.getWhereAccess().getExpressionsAssignment_2_1(), "rule__Where__ExpressionsAssignment_2_1");
			builder.put(grammarAccess.getDatatypeAccess().getNameAssignment_1(), "rule__Datatype__NameAssignment_1");
			builder.put(grammarAccess.getDatatypeAccess().getContextAssignment_2(), "rule__Datatype__ContextAssignment_2");
			builder.put(grammarAccess.getDatatypeAccess().getConstructorsAssignment_3_1(), "rule__Datatype__ConstructorsAssignment_3_1");
			builder.put(grammarAccess.getDatatypeAccess().getBlockAssignment_4(), "rule__Datatype__BlockAssignment_4");
			builder.put(grammarAccess.getDatatypeConstructorAccess().getNameAssignment_0(), "rule__DatatypeConstructor__NameAssignment_0");
			builder.put(grammarAccess.getDatatypeConstructorAccess().getDeconsAssignment_1_1(), "rule__DatatypeConstructor__DeconsAssignment_1_1");
			builder.put(grammarAccess.getExtendAccess().getExtendedClassAssignment_1(), "rule__Extend__ExtendedClassAssignment_1");
			builder.put(grammarAccess.getExtendAccess().getNameAssignment_3(), "rule__Extend__NameAssignment_3");
			builder.put(grammarAccess.getExtendAccess().getBlockAssignment_5(), "rule__Extend__BlockAssignment_5");
			builder.put(grammarAccess.getBSharpBlockAccess().getFunctionsAssignment_2_0(), "rule__BSharpBlock__FunctionsAssignment_2_0");
			builder.put(grammarAccess.getBSharpBlockAccess().getTheoremsAssignment_2_1(), "rule__BSharpBlock__TheoremsAssignment_2_1");
			builder.put(grammarAccess.getBSharpBlockAccess().getTheoremsAssignment_2_2(), "rule__BSharpBlock__TheoremsAssignment_2_2");
			builder.put(grammarAccess.getFunctionDeclAccess().getNameAssignment_0(), "rule__FunctionDecl__NameAssignment_0");
			builder.put(grammarAccess.getFunctionDeclAccess().getContextAssignment_1(), "rule__FunctionDecl__ContextAssignment_1");
			builder.put(grammarAccess.getFunctionDeclAccess().getVarListAssignment_3(), "rule__FunctionDecl__VarListAssignment_3");
			builder.put(grammarAccess.getFunctionDeclAccess().getReturnTypeAssignment_6(), "rule__FunctionDecl__ReturnTypeAssignment_6");
			builder.put(grammarAccess.getFunctionDeclAccess().getInfixAssignment_7(), "rule__FunctionDecl__InfixAssignment_7");
			builder.put(grammarAccess.getFunctionDeclAccess().getPrecedenceAssignment_8(), "rule__FunctionDecl__PrecedenceAssignment_8");
			builder.put(grammarAccess.getFunctionDeclAccess().getExprAssignment_9(), "rule__FunctionDecl__ExprAssignment_9");
			builder.put(grammarAccess.getMatchStatementAccess().getMatchAssignment_1(), "rule__MatchStatement__MatchAssignment_1");
			builder.put(grammarAccess.getMatchStatementAccess().getInductCaseAssignment_3(), "rule__MatchStatement__InductCaseAssignment_3");
			builder.put(grammarAccess.getMatchStatementAccess().getInductCaseAssignment_4(), "rule__MatchStatement__InductCaseAssignment_4");
			builder.put(grammarAccess.getMatchCaseAccess().getDeconNameAssignment_1(), "rule__MatchCase__DeconNameAssignment_1");
			builder.put(grammarAccess.getMatchCaseAccess().getVariablesAssignment_2_1(), "rule__MatchCase__VariablesAssignment_2_1");
			builder.put(grammarAccess.getMatchCaseAccess().getVariablesAssignment_2_2_1(), "rule__MatchCase__VariablesAssignment_2_2_1");
			builder.put(grammarAccess.getMatchCaseAccess().getExprAssignment_4(), "rule__MatchCase__ExprAssignment_4");
			builder.put(grammarAccess.getTheoremBodyAccess().getTheoremDeclAssignment_2(), "rule__TheoremBody__TheoremDeclAssignment_2");
			builder.put(grammarAccess.getTheoremDeclAccess().getNameAssignment_0(), "rule__TheoremDecl__NameAssignment_0");
			builder.put(grammarAccess.getTheoremDeclAccess().getExprAssignment_1(), "rule__TheoremDecl__ExprAssignment_1");
			builder.put(grammarAccess.getTypedVariableListAccess().getVariablesOfTypeAssignment_0(), "rule__TypedVariableList__VariablesOfTypeAssignment_0");
			builder.put(grammarAccess.getTypedVariableListAccess().getVariablesOfTypeAssignment_1_1(), "rule__TypedVariableList__VariablesOfTypeAssignment_1_1");
			builder.put(grammarAccess.getVariableTypingAccess().getTypeVarAssignment_0(), "rule__VariableTyping__TypeVarAssignment_0");
			builder.put(grammarAccess.getVariableTypingAccess().getTypeVarAssignment_1_1(), "rule__VariableTyping__TypeVarAssignment_1_1");
			builder.put(grammarAccess.getVariableTypingAccess().getTypeAssignment_3(), "rule__VariableTyping__TypeAssignment_3");
			builder.put(grammarAccess.getTypedVariableAccess().getNameAssignment(), "rule__TypedVariable__NameAssignment");
			builder.put(grammarAccess.getLambdaAccess().getQTypeAssignment_0(), "rule__Lambda__QTypeAssignment_0");
			builder.put(grammarAccess.getLambdaAccess().getContextAssignment_1(), "rule__Lambda__ContextAssignment_1");
			builder.put(grammarAccess.getLambdaAccess().getVarListAssignment_2(), "rule__Lambda__VarListAssignment_2");
			builder.put(grammarAccess.getLambdaAccess().getExprAssignment_4(), "rule__Lambda__ExprAssignment_4");
			builder.put(grammarAccess.getQuantifierAccess().getQTypeAssignment_0(), "rule__Quantifier__QTypeAssignment_0");
			builder.put(grammarAccess.getQuantifierAccess().getContextAssignment_1(), "rule__Quantifier__ContextAssignment_1");
			builder.put(grammarAccess.getQuantifierAccess().getVarListAssignment_2(), "rule__Quantifier__VarListAssignment_2");
			builder.put(grammarAccess.getQuantifierAccess().getExprAssignment_4(), "rule__Quantifier__ExprAssignment_4");
			builder.put(grammarAccess.getPrefixAccess().getNameAssignment_0(), "rule__Prefix__NameAssignment_0");
			builder.put(grammarAccess.getPrefixAccess().getElemAssignment_1(), "rule__Prefix__ElemAssignment_1");
			builder.put(grammarAccess.getInfixAccess().getFuncNameAssignment_1_1_0(), "rule__Infix__FuncNameAssignment_1_1_0");
			builder.put(grammarAccess.getInfixAccess().getOpNameAssignment_1_1_1(), "rule__Infix__OpNameAssignment_1_1_1");
			builder.put(grammarAccess.getInfixAccess().getRightAssignment_1_2(), "rule__Infix__RightAssignment_1_2");
			builder.put(grammarAccess.getBracketAccess().getChildAssignment_1(), "rule__Bracket__ChildAssignment_1");
			builder.put(grammarAccess.getFunctionCallAccess().getWrappedAssignment_0(), "rule__FunctionCall__WrappedAssignment_0");
			builder.put(grammarAccess.getFunctionCallAccess().getTypeInstAssignment_1_0_0(), "rule__FunctionCall__TypeInstAssignment_1_0_0");
			builder.put(grammarAccess.getFunctionCallAccess().getClassVarDeclAssignment_1_0_1(), "rule__FunctionCall__ClassVarDeclAssignment_1_0_1");
			builder.put(grammarAccess.getFunctionCallAccess().getContextAssignment_1_1_0(), "rule__FunctionCall__ContextAssignment_1_1_0");
			builder.put(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_1_1_2(), "rule__FunctionCall__ArgumentsAssignment_1_1_2");
			builder.put(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_1_1_3_1(), "rule__FunctionCall__ArgumentsAssignment_1_1_3_1");
			builder.put(grammarAccess.getClassVarDeclAccess().getOwnerTypeAssignment_0(), "rule__ClassVarDecl__OwnerTypeAssignment_0");
			builder.put(grammarAccess.getClassVarDeclAccess().getTypeInstAssignment_2(), "rule__ClassVarDecl__TypeInstAssignment_2");
			builder.put(grammarAccess.getWrappedInfixAccess().getInbuiltAssignment_1_0(), "rule__WrappedInfix__InbuiltAssignment_1_0");
			builder.put(grammarAccess.getWrappedInfixAccess().getFuncNameAssignment_1_1(), "rule__WrappedInfix__FuncNameAssignment_1_1");
			builder.put(grammarAccess.getInstanceAccess().getClassNameAssignment_1(), "rule__Instance__ClassNameAssignment_1");
			builder.put(grammarAccess.getInstanceAccess().getContextAssignment_3(), "rule__Instance__ContextAssignment_3");
			builder.put(grammarAccess.getInstanceAccess().getArgumentsAssignment_6(), "rule__Instance__ArgumentsAssignment_6");
			builder.put(grammarAccess.getInstanceAccess().getArgumentsAssignment_7_1(), "rule__Instance__ArgumentsAssignment_7_1");
			builder.put(grammarAccess.getInstanceAccess().getNameAssignment_9(), "rule__Instance__NameAssignment_9");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BSharpGrammarAccess grammarAccess;

	@Override
	protected InternalBSharpParser createParser() {
		InternalBSharpParser result = new InternalBSharpParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BSharpGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BSharpGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
