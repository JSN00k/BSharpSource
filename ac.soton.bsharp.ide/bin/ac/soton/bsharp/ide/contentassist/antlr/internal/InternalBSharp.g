/*
 * generated by Xtext 2.14.0
 */
grammar InternalBSharp;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package ac.soton.bsharp.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package ac.soton.bsharp.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import ac.soton.bsharp.services.BSharpGrammarAccess;

}
@parser::members {
	private BSharpGrammarAccess grammarAccess;

	public void setGrammarAccess(BSharpGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleTopLevel
entryRuleTopLevel
:
{ before(grammarAccess.getTopLevelRule()); }
	 ruleTopLevel
{ after(grammarAccess.getTopLevelRule()); } 
	 EOF 
;

// Rule TopLevel
ruleTopLevel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTopLevelAccess().getGroup()); }
		(rule__TopLevel__Group__0)
		{ after(grammarAccess.getTopLevelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTHM_NAME
entryRuleTHM_NAME
:
{ before(grammarAccess.getTHM_NAMERule()); }
	 ruleTHM_NAME
{ after(grammarAccess.getTHM_NAMERule()); } 
	 EOF 
;

// Rule THM_NAME
ruleTHM_NAME 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTHM_NAMEAccess().getGroup()); }
		(rule__THM_NAME__Group__0)
		{ after(grammarAccess.getTHM_NAMEAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTopLevelFile
entryRuleTopLevelFile
:
{ before(grammarAccess.getTopLevelFileRule()); }
	 ruleTopLevelFile
{ after(grammarAccess.getTopLevelFileRule()); } 
	 EOF 
;

// Rule TopLevelFile
ruleTopLevelFile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTopLevelFileAccess().getGroup()); }
		(rule__TopLevelFile__Group__0)
		{ after(grammarAccess.getTopLevelFileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClassDecl
entryRuleClassDecl
:
{ before(grammarAccess.getClassDeclRule()); }
	 ruleClassDecl
{ after(grammarAccess.getClassDeclRule()); } 
	 EOF 
;

// Rule ClassDecl
ruleClassDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassDeclAccess().getAlternatives()); }
		(rule__ClassDecl__Alternatives)
		{ after(grammarAccess.getClassDeclAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getClassDeclParserRuleCall()); }
		ruleClassDecl
		{ after(grammarAccess.getTypeAccess().getClassDeclParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTopLevelImport
entryRuleTopLevelImport
:
{ before(grammarAccess.getTopLevelImportRule()); }
	 ruleTopLevelImport
{ after(grammarAccess.getTopLevelImportRule()); } 
	 EOF 
;

// Rule TopLevelImport
ruleTopLevelImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTopLevelImportAccess().getGroup()); }
		(rule__TopLevelImport__Group__0)
		{ after(grammarAccess.getTopLevelImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTopLevelInstance
entryRuleTopLevelInstance
:
{ before(grammarAccess.getTopLevelInstanceRule()); }
	 ruleTopLevelInstance
{ after(grammarAccess.getTopLevelInstanceRule()); } 
	 EOF 
;

// Rule TopLevelInstance
ruleTopLevelInstance 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTopLevelInstanceAccess().getAlternatives()); }
		(rule__TopLevelInstance__Alternatives)
		{ after(grammarAccess.getTopLevelInstanceAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImport
entryRuleImport
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportAccess().getAlternatives()); }
		(rule__Import__Alternatives)
		{ after(grammarAccess.getImportAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGlobalImport
entryRuleGlobalImport
:
{ before(grammarAccess.getGlobalImportRule()); }
	 ruleGlobalImport
{ after(grammarAccess.getGlobalImportRule()); } 
	 EOF 
;

// Rule GlobalImport
ruleGlobalImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGlobalImportAccess().getGroup()); }
		(rule__GlobalImport__Group__0)
		{ after(grammarAccess.getGlobalImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFileImport
entryRuleFileImport
:
{ before(grammarAccess.getFileImportRule()); }
	 ruleFileImport
{ after(grammarAccess.getFileImportRule()); } 
	 EOF 
;

// Rule FileImport
ruleFileImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFileImportAccess().getGroup()); }
		(rule__FileImport__Group__0)
		{ after(grammarAccess.getFileImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLocalImport
entryRuleLocalImport
:
{ before(grammarAccess.getLocalImportRule()); }
	 ruleLocalImport
{ after(grammarAccess.getLocalImportRule()); } 
	 EOF 
;

// Rule LocalImport
ruleLocalImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLocalImportAccess().getGroup()); }
		(rule__LocalImport__Group__0)
		{ after(grammarAccess.getLocalImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClass
entryRuleClass
:
{ before(grammarAccess.getClassRule()); }
	 ruleClass
{ after(grammarAccess.getClassRule()); } 
	 EOF 
;

// Rule Class
ruleClass 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassAccess().getGroup()); }
		(rule__Class__Group__0)
		{ after(grammarAccess.getClassAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstName
entryRuleInstName
:
{ before(grammarAccess.getInstNameRule()); }
	 ruleInstName
{ after(grammarAccess.getInstNameRule()); } 
	 EOF 
;

// Rule InstName
ruleInstName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstNameAccess().getNameAssignment()); }
		(rule__InstName__NameAssignment)
		{ after(grammarAccess.getInstNameAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePolyContext
entryRulePolyContext
:
{ before(grammarAccess.getPolyContextRule()); }
	 rulePolyContext
{ after(grammarAccess.getPolyContextRule()); } 
	 EOF 
;

// Rule PolyContext
rulePolyContext 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPolyContextAccess().getGroup()); }
		(rule__PolyContext__Group__0)
		{ after(grammarAccess.getPolyContextAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePolyType
entryRulePolyType
:
{ before(grammarAccess.getPolyTypeRule()); }
	 rulePolyType
{ after(grammarAccess.getPolyTypeRule()); } 
	 EOF 
;

// Rule PolyType
rulePolyType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPolyTypeAccess().getGroup()); }
		(rule__PolyType__Group__0)
		{ after(grammarAccess.getPolyTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSuperTypeList
entryRuleSuperTypeList
:
{ before(grammarAccess.getSuperTypeListRule()); }
	 ruleSuperTypeList
{ after(grammarAccess.getSuperTypeListRule()); } 
	 EOF 
;

// Rule SuperTypeList
ruleSuperTypeList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSuperTypeListAccess().getGroup()); }
		(rule__SuperTypeList__Group__0)
		{ after(grammarAccess.getSuperTypeListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBuiltinTypeInfixOp
entryRuleBuiltinTypeInfixOp
:
{ before(grammarAccess.getBuiltinTypeInfixOpRule()); }
	 ruleBuiltinTypeInfixOp
{ after(grammarAccess.getBuiltinTypeInfixOpRule()); } 
	 EOF 
;

// Rule BuiltinTypeInfixOp
ruleBuiltinTypeInfixOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBuiltinTypeInfixOpAccess().getAlternatives()); }
		(rule__BuiltinTypeInfixOp__Alternatives)
		{ after(grammarAccess.getBuiltinTypeInfixOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstructedType
entryRuleConstructedType
:
{ before(grammarAccess.getConstructedTypeRule()); }
	 ruleConstructedType
{ after(grammarAccess.getConstructedTypeRule()); } 
	 EOF 
;

// Rule ConstructedType
ruleConstructedType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstructedTypeAccess().getGroup()); }
		(rule__ConstructedType__Group__0)
		{ after(grammarAccess.getConstructedTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBuilderElem
entryRuleBuilderElem
:
{ before(grammarAccess.getBuilderElemRule()); }
	 ruleBuilderElem
{ after(grammarAccess.getBuilderElemRule()); } 
	 EOF 
;

// Rule BuilderElem
ruleBuilderElem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBuilderElemAccess().getAlternatives()); }
		(rule__BuilderElem__Alternatives)
		{ after(grammarAccess.getBuilderElemAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeConstructor
entryRuleTypeConstructor
:
{ before(grammarAccess.getTypeConstructorRule()); }
	 ruleTypeConstructor
{ after(grammarAccess.getTypeConstructorRule()); } 
	 EOF 
;

// Rule TypeConstructor
ruleTypeConstructor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeConstructorAccess().getGroup()); }
		(rule__TypeConstructor__Group__0)
		{ after(grammarAccess.getTypeConstructorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypePowerSet
entryRuleTypePowerSet
:
{ before(grammarAccess.getTypePowerSetRule()); }
	 ruleTypePowerSet
{ after(grammarAccess.getTypePowerSetRule()); } 
	 EOF 
;

// Rule TypePowerSet
ruleTypePowerSet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypePowerSetAccess().getGroup()); }
		(rule__TypePowerSet__Group__0)
		{ after(grammarAccess.getTypePowerSetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeConstrBracket
entryRuleTypeConstrBracket
:
{ before(grammarAccess.getTypeConstrBracketRule()); }
	 ruleTypeConstrBracket
{ after(grammarAccess.getTypeConstrBracketRule()); } 
	 EOF 
;

// Rule TypeConstrBracket
ruleTypeConstrBracket 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeConstrBracketAccess().getGroup()); }
		(rule__TypeConstrBracket__Group__0)
		{ after(grammarAccess.getTypeConstrBracketAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeDeclContext
entryRuleTypeDeclContext
:
{ before(grammarAccess.getTypeDeclContextRule()); }
	 ruleTypeDeclContext
{ after(grammarAccess.getTypeDeclContextRule()); } 
	 EOF 
;

// Rule TypeDeclContext
ruleTypeDeclContext 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeDeclContextAccess().getGroup()); }
		(rule__TypeDeclContext__Group__0)
		{ after(grammarAccess.getTypeDeclContextAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhere
entryRuleWhere
:
{ before(grammarAccess.getWhereRule()); }
	 ruleWhere
{ after(grammarAccess.getWhereRule()); } 
	 EOF 
;

// Rule Where
ruleWhere 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhereAccess().getGroup()); }
		(rule__Where__Group__0)
		{ after(grammarAccess.getWhereAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDatatype
entryRuleDatatype
:
{ before(grammarAccess.getDatatypeRule()); }
	 ruleDatatype
{ after(grammarAccess.getDatatypeRule()); } 
	 EOF 
;

// Rule Datatype
ruleDatatype 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDatatypeAccess().getGroup()); }
		(rule__Datatype__Group__0)
		{ after(grammarAccess.getDatatypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDatatypeConstructor
entryRuleDatatypeConstructor
:
{ before(grammarAccess.getDatatypeConstructorRule()); }
	 ruleDatatypeConstructor
{ after(grammarAccess.getDatatypeConstructorRule()); } 
	 EOF 
;

// Rule DatatypeConstructor
ruleDatatypeConstructor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDatatypeConstructorAccess().getGroup()); }
		(rule__DatatypeConstructor__Group__0)
		{ after(grammarAccess.getDatatypeConstructorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExtend
entryRuleExtend
:
{ before(grammarAccess.getExtendRule()); }
	 ruleExtend
{ after(grammarAccess.getExtendRule()); } 
	 EOF 
;

// Rule Extend
ruleExtend 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExtendAccess().getGroup()); }
		(rule__Extend__Group__0)
		{ after(grammarAccess.getExtendAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBSharpBlock
entryRuleBSharpBlock
:
{ before(grammarAccess.getBSharpBlockRule()); }
	 ruleBSharpBlock
{ after(grammarAccess.getBSharpBlockRule()); } 
	 EOF 
;

// Rule BSharpBlock
ruleBSharpBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBSharpBlockAccess().getGroup()); }
		(rule__BSharpBlock__Group__0)
		{ after(grammarAccess.getBSharpBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionDecl
entryRuleFunctionDecl
:
{ before(grammarAccess.getFunctionDeclRule()); }
	 ruleFunctionDecl
{ after(grammarAccess.getFunctionDeclRule()); } 
	 EOF 
;

// Rule FunctionDecl
ruleFunctionDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionDeclAccess().getGroup()); }
		(rule__FunctionDecl__Group__0)
		{ after(grammarAccess.getFunctionDeclAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMatchStatement
entryRuleMatchStatement
:
{ before(grammarAccess.getMatchStatementRule()); }
	 ruleMatchStatement
{ after(grammarAccess.getMatchStatementRule()); } 
	 EOF 
;

// Rule MatchStatement
ruleMatchStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMatchStatementAccess().getGroup()); }
		(rule__MatchStatement__Group__0)
		{ after(grammarAccess.getMatchStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMatchCase
entryRuleMatchCase
:
{ before(grammarAccess.getMatchCaseRule()); }
	 ruleMatchCase
{ after(grammarAccess.getMatchCaseRule()); } 
	 EOF 
;

// Rule MatchCase
ruleMatchCase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMatchCaseAccess().getGroup()); }
		(rule__MatchCase__Group__0)
		{ after(grammarAccess.getMatchCaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTheoremBody
entryRuleTheoremBody
:
{ before(grammarAccess.getTheoremBodyRule()); }
	 ruleTheoremBody
{ after(grammarAccess.getTheoremBodyRule()); } 
	 EOF 
;

// Rule TheoremBody
ruleTheoremBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTheoremBodyAccess().getGroup()); }
		(rule__TheoremBody__Group__0)
		{ after(grammarAccess.getTheoremBodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTheoremDecl
entryRuleTheoremDecl
:
{ before(grammarAccess.getTheoremDeclRule()); }
	 ruleTheoremDecl
{ after(grammarAccess.getTheoremDeclRule()); } 
	 EOF 
;

// Rule TheoremDecl
ruleTheoremDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTheoremDeclAccess().getGroup()); }
		(rule__TheoremDecl__Group__0)
		{ after(grammarAccess.getTheoremDeclAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypedVariableList
entryRuleTypedVariableList
:
{ before(grammarAccess.getTypedVariableListRule()); }
	 ruleTypedVariableList
{ after(grammarAccess.getTypedVariableListRule()); } 
	 EOF 
;

// Rule TypedVariableList
ruleTypedVariableList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypedVariableListAccess().getGroup()); }
		(rule__TypedVariableList__Group__0)
		{ after(grammarAccess.getTypedVariableListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableTyping
entryRuleVariableTyping
:
{ before(grammarAccess.getVariableTypingRule()); }
	 ruleVariableTyping
{ after(grammarAccess.getVariableTypingRule()); } 
	 EOF 
;

// Rule VariableTyping
ruleVariableTyping 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableTypingAccess().getGroup()); }
		(rule__VariableTyping__Group__0)
		{ after(grammarAccess.getVariableTypingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypedVariable
entryRuleTypedVariable
:
{ before(grammarAccess.getTypedVariableRule()); }
	 ruleTypedVariable
{ after(grammarAccess.getTypedVariableRule()); } 
	 EOF 
;

// Rule TypedVariable
ruleTypedVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypedVariableAccess().getNameAssignment()); }
		(rule__TypedVariable__NameAssignment)
		{ after(grammarAccess.getTypedVariableAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLambda
entryRuleLambda
:
{ before(grammarAccess.getLambdaRule()); }
	 ruleLambda
{ after(grammarAccess.getLambdaRule()); } 
	 EOF 
;

// Rule Lambda
ruleLambda 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLambdaAccess().getGroup()); }
		(rule__Lambda__Group__0)
		{ after(grammarAccess.getLambdaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQuantifier
entryRuleQuantifier
:
{ before(grammarAccess.getQuantifierRule()); }
	 ruleQuantifier
{ after(grammarAccess.getQuantifierRule()); } 
	 EOF 
;

// Rule Quantifier
ruleQuantifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQuantifierAccess().getGroup()); }
		(rule__Quantifier__Group__0)
		{ after(grammarAccess.getQuantifierAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRootExpression
entryRuleRootExpression
:
{ before(grammarAccess.getRootExpressionRule()); }
	 ruleRootExpression
{ after(grammarAccess.getRootExpressionRule()); } 
	 EOF 
;

// Rule RootExpression
ruleRootExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRootExpressionAccess().getAlternatives()); }
		(rule__RootExpression__Alternatives)
		{ after(grammarAccess.getRootExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrefix
entryRulePrefix
:
{ before(grammarAccess.getPrefixRule()); }
	 rulePrefix
{ after(grammarAccess.getPrefixRule()); } 
	 EOF 
;

// Rule Prefix
rulePrefix 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrefixAccess().getGroup()); }
		(rule__Prefix__Group__0)
		{ after(grammarAccess.getPrefixAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrefixBuiltIn
entryRulePrefixBuiltIn
:
{ before(grammarAccess.getPrefixBuiltInRule()); }
	 rulePrefixBuiltIn
{ after(grammarAccess.getPrefixBuiltInRule()); } 
	 EOF 
;

// Rule PrefixBuiltIn
rulePrefixBuiltIn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrefixBuiltInAccess().getNotSignKeyword()); }
		'\u00AC'
		{ after(grammarAccess.getPrefixBuiltInAccess().getNotSignKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInfix
entryRuleInfix
:
{ before(grammarAccess.getInfixRule()); }
	 ruleInfix
{ after(grammarAccess.getInfixRule()); } 
	 EOF 
;

// Rule Infix
ruleInfix 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInfixAccess().getGroup()); }
		(rule__Infix__Group__0)
		{ after(grammarAccess.getInfixAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElement
entryRuleElement
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElementAccess().getAlternatives()); }
		(rule__Element__Alternatives)
		{ after(grammarAccess.getElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBracket
entryRuleBracket
:
{ before(grammarAccess.getBracketRule()); }
	 ruleBracket
{ after(grammarAccess.getBracketRule()); } 
	 EOF 
;

// Rule Bracket
ruleBracket 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBracketAccess().getGroup()); }
		(rule__Bracket__Group__0)
		{ after(grammarAccess.getBracketAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionCallAccess().getAlternatives()); }
		(rule__FunctionCall__Alternatives)
		{ after(grammarAccess.getFunctionCallAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncCallArgs
entryRuleFuncCallArgs
:
{ before(grammarAccess.getFuncCallArgsRule()); }
	 ruleFuncCallArgs
{ after(grammarAccess.getFuncCallArgsRule()); } 
	 EOF 
;

// Rule FuncCallArgs
ruleFuncCallArgs 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncCallArgsAccess().getGroup()); }
		(rule__FuncCallArgs__Group__0)
		{ after(grammarAccess.getFuncCallArgsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfElse
entryRuleIfElse
:
{ before(grammarAccess.getIfElseRule()); }
	 ruleIfElse
{ after(grammarAccess.getIfElseRule()); } 
	 EOF 
;

// Rule IfElse
ruleIfElse 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfElseAccess().getGroup()); }
		(rule__IfElse__Group__0)
		{ after(grammarAccess.getIfElseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClassVarDecl
entryRuleClassVarDecl
:
{ before(grammarAccess.getClassVarDeclRule()); }
	 ruleClassVarDecl
{ after(grammarAccess.getClassVarDeclRule()); } 
	 EOF 
;

// Rule ClassVarDecl
ruleClassVarDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassVarDeclAccess().getGroup()); }
		(rule__ClassVarDecl__Group__0)
		{ after(grammarAccess.getClassVarDeclAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInbuiltInfix
entryRuleInbuiltInfix
:
{ before(grammarAccess.getInbuiltInfixRule()); }
	 ruleInbuiltInfix
{ after(grammarAccess.getInbuiltInfixRule()); } 
	 EOF 
;

// Rule InbuiltInfix
ruleInbuiltInfix 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInbuiltInfixAccess().getAlternatives()); }
		(rule__InbuiltInfix__Alternatives)
		{ after(grammarAccess.getInbuiltInfixAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWrappedInfix
entryRuleWrappedInfix
:
{ before(grammarAccess.getWrappedInfixRule()); }
	 ruleWrappedInfix
{ after(grammarAccess.getWrappedInfixRule()); } 
	 EOF 
;

// Rule WrappedInfix
ruleWrappedInfix 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWrappedInfixAccess().getGroup()); }
		(rule__WrappedInfix__Group__0)
		{ after(grammarAccess.getWrappedInfixAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstance
entryRuleInstance
:
{ before(grammarAccess.getInstanceRule()); }
	 ruleInstance
{ after(grammarAccess.getInstanceRule()); } 
	 EOF 
;

// Rule Instance
ruleInstance 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstanceAccess().getGroup()); }
		(rule__Instance__Group__0)
		{ after(grammarAccess.getInstanceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReferencingFunc
entryRuleReferencingFunc
:
{ before(grammarAccess.getReferencingFuncRule()); }
	 ruleReferencingFunc
{ after(grammarAccess.getReferencingFuncRule()); } 
	 EOF 
;

// Rule ReferencingFunc
ruleReferencingFunc 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReferencingFuncAccess().getGroup()); }
		(rule__ReferencingFunc__Group__0)
		{ after(grammarAccess.getReferencingFuncAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__THM_NAME__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTHM_NAMEAccess().getINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getTHM_NAMEAccess().getINTTerminalRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTHM_NAMEAccess().getIDTerminalRuleCall_0_1()); }
		RULE_ID
		{ after(grammarAccess.getTHM_NAMEAccess().getIDTerminalRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getTHM_NAMEAccess().getWSTerminalRuleCall_0_2()); }
		RULE_WS
		{ after(grammarAccess.getTHM_NAMEAccess().getWSTerminalRuleCall_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassDecl__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassDeclAccess().getClassParserRuleCall_0()); }
		ruleClass
		{ after(grammarAccess.getClassDeclAccess().getClassParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getClassDeclAccess().getDatatypeParserRuleCall_1()); }
		ruleDatatype
		{ after(grammarAccess.getClassDeclAccess().getDatatypeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevelInstance__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTopLevelInstanceAccess().getClassDeclParserRuleCall_0()); }
		ruleClassDecl
		{ after(grammarAccess.getTopLevelInstanceAccess().getClassDeclParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTopLevelInstanceAccess().getExtendParserRuleCall_1()); }
		ruleExtend
		{ after(grammarAccess.getTopLevelInstanceAccess().getExtendParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getGlobalImportParserRuleCall_0()); }
		ruleGlobalImport
		{ after(grammarAccess.getImportAccess().getGlobalImportParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getImportAccess().getLocalImportParserRuleCall_1()); }
		ruleLocalImport
		{ after(grammarAccess.getImportAccess().getLocalImportParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FileImport__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFileImportAccess().getAsteriskKeyword_1_1_0()); }
		'*'
		{ after(grammarAccess.getFileImportAccess().getAsteriskKeyword_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getFileImportAccess().getTypeAssignment_1_1_1()); }
		(rule__FileImport__TypeAssignment_1_1_1)
		{ after(grammarAccess.getFileImportAccess().getTypeAssignment_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BuiltinTypeInfixOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBuiltinTypeInfixOpAccess().getMultiplicationSignKeyword_0()); }
		'\u00D7'
		{ after(grammarAccess.getBuiltinTypeInfixOpAccess().getMultiplicationSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getBuiltinTypeInfixOpAccess().getRightwardsArrowKeyword_1()); }
		'\u2192'
		{ after(grammarAccess.getBuiltinTypeInfixOpAccess().getRightwardsArrowKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getBuiltinTypeInfixOpAccess().getPrivateUseAreaE102Keyword_2()); }
		'\uE102'
		{ after(grammarAccess.getBuiltinTypeInfixOpAccess().getPrivateUseAreaE102Keyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getBuiltinTypeInfixOpAccess().getPrivateUseAreaE100Keyword_3()); }
		'\uE100'
		{ after(grammarAccess.getBuiltinTypeInfixOpAccess().getPrivateUseAreaE100Keyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getBuiltinTypeInfixOpAccess().getLeftRightArrowKeyword_4()); }
		'\u2194'
		{ after(grammarAccess.getBuiltinTypeInfixOpAccess().getLeftRightArrowKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getBuiltinTypeInfixOpAccess().getRightwardsTwoHeadedArrowWithTailKeyword_5()); }
		'\u2916'
		{ after(grammarAccess.getBuiltinTypeInfixOpAccess().getRightwardsTwoHeadedArrowWithTailKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getBuiltinTypeInfixOpAccess().getRightwardsArrowWithVerticalStrokeKeyword_6()); }
		'\u21F8'
		{ after(grammarAccess.getBuiltinTypeInfixOpAccess().getRightwardsArrowWithVerticalStrokeKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getBuiltinTypeInfixOpAccess().getRightwardsArrowWithTailKeyword_7()); }
		'\u21A3'
		{ after(grammarAccess.getBuiltinTypeInfixOpAccess().getRightwardsArrowWithTailKeyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getBuiltinTypeInfixOpAccess().getRightwardsTwoHeadedArrowWithVerticalStrokeKeyword_8()); }
		'\u2900'
		{ after(grammarAccess.getBuiltinTypeInfixOpAccess().getRightwardsTwoHeadedArrowWithVerticalStrokeKeyword_8()); }
	)
	|
	(
		{ before(grammarAccess.getBuiltinTypeInfixOpAccess().getRightwardsTwoHeadedArrowKeyword_9()); }
		'\u21A0'
		{ after(grammarAccess.getBuiltinTypeInfixOpAccess().getRightwardsTwoHeadedArrowKeyword_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BuilderElem__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBuilderElemAccess().getTypeConstructorParserRuleCall_0()); }
		ruleTypeConstructor
		{ after(grammarAccess.getBuilderElemAccess().getTypeConstructorParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBuilderElemAccess().getTypeConstrBracketParserRuleCall_1()); }
		ruleTypeConstrBracket
		{ after(grammarAccess.getBuilderElemAccess().getTypeConstrBracketParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getBuilderElemAccess().getTypePowerSetParserRuleCall_2()); }
		ruleTypePowerSet
		{ after(grammarAccess.getBuilderElemAccess().getTypePowerSetParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BSharpBlock__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBSharpBlockAccess().getFunctionsAssignment_2_0()); }
		(rule__BSharpBlock__FunctionsAssignment_2_0)
		{ after(grammarAccess.getBSharpBlockAccess().getFunctionsAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getBSharpBlockAccess().getTheoremsAssignment_2_1()); }
		(rule__BSharpBlock__TheoremsAssignment_2_1)
		{ after(grammarAccess.getBSharpBlockAccess().getTheoremsAssignment_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getBSharpBlockAccess().getTheoremsAssignment_2_2()); }
		(rule__BSharpBlock__TheoremsAssignment_2_2)
		{ after(grammarAccess.getBSharpBlockAccess().getTheoremsAssignment_2_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__QTypeAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQuantifierAccess().getQTypeForAllKeyword_0_0_0()); }
		'\u2200'
		{ after(grammarAccess.getQuantifierAccess().getQTypeForAllKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getQuantifierAccess().getQTypeThereExistsKeyword_0_0_1()); }
		'\u2203'
		{ after(grammarAccess.getQuantifierAccess().getQTypeThereExistsKeyword_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RootExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRootExpressionAccess().getLambdaParserRuleCall_0()); }
		ruleLambda
		{ after(grammarAccess.getRootExpressionAccess().getLambdaParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRootExpressionAccess().getQuantifierParserRuleCall_1()); }
		ruleQuantifier
		{ after(grammarAccess.getRootExpressionAccess().getQuantifierParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getRootExpressionAccess().getInfixParserRuleCall_2()); }
		ruleInfix
		{ after(grammarAccess.getRootExpressionAccess().getInfixParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getRootExpressionAccess().getMatchStatementParserRuleCall_3()); }
		ruleMatchStatement
		{ after(grammarAccess.getRootExpressionAccess().getMatchStatementParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getRootExpressionAccess().getIfElseParserRuleCall_4()); }
		ruleIfElse
		{ after(grammarAccess.getRootExpressionAccess().getIfElseParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Infix__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInfixAccess().getFuncNameAssignment_1_1_0()); }
		(rule__Infix__FuncNameAssignment_1_1_0)
		{ after(grammarAccess.getInfixAccess().getFuncNameAssignment_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getInfixAccess().getOpNameAssignment_1_1_1()); }
		(rule__Infix__OpNameAssignment_1_1_1)
		{ after(grammarAccess.getInfixAccess().getOpNameAssignment_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getBracketParserRuleCall_0()); }
		ruleBracket
		{ after(grammarAccess.getElementAccess().getBracketParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getPrefixParserRuleCall_1()); }
		rulePrefix
		{ after(grammarAccess.getElementAccess().getPrefixParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getFunctionCallParserRuleCall_2()); }
		ruleFunctionCall
		{ after(grammarAccess.getElementAccess().getFunctionCallParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getWrappedAssignment_0()); }
		(rule__FunctionCall__WrappedAssignment_0)
		{ after(grammarAccess.getFunctionCallAccess().getWrappedAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getGroup_1()); }
		(rule__FunctionCall__Group_1__0)
		{ after(grammarAccess.getFunctionCallAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getTypeInstAssignment_1_0_0()); }
		(rule__FunctionCall__TypeInstAssignment_1_0_0)
		{ after(grammarAccess.getFunctionCallAccess().getTypeInstAssignment_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionCallAccess().getClassVarDeclAssignment_1_0_1()); }
		(rule__FunctionCall__ClassVarDeclAssignment_1_0_1)
		{ after(grammarAccess.getFunctionCallAccess().getClassVarDeclAssignment_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InbuiltInfix__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInbuiltInfixAccess().getLeftRightDoubleArrowKeyword_0()); }
		'\u21D4'
		{ after(grammarAccess.getInbuiltInfixAccess().getLeftRightDoubleArrowKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getInbuiltInfixAccess().getRightwardsDoubleArrowKeyword_1()); }
		'\u21D2'
		{ after(grammarAccess.getInbuiltInfixAccess().getRightwardsDoubleArrowKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getInbuiltInfixAccess().getEqualsSignKeyword_2()); }
		'='
		{ after(grammarAccess.getInbuiltInfixAccess().getEqualsSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getInbuiltInfixAccess().getNotEqualToKeyword_3()); }
		'\u2260'
		{ after(grammarAccess.getInbuiltInfixAccess().getNotEqualToKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getInbuiltInfixAccess().getLogicalAndKeyword_4()); }
		'\u2227'
		{ after(grammarAccess.getInbuiltInfixAccess().getLogicalAndKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getInbuiltInfixAccess().getLogicalOrKeyword_5()); }
		'\u2228'
		{ after(grammarAccess.getInbuiltInfixAccess().getLogicalOrKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getInbuiltInfixAccess().getElementOfKeyword_6()); }
		'\u2208'
		{ after(grammarAccess.getInbuiltInfixAccess().getElementOfKeyword_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WrappedInfix__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWrappedInfixAccess().getInbuiltAssignment_1_0()); }
		(rule__WrappedInfix__InbuiltAssignment_1_0)
		{ after(grammarAccess.getWrappedInfixAccess().getInbuiltAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getWrappedInfixAccess().getFuncNameAssignment_1_1()); }
		(rule__WrappedInfix__FuncNameAssignment_1_1)
		{ after(grammarAccess.getWrappedInfixAccess().getFuncNameAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TopLevel__Group__0__Impl
	rule__TopLevel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTopLevelAccess().getPackageKeyword_0()); }
	'package'
	{ after(grammarAccess.getTopLevelAccess().getPackageKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TopLevel__Group__1__Impl
	rule__TopLevel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTopLevelAccess().getNameAssignment_1()); }
	(rule__TopLevel__NameAssignment_1)
	{ after(grammarAccess.getTopLevelAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevel__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TopLevel__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevel__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTopLevelAccess().getTopLevelFileAssignment_2()); }
	(rule__TopLevel__TopLevelFileAssignment_2)
	{ after(grammarAccess.getTopLevelAccess().getTopLevelFileAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__THM_NAME__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__THM_NAME__Group__0__Impl
	rule__THM_NAME__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__THM_NAME__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTHM_NAMEAccess().getAlternatives_0()); }
	(rule__THM_NAME__Alternatives_0)*
	{ after(grammarAccess.getTHM_NAMEAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__THM_NAME__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__THM_NAME__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__THM_NAME__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTHM_NAMEAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getTHM_NAMEAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TopLevelFile__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TopLevelFile__Group__0__Impl
	rule__TopLevelFile__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevelFile__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTopLevelFileAccess().getTopLevelFileAction_0()); }
	()
	{ after(grammarAccess.getTopLevelFileAccess().getTopLevelFileAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevelFile__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TopLevelFile__Group__1__Impl
	rule__TopLevelFile__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevelFile__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTopLevelFileAccess().getNoImportElementsAssignment_1()); }
	(rule__TopLevelFile__NoImportElementsAssignment_1)*
	{ after(grammarAccess.getTopLevelFileAccess().getNoImportElementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevelFile__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TopLevelFile__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevelFile__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTopLevelFileAccess().getTopLevelImportsAssignment_2()); }
	(rule__TopLevelFile__TopLevelImportsAssignment_2)*
	{ after(grammarAccess.getTopLevelFileAccess().getTopLevelImportsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
	(rule__QualifiedName__Group_1__0)*
	{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TopLevelImport__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TopLevelImport__Group__0__Impl
	rule__TopLevelImport__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevelImport__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getTopLevelImportAccess().getImportsAssignment_0()); }
		(rule__TopLevelImport__ImportsAssignment_0)
		{ after(grammarAccess.getTopLevelImportAccess().getImportsAssignment_0()); }
	)
	(
		{ before(grammarAccess.getTopLevelImportAccess().getImportsAssignment_0()); }
		(rule__TopLevelImport__ImportsAssignment_0)*
		{ after(grammarAccess.getTopLevelImportAccess().getImportsAssignment_0()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevelImport__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TopLevelImport__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevelImport__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getTopLevelImportAccess().getBodyElementsAssignment_1()); }
		(rule__TopLevelImport__BodyElementsAssignment_1)
		{ after(grammarAccess.getTopLevelImportAccess().getBodyElementsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getTopLevelImportAccess().getBodyElementsAssignment_1()); }
		(rule__TopLevelImport__BodyElementsAssignment_1)*
		{ after(grammarAccess.getTopLevelImportAccess().getBodyElementsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GlobalImport__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GlobalImport__Group__0__Impl
	rule__GlobalImport__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalImport__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalImportAccess().getFromKeyword_0()); }
	'From'
	{ after(grammarAccess.getGlobalImportAccess().getFromKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalImport__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GlobalImport__Group__1__Impl
	rule__GlobalImport__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalImport__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalImportAccess().getProjectAssignment_1()); }
	(rule__GlobalImport__ProjectAssignment_1)
	{ after(grammarAccess.getGlobalImportAccess().getProjectAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalImport__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GlobalImport__Group__2__Impl
	rule__GlobalImport__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalImport__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalImportAccess().getImportKeyword_2()); }
	'Import'
	{ after(grammarAccess.getGlobalImportAccess().getImportKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalImport__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GlobalImport__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalImport__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getGlobalImportAccess().getFileImportsAssignment_3()); }
		(rule__GlobalImport__FileImportsAssignment_3)
		{ after(grammarAccess.getGlobalImportAccess().getFileImportsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getGlobalImportAccess().getFileImportsAssignment_3()); }
		(rule__GlobalImport__FileImportsAssignment_3)*
		{ after(grammarAccess.getGlobalImportAccess().getFileImportsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FileImport__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FileImport__Group__0__Impl
	rule__FileImport__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FileImport__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileImportAccess().getFileReferenceAssignment_0()); }
	(rule__FileImport__FileReferenceAssignment_0)
	{ after(grammarAccess.getFileImportAccess().getFileReferenceAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FileImport__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FileImport__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FileImport__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileImportAccess().getGroup_1()); }
	(rule__FileImport__Group_1__0)?
	{ after(grammarAccess.getFileImportAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FileImport__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FileImport__Group_1__0__Impl
	rule__FileImport__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FileImport__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileImportAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getFileImportAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FileImport__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FileImport__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FileImport__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileImportAccess().getAlternatives_1_1()); }
	(rule__FileImport__Alternatives_1_1)
	{ after(grammarAccess.getFileImportAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LocalImport__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LocalImport__Group__0__Impl
	rule__LocalImport__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalImport__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocalImportAccess().getImportKeyword_0()); }
	'Import'
	{ after(grammarAccess.getLocalImportAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalImport__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LocalImport__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalImport__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getLocalImportAccess().getFileImportsAssignment_1()); }
		(rule__LocalImport__FileImportsAssignment_1)
		{ after(grammarAccess.getLocalImportAccess().getFileImportsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getLocalImportAccess().getFileImportsAssignment_1()); }
		(rule__LocalImport__FileImportsAssignment_1)*
		{ after(grammarAccess.getLocalImportAccess().getFileImportsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__0__Impl
	rule__Class__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getClassKeyword_0()); }
	'Class'
	{ after(grammarAccess.getClassAccess().getClassKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__1__Impl
	rule__Class__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getNameAssignment_1()); }
	(rule__Class__NameAssignment_1)
	{ after(grammarAccess.getClassAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__2__Impl
	rule__Class__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getRawContextAssignment_2()); }
	(rule__Class__RawContextAssignment_2)?
	{ after(grammarAccess.getClassAccess().getRawContextAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__3__Impl
	rule__Class__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getGroup_3()); }
	(rule__Class__Group_3__0)
	{ after(grammarAccess.getClassAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__4__Impl
	rule__Class__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getSupertypesAssignment_4()); }
	(rule__Class__SupertypesAssignment_4)?
	{ after(grammarAccess.getClassAccess().getSupertypesAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__5__Impl
	rule__Class__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getGroup_5()); }
	(rule__Class__Group_5__0)?
	{ after(grammarAccess.getClassAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__6__Impl
	rule__Class__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getWhereAssignment_6()); }
	(rule__Class__WhereAssignment_6)?
	{ after(grammarAccess.getClassAccess().getWhereAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__7__Impl
	rule__Class__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getSemicolonKeyword_7()); }
	(';')?
	{ after(grammarAccess.getClassAccess().getSemicolonKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getBlockAssignment_8()); }
	(rule__Class__BlockAssignment_8)
	{ after(grammarAccess.getClassAccess().getBlockAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group_3__0__Impl
	rule__Class__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getLeftSquareBracketKeyword_3_0()); }
	'['
	{ after(grammarAccess.getClassAccess().getLeftSquareBracketKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group_3__1__Impl
	rule__Class__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getInstNameAssignment_3_1()); }
	(rule__Class__InstNameAssignment_3_1)
	{ after(grammarAccess.getClassAccess().getInstNameAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getRightSquareBracketKeyword_3_2()); }
	']'
	{ after(grammarAccess.getClassAccess().getRightSquareBracketKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group_5__0__Impl
	rule__Class__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getLeftParenthesisKeyword_5_0()); }
	'('
	{ after(grammarAccess.getClassAccess().getLeftParenthesisKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group_5__1__Impl
	rule__Class__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getVarListAssignment_5_1()); }
	(rule__Class__VarListAssignment_5_1)
	{ after(grammarAccess.getClassAccess().getVarListAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_5__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Class__Group_5__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_5__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassAccess().getRightParenthesisKeyword_5_2()); }
	')'
	{ after(grammarAccess.getClassAccess().getRightParenthesisKeyword_5_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PolyContext__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyContext__Group__0__Impl
	rule__PolyContext__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyContext__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyContextAccess().getLessThanSignKeyword_0()); }
	'<'
	{ after(grammarAccess.getPolyContextAccess().getLessThanSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyContext__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyContext__Group__1__Impl
	rule__PolyContext__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyContext__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getPolyContextAccess().getPolyTypesAssignment_1()); }
		(rule__PolyContext__PolyTypesAssignment_1)
		{ after(grammarAccess.getPolyContextAccess().getPolyTypesAssignment_1()); }
	)
	(
		{ before(grammarAccess.getPolyContextAccess().getPolyTypesAssignment_1()); }
		(rule__PolyContext__PolyTypesAssignment_1)*
		{ after(grammarAccess.getPolyContextAccess().getPolyTypesAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyContext__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyContext__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyContext__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyContextAccess().getGreaterThanSignKeyword_2()); }
	'>'
	{ after(grammarAccess.getPolyContextAccess().getGreaterThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PolyType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyType__Group__0__Impl
	rule__PolyType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyTypeAccess().getNameAssignment_0()); }
	(rule__PolyType__NameAssignment_0)
	{ after(grammarAccess.getPolyTypeAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyTypeAccess().getGroup_1()); }
	(rule__PolyType__Group_1__0)?
	{ after(grammarAccess.getPolyTypeAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PolyType__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyType__Group_1__0__Impl
	rule__PolyType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyType__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyTypeAccess().getColonKeyword_1_0()); }
	':'
	{ after(grammarAccess.getPolyTypeAccess().getColonKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyType__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyType__Group_1__1__Impl
	rule__PolyType__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyType__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyTypeAccess().getSuperTypesAssignment_1_1()); }
	(rule__PolyType__SuperTypesAssignment_1_1)
	{ after(grammarAccess.getPolyTypeAccess().getSuperTypesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyType__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyType__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyType__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyTypeAccess().getGroup_1_2()); }
	(rule__PolyType__Group_1_2__0)*
	{ after(grammarAccess.getPolyTypeAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PolyType__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyType__Group_1_2__0__Impl
	rule__PolyType__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyType__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyTypeAccess().getCommaKeyword_1_2_0()); }
	','
	{ after(grammarAccess.getPolyTypeAccess().getCommaKeyword_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyType__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyType__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyType__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyTypeAccess().getSuperTypesAssignment_1_2_1()); }
	(rule__PolyType__SuperTypesAssignment_1_2_1)
	{ after(grammarAccess.getPolyTypeAccess().getSuperTypesAssignment_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SuperTypeList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SuperTypeList__Group__0__Impl
	rule__SuperTypeList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperTypeList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSuperTypeListAccess().getColonKeyword_0()); }
	':'
	{ after(grammarAccess.getSuperTypeListAccess().getColonKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperTypeList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SuperTypeList__Group__1__Impl
	rule__SuperTypeList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperTypeList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSuperTypeListAccess().getSuperTypesAssignment_1()); }
	(rule__SuperTypeList__SuperTypesAssignment_1)
	{ after(grammarAccess.getSuperTypeListAccess().getSuperTypesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperTypeList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SuperTypeList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperTypeList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSuperTypeListAccess().getGroup_2()); }
	(rule__SuperTypeList__Group_2__0)*
	{ after(grammarAccess.getSuperTypeListAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SuperTypeList__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SuperTypeList__Group_2__0__Impl
	rule__SuperTypeList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperTypeList__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSuperTypeListAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getSuperTypeListAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperTypeList__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SuperTypeList__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperTypeList__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSuperTypeListAccess().getSuperTypesAssignment_2_1()); }
	(rule__SuperTypeList__SuperTypesAssignment_2_1)
	{ after(grammarAccess.getSuperTypeListAccess().getSuperTypesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructedType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructedType__Group__0__Impl
	rule__ConstructedType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructedType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructedTypeAccess().getBuilderElemParserRuleCall_0()); }
	ruleBuilderElem
	{ after(grammarAccess.getConstructedTypeAccess().getBuilderElemParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructedType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructedType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructedType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructedTypeAccess().getGroup_1()); }
	(rule__ConstructedType__Group_1__0)*
	{ after(grammarAccess.getConstructedTypeAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructedType__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructedType__Group_1__0__Impl
	rule__ConstructedType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructedType__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructedTypeAccess().getConstructedTypeLeftAction_1_0()); }
	()
	{ after(grammarAccess.getConstructedTypeAccess().getConstructedTypeLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructedType__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructedType__Group_1__1__Impl
	rule__ConstructedType__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructedType__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructedTypeAccess().getConstructorAssignment_1_1()); }
	(rule__ConstructedType__ConstructorAssignment_1_1)
	{ after(grammarAccess.getConstructedTypeAccess().getConstructorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructedType__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConstructedType__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructedType__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstructedTypeAccess().getRightAssignment_1_2()); }
	(rule__ConstructedType__RightAssignment_1_2)
	{ after(grammarAccess.getConstructedTypeAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeConstructor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeConstructor__Group__0__Impl
	rule__TypeConstructor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeConstructor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeConstructorAccess().getTypeNameAssignment_0()); }
	(rule__TypeConstructor__TypeNameAssignment_0)
	{ after(grammarAccess.getTypeConstructorAccess().getTypeNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeConstructor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeConstructor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeConstructor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeConstructorAccess().getContextAssignment_1()); }
	(rule__TypeConstructor__ContextAssignment_1)?
	{ after(grammarAccess.getTypeConstructorAccess().getContextAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypePowerSet__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypePowerSet__Group__0__Impl
	rule__TypePowerSet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypePowerSet__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypePowerSetAccess().getDoubleStruckCapitalPKeyword_0()); }
	'\u2119'
	{ after(grammarAccess.getTypePowerSetAccess().getDoubleStruckCapitalPKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypePowerSet__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypePowerSet__Group__1__Impl
	rule__TypePowerSet__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypePowerSet__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypePowerSetAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getTypePowerSetAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypePowerSet__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypePowerSet__Group__2__Impl
	rule__TypePowerSet__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypePowerSet__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypePowerSetAccess().getChildAssignment_2()); }
	(rule__TypePowerSet__ChildAssignment_2)
	{ after(grammarAccess.getTypePowerSetAccess().getChildAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypePowerSet__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypePowerSet__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypePowerSet__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypePowerSetAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getTypePowerSetAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeConstrBracket__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeConstrBracket__Group__0__Impl
	rule__TypeConstrBracket__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeConstrBracket__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeConstrBracketAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getTypeConstrBracketAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeConstrBracket__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeConstrBracket__Group__1__Impl
	rule__TypeConstrBracket__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeConstrBracket__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeConstrBracketAccess().getChildAssignment_1()); }
	(rule__TypeConstrBracket__ChildAssignment_1)
	{ after(grammarAccess.getTypeConstrBracketAccess().getChildAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeConstrBracket__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeConstrBracket__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeConstrBracket__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeConstrBracketAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getTypeConstrBracketAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclContext__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDeclContext__Group__0__Impl
	rule__TypeDeclContext__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDeclContextAccess().getLessThanSignKeyword_0()); }
	'<'
	{ after(grammarAccess.getTypeDeclContextAccess().getLessThanSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDeclContext__Group__1__Impl
	rule__TypeDeclContext__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDeclContextAccess().getTypeNameAssignment_1()); }
	(rule__TypeDeclContext__TypeNameAssignment_1)
	{ after(grammarAccess.getTypeDeclContextAccess().getTypeNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDeclContext__Group__2__Impl
	rule__TypeDeclContext__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDeclContextAccess().getGroup_2()); }
	(rule__TypeDeclContext__Group_2__0)*
	{ after(grammarAccess.getTypeDeclContextAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDeclContext__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDeclContextAccess().getGreaterThanSignKeyword_3()); }
	'>'
	{ after(grammarAccess.getTypeDeclContextAccess().getGreaterThanSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDeclContext__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDeclContext__Group_2__0__Impl
	rule__TypeDeclContext__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDeclContextAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getTypeDeclContextAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDeclContext__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDeclContextAccess().getTypeNameAssignment_2_1()); }
	(rule__TypeDeclContext__TypeNameAssignment_2_1)
	{ after(grammarAccess.getTypeDeclContextAccess().getTypeNameAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Where__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Where__Group__0__Impl
	rule__Where__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereAccess().getWhereKeyword_0()); }
	'where'
	{ after(grammarAccess.getWhereAccess().getWhereKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Where__Group__1__Impl
	rule__Where__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereAccess().getExpressionsAssignment_1()); }
	(rule__Where__ExpressionsAssignment_1)
	{ after(grammarAccess.getWhereAccess().getExpressionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Where__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereAccess().getGroup_2()); }
	(rule__Where__Group_2__0)*
	{ after(grammarAccess.getWhereAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Where__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Where__Group_2__0__Impl
	rule__Where__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereAccess().getSemicolonKeyword_2_0()); }
	';'
	{ after(grammarAccess.getWhereAccess().getSemicolonKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Where__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereAccess().getExpressionsAssignment_2_1()); }
	(rule__Where__ExpressionsAssignment_2_1)
	{ after(grammarAccess.getWhereAccess().getExpressionsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Datatype__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Datatype__Group__0__Impl
	rule__Datatype__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeAccess().getDatatypeKeyword_0()); }
	'Datatype'
	{ after(grammarAccess.getDatatypeAccess().getDatatypeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Datatype__Group__1__Impl
	rule__Datatype__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeAccess().getNameAssignment_1()); }
	(rule__Datatype__NameAssignment_1)
	{ after(grammarAccess.getDatatypeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Datatype__Group__2__Impl
	rule__Datatype__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeAccess().getRawContextAssignment_2()); }
	(rule__Datatype__RawContextAssignment_2)?
	{ after(grammarAccess.getDatatypeAccess().getRawContextAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Datatype__Group__3__Impl
	rule__Datatype__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getDatatypeAccess().getGroup_3()); }
		(rule__Datatype__Group_3__0)
		{ after(grammarAccess.getDatatypeAccess().getGroup_3()); }
	)
	(
		{ before(grammarAccess.getDatatypeAccess().getGroup_3()); }
		(rule__Datatype__Group_3__0)*
		{ after(grammarAccess.getDatatypeAccess().getGroup_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Datatype__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeAccess().getBlockAssignment_4()); }
	(rule__Datatype__BlockAssignment_4)
	{ after(grammarAccess.getDatatypeAccess().getBlockAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Datatype__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Datatype__Group_3__0__Impl
	rule__Datatype__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeAccess().getVerticalLineKeyword_3_0()); }
	'|'
	{ after(grammarAccess.getDatatypeAccess().getVerticalLineKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Datatype__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeAccess().getConstructorsAssignment_3_1()); }
	(rule__Datatype__ConstructorsAssignment_3_1)
	{ after(grammarAccess.getDatatypeAccess().getConstructorsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DatatypeConstructor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DatatypeConstructor__Group__0__Impl
	rule__DatatypeConstructor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeConstructor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeConstructorAccess().getNameAssignment_0()); }
	(rule__DatatypeConstructor__NameAssignment_0)
	{ after(grammarAccess.getDatatypeConstructorAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeConstructor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DatatypeConstructor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeConstructor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeConstructorAccess().getGroup_1()); }
	(rule__DatatypeConstructor__Group_1__0)?
	{ after(grammarAccess.getDatatypeConstructorAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DatatypeConstructor__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DatatypeConstructor__Group_1__0__Impl
	rule__DatatypeConstructor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeConstructor__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeConstructorAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getDatatypeConstructorAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeConstructor__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DatatypeConstructor__Group_1__1__Impl
	rule__DatatypeConstructor__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeConstructor__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeConstructorAccess().getDeconsAssignment_1_1()); }
	(rule__DatatypeConstructor__DeconsAssignment_1_1)
	{ after(grammarAccess.getDatatypeConstructorAccess().getDeconsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeConstructor__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DatatypeConstructor__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeConstructor__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeConstructorAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getDatatypeConstructorAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Extend__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Extend__Group__0__Impl
	rule__Extend__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendAccess().getExtendKeyword_0()); }
	'Extend'
	{ after(grammarAccess.getExtendAccess().getExtendKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Extend__Group__1__Impl
	rule__Extend__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendAccess().getExtendedClassAssignment_1()); }
	(rule__Extend__ExtendedClassAssignment_1)
	{ after(grammarAccess.getExtendAccess().getExtendedClassAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Extend__Group__2__Impl
	rule__Extend__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getExtendAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Extend__Group__3__Impl
	rule__Extend__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendAccess().getNameAssignment_3()); }
	(rule__Extend__NameAssignment_3)
	{ after(grammarAccess.getExtendAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Extend__Group__4__Impl
	rule__Extend__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getExtendAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Extend__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExtendAccess().getBlockAssignment_5()); }
	(rule__Extend__BlockAssignment_5)
	{ after(grammarAccess.getExtendAccess().getBlockAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BSharpBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BSharpBlock__Group__0__Impl
	rule__BSharpBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BSharpBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBSharpBlockAccess().getBSharpBlockAction_0()); }
	()
	{ after(grammarAccess.getBSharpBlockAccess().getBSharpBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BSharpBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BSharpBlock__Group__1__Impl
	rule__BSharpBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BSharpBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBSharpBlockAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getBSharpBlockAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BSharpBlock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BSharpBlock__Group__2__Impl
	rule__BSharpBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BSharpBlock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBSharpBlockAccess().getAlternatives_2()); }
	(rule__BSharpBlock__Alternatives_2)*
	{ after(grammarAccess.getBSharpBlockAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BSharpBlock__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BSharpBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BSharpBlock__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBSharpBlockAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getBSharpBlockAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDecl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDecl__Group__0__Impl
	rule__FunctionDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclAccess().getNameAssignment_0()); }
	(rule__FunctionDecl__NameAssignment_0)
	{ after(grammarAccess.getFunctionDeclAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDecl__Group__1__Impl
	rule__FunctionDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclAccess().getContextAssignment_1()); }
	(rule__FunctionDecl__ContextAssignment_1)?
	{ after(grammarAccess.getFunctionDeclAccess().getContextAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDecl__Group__2__Impl
	rule__FunctionDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getFunctionDeclAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDecl__Group__3__Impl
	rule__FunctionDecl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclAccess().getVarListAssignment_3()); }
	(rule__FunctionDecl__VarListAssignment_3)?
	{ after(grammarAccess.getFunctionDeclAccess().getVarListAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDecl__Group__4__Impl
	rule__FunctionDecl__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getFunctionDeclAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDecl__Group__5__Impl
	rule__FunctionDecl__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclAccess().getColonKeyword_5()); }
	':'
	{ after(grammarAccess.getFunctionDeclAccess().getColonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDecl__Group__6__Impl
	rule__FunctionDecl__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclAccess().getReturnTypeAssignment_6()); }
	(rule__FunctionDecl__ReturnTypeAssignment_6)
	{ after(grammarAccess.getFunctionDeclAccess().getReturnTypeAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDecl__Group__7__Impl
	rule__FunctionDecl__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclAccess().getInfixAssignment_7()); }
	(rule__FunctionDecl__InfixAssignment_7)?
	{ after(grammarAccess.getFunctionDeclAccess().getInfixAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDecl__Group__8__Impl
	rule__FunctionDecl__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclAccess().getPrecedenceAssignment_8()); }
	(rule__FunctionDecl__PrecedenceAssignment_8)?
	{ after(grammarAccess.getFunctionDeclAccess().getPrecedenceAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDecl__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDeclAccess().getExprAssignment_9()); }
	(rule__FunctionDecl__ExprAssignment_9)
	{ after(grammarAccess.getFunctionDeclAccess().getExprAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MatchStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatchStatement__Group__0__Impl
	rule__MatchStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchStatementAccess().getMatchKeyword_0()); }
	'match'
	{ after(grammarAccess.getMatchStatementAccess().getMatchKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatchStatement__Group__1__Impl
	rule__MatchStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchStatementAccess().getMatchAssignment_1()); }
	(rule__MatchStatement__MatchAssignment_1)
	{ after(grammarAccess.getMatchStatementAccess().getMatchAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatchStatement__Group__2__Impl
	rule__MatchStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchStatementAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getMatchStatementAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatchStatement__Group__3__Impl
	rule__MatchStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchStatementAccess().getInductCaseAssignment_3()); }
	(rule__MatchStatement__InductCaseAssignment_3)
	{ after(grammarAccess.getMatchStatementAccess().getInductCaseAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatchStatement__Group__4__Impl
	rule__MatchStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchStatementAccess().getInductCaseAssignment_4()); }
	(rule__MatchStatement__InductCaseAssignment_4)*
	{ after(grammarAccess.getMatchStatementAccess().getInductCaseAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatchStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchStatementAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getMatchStatementAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MatchCase__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatchCase__Group__0__Impl
	rule__MatchCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchCaseAccess().getVerticalLineKeyword_0()); }
	'|'
	{ after(grammarAccess.getMatchCaseAccess().getVerticalLineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatchCase__Group__1__Impl
	rule__MatchCase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchCaseAccess().getDeconNameAssignment_1()); }
	(rule__MatchCase__DeconNameAssignment_1)
	{ after(grammarAccess.getMatchCaseAccess().getDeconNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatchCase__Group__2__Impl
	rule__MatchCase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchCaseAccess().getGroup_2()); }
	(rule__MatchCase__Group_2__0)?
	{ after(grammarAccess.getMatchCaseAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatchCase__Group__3__Impl
	rule__MatchCase__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchCaseAccess().getColonKeyword_3()); }
	':'
	{ after(grammarAccess.getMatchCaseAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatchCase__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchCaseAccess().getExprAssignment_4()); }
	(rule__MatchCase__ExprAssignment_4)
	{ after(grammarAccess.getMatchCaseAccess().getExprAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MatchCase__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatchCase__Group_2__0__Impl
	rule__MatchCase__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchCaseAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getMatchCaseAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatchCase__Group_2__1__Impl
	rule__MatchCase__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchCaseAccess().getVariablesAssignment_2_1()); }
	(rule__MatchCase__VariablesAssignment_2_1)
	{ after(grammarAccess.getMatchCaseAccess().getVariablesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatchCase__Group_2__2__Impl
	rule__MatchCase__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchCaseAccess().getGroup_2_2()); }
	(rule__MatchCase__Group_2_2__0)*
	{ after(grammarAccess.getMatchCaseAccess().getGroup_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatchCase__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchCaseAccess().getRightParenthesisKeyword_2_3()); }
	')'
	{ after(grammarAccess.getMatchCaseAccess().getRightParenthesisKeyword_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MatchCase__Group_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatchCase__Group_2_2__0__Impl
	rule__MatchCase__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__Group_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchCaseAccess().getCommaKeyword_2_2_0()); }
	','
	{ after(grammarAccess.getMatchCaseAccess().getCommaKeyword_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__Group_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MatchCase__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__Group_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMatchCaseAccess().getVariablesAssignment_2_2_1()); }
	(rule__MatchCase__VariablesAssignment_2_2_1)
	{ after(grammarAccess.getMatchCaseAccess().getVariablesAssignment_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TheoremBody__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TheoremBody__Group__0__Impl
	rule__TheoremBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TheoremBody__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTheoremBodyAccess().getTheoremsKeyword_0()); }
	'Theorems'
	{ after(grammarAccess.getTheoremBodyAccess().getTheoremsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TheoremBody__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TheoremBody__Group__1__Impl
	rule__TheoremBody__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TheoremBody__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTheoremBodyAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getTheoremBodyAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TheoremBody__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TheoremBody__Group__2__Impl
	rule__TheoremBody__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TheoremBody__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getTheoremBodyAccess().getTheoremDeclAssignment_2()); }
		(rule__TheoremBody__TheoremDeclAssignment_2)
		{ after(grammarAccess.getTheoremBodyAccess().getTheoremDeclAssignment_2()); }
	)
	(
		{ before(grammarAccess.getTheoremBodyAccess().getTheoremDeclAssignment_2()); }
		(rule__TheoremBody__TheoremDeclAssignment_2)*
		{ after(grammarAccess.getTheoremBodyAccess().getTheoremDeclAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TheoremBody__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TheoremBody__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TheoremBody__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTheoremBodyAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getTheoremBodyAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TheoremDecl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TheoremDecl__Group__0__Impl
	rule__TheoremDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TheoremDecl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTheoremDeclAccess().getNameAssignment_0()); }
	(rule__TheoremDecl__NameAssignment_0)
	{ after(grammarAccess.getTheoremDeclAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TheoremDecl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TheoremDecl__Group__1__Impl
	rule__TheoremDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TheoremDecl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTheoremDeclAccess().getExprAssignment_1()); }
	(rule__TheoremDecl__ExprAssignment_1)
	{ after(grammarAccess.getTheoremDeclAccess().getExprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TheoremDecl__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TheoremDecl__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TheoremDecl__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTheoremDeclAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getTheoremDeclAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypedVariableList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypedVariableList__Group__0__Impl
	rule__TypedVariableList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariableList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypedVariableListAccess().getVariablesOfTypeAssignment_0()); }
	(rule__TypedVariableList__VariablesOfTypeAssignment_0)
	{ after(grammarAccess.getTypedVariableListAccess().getVariablesOfTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariableList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypedVariableList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariableList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypedVariableListAccess().getGroup_1()); }
	(rule__TypedVariableList__Group_1__0)*
	{ after(grammarAccess.getTypedVariableListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypedVariableList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypedVariableList__Group_1__0__Impl
	rule__TypedVariableList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariableList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypedVariableListAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getTypedVariableListAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariableList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypedVariableList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariableList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypedVariableListAccess().getVariablesOfTypeAssignment_1_1()); }
	(rule__TypedVariableList__VariablesOfTypeAssignment_1_1)
	{ after(grammarAccess.getTypedVariableListAccess().getVariablesOfTypeAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableTyping__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableTyping__Group__0__Impl
	rule__VariableTyping__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableTyping__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableTypingAccess().getTypeVarAssignment_0()); }
	(rule__VariableTyping__TypeVarAssignment_0)
	{ after(grammarAccess.getVariableTypingAccess().getTypeVarAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableTyping__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableTyping__Group__1__Impl
	rule__VariableTyping__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableTyping__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableTypingAccess().getGroup_1()); }
	(rule__VariableTyping__Group_1__0)*
	{ after(grammarAccess.getVariableTypingAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableTyping__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableTyping__Group__2__Impl
	rule__VariableTyping__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableTyping__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableTypingAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getVariableTypingAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableTyping__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableTyping__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableTyping__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableTypingAccess().getTypeAssignment_3()); }
	(rule__VariableTyping__TypeAssignment_3)
	{ after(grammarAccess.getVariableTypingAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableTyping__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableTyping__Group_1__0__Impl
	rule__VariableTyping__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableTyping__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableTypingAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getVariableTypingAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableTyping__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableTyping__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableTyping__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableTypingAccess().getTypeVarAssignment_1_1()); }
	(rule__VariableTyping__TypeVarAssignment_1_1)
	{ after(grammarAccess.getVariableTypingAccess().getTypeVarAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Lambda__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lambda__Group__0__Impl
	rule__Lambda__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaAccess().getQTypeAssignment_0()); }
	(rule__Lambda__QTypeAssignment_0)
	{ after(grammarAccess.getLambdaAccess().getQTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lambda__Group__1__Impl
	rule__Lambda__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaAccess().getContextAssignment_1()); }
	(rule__Lambda__ContextAssignment_1)?
	{ after(grammarAccess.getLambdaAccess().getContextAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lambda__Group__2__Impl
	rule__Lambda__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaAccess().getVarListAssignment_2()); }
	(rule__Lambda__VarListAssignment_2)
	{ after(grammarAccess.getLambdaAccess().getVarListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lambda__Group__3__Impl
	rule__Lambda__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaAccess().getVerticalLineKeyword_3()); }
	'|'
	{ after(grammarAccess.getLambdaAccess().getVerticalLineKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Lambda__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLambdaAccess().getExprAssignment_4()); }
	(rule__Lambda__ExprAssignment_4)
	{ after(grammarAccess.getLambdaAccess().getExprAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Quantifier__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Quantifier__Group__0__Impl
	rule__Quantifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuantifierAccess().getQTypeAssignment_0()); }
	(rule__Quantifier__QTypeAssignment_0)
	{ after(grammarAccess.getQuantifierAccess().getQTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Quantifier__Group__1__Impl
	rule__Quantifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuantifierAccess().getContextAssignment_1()); }
	(rule__Quantifier__ContextAssignment_1)?
	{ after(grammarAccess.getQuantifierAccess().getContextAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Quantifier__Group__2__Impl
	rule__Quantifier__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuantifierAccess().getVarListAssignment_2()); }
	(rule__Quantifier__VarListAssignment_2)
	{ after(grammarAccess.getQuantifierAccess().getVarListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Quantifier__Group__3__Impl
	rule__Quantifier__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuantifierAccess().getMiddleDotKeyword_3()); }
	'\u00B7'
	{ after(grammarAccess.getQuantifierAccess().getMiddleDotKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Quantifier__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQuantifierAccess().getExprAssignment_4()); }
	(rule__Quantifier__ExprAssignment_4)
	{ after(grammarAccess.getQuantifierAccess().getExprAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Prefix__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prefix__Group__0__Impl
	rule__Prefix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixAccess().getNameAssignment_0()); }
	(rule__Prefix__NameAssignment_0)
	{ after(grammarAccess.getPrefixAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Prefix__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixAccess().getElemAssignment_1()); }
	(rule__Prefix__ElemAssignment_1)
	{ after(grammarAccess.getPrefixAccess().getElemAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Infix__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Infix__Group__0__Impl
	rule__Infix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Infix__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInfixAccess().getElementParserRuleCall_0()); }
	ruleElement
	{ after(grammarAccess.getInfixAccess().getElementParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Infix__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Infix__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Infix__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInfixAccess().getGroup_1()); }
	(rule__Infix__Group_1__0)*
	{ after(grammarAccess.getInfixAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Infix__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Infix__Group_1__0__Impl
	rule__Infix__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Infix__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInfixAccess().getInfixLeftAction_1_0()); }
	()
	{ after(grammarAccess.getInfixAccess().getInfixLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Infix__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Infix__Group_1__1__Impl
	rule__Infix__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Infix__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInfixAccess().getAlternatives_1_1()); }
	(rule__Infix__Alternatives_1_1)
	{ after(grammarAccess.getInfixAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Infix__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Infix__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Infix__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInfixAccess().getRightAssignment_1_2()); }
	(rule__Infix__RightAssignment_1_2)
	{ after(grammarAccess.getInfixAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Bracket__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bracket__Group__0__Impl
	rule__Bracket__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bracket__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBracketAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getBracketAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bracket__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bracket__Group__1__Impl
	rule__Bracket__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Bracket__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBracketAccess().getChildAssignment_1()); }
	(rule__Bracket__ChildAssignment_1)
	{ after(grammarAccess.getBracketAccess().getChildAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bracket__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bracket__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bracket__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBracketAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getBracketAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_1__0__Impl
	rule__FunctionCall__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getAlternatives_1_0()); }
	(rule__FunctionCall__Alternatives_1_0)
	{ after(grammarAccess.getFunctionCallAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_1__1__Impl
	rule__FunctionCall__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getContextAssignment_1_1()); }
	(rule__FunctionCall__ContextAssignment_1_1)?
	{ after(grammarAccess.getFunctionCallAccess().getContextAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getFuncCallArgsAssignment_1_2()); }
	(rule__FunctionCall__FuncCallArgsAssignment_1_2)*
	{ after(grammarAccess.getFunctionCallAccess().getFuncCallArgsAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncCallArgs__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCallArgs__Group__0__Impl
	rule__FuncCallArgs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCallArgs__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallArgsAccess().getFuncCallArgsAction_0()); }
	()
	{ after(grammarAccess.getFuncCallArgsAccess().getFuncCallArgsAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCallArgs__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCallArgs__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCallArgs__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallArgsAccess().getGroup_1()); }
	(rule__FuncCallArgs__Group_1__0)
	{ after(grammarAccess.getFuncCallArgsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncCallArgs__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCallArgs__Group_1__0__Impl
	rule__FuncCallArgs__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCallArgs__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallArgsAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getFuncCallArgsAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCallArgs__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCallArgs__Group_1__1__Impl
	rule__FuncCallArgs__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCallArgs__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallArgsAccess().getArgumentsAssignment_1_1()); }
	(rule__FuncCallArgs__ArgumentsAssignment_1_1)?
	{ after(grammarAccess.getFuncCallArgsAccess().getArgumentsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCallArgs__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCallArgs__Group_1__2__Impl
	rule__FuncCallArgs__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCallArgs__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallArgsAccess().getGroup_1_2()); }
	(rule__FuncCallArgs__Group_1_2__0)*
	{ after(grammarAccess.getFuncCallArgsAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCallArgs__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCallArgs__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCallArgs__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallArgsAccess().getRightParenthesisKeyword_1_3()); }
	')'
	{ after(grammarAccess.getFuncCallArgsAccess().getRightParenthesisKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncCallArgs__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCallArgs__Group_1_2__0__Impl
	rule__FuncCallArgs__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCallArgs__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallArgsAccess().getCommaKeyword_1_2_0()); }
	','
	{ after(grammarAccess.getFuncCallArgsAccess().getCommaKeyword_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCallArgs__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCallArgs__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCallArgs__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallArgsAccess().getArgumentsAssignment_1_2_1()); }
	(rule__FuncCallArgs__ArgumentsAssignment_1_2_1)
	{ after(grammarAccess.getFuncCallArgsAccess().getArgumentsAssignment_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfElse__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group__0__Impl
	rule__IfElse__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfElseAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group__1__Impl
	rule__IfElse__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getConditionAssignment_1()); }
	(rule__IfElse__ConditionAssignment_1)
	{ after(grammarAccess.getIfElseAccess().getConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group__2__Impl
	rule__IfElse__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getIfElseAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group__3__Impl
	rule__IfElse__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getIfTrueExprAssignment_3()); }
	(rule__IfElse__IfTrueExprAssignment_3)
	{ after(grammarAccess.getIfElseAccess().getIfTrueExprAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group__4__Impl
	rule__IfElse__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getIfElseAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group__5__Impl
	rule__IfElse__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getElseKeyword_5()); }
	'else'
	{ after(grammarAccess.getIfElseAccess().getElseKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group__6__Impl
	rule__IfElse__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getLeftCurlyBracketKeyword_6()); }
	'{'
	{ after(grammarAccess.getIfElseAccess().getLeftCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group__7__Impl
	rule__IfElse__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getIfFalseExprAssignment_7()); }
	(rule__IfElse__IfFalseExprAssignment_7)
	{ after(grammarAccess.getIfElseAccess().getIfFalseExprAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElse__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseAccess().getRightCurlyBracketKeyword_8()); }
	'}'
	{ after(grammarAccess.getIfElseAccess().getRightCurlyBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClassVarDecl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassVarDecl__Group__0__Impl
	rule__ClassVarDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassVarDecl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassVarDeclAccess().getOwnerTypeAssignment_0()); }
	(rule__ClassVarDecl__OwnerTypeAssignment_0)
	{ after(grammarAccess.getClassVarDeclAccess().getOwnerTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassVarDecl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassVarDecl__Group__1__Impl
	rule__ClassVarDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassVarDecl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassVarDeclAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getClassVarDeclAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassVarDecl__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassVarDecl__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassVarDecl__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassVarDeclAccess().getTypeInstAssignment_2()); }
	(rule__ClassVarDecl__TypeInstAssignment_2)
	{ after(grammarAccess.getClassVarDeclAccess().getTypeInstAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WrappedInfix__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WrappedInfix__Group__0__Impl
	rule__WrappedInfix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WrappedInfix__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWrappedInfixAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getWrappedInfixAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WrappedInfix__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WrappedInfix__Group__1__Impl
	rule__WrappedInfix__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WrappedInfix__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWrappedInfixAccess().getAlternatives_1()); }
	(rule__WrappedInfix__Alternatives_1)
	{ after(grammarAccess.getWrappedInfixAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WrappedInfix__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WrappedInfix__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WrappedInfix__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWrappedInfixAccess().getRightSquareBracketKeyword_2()); }
	']'
	{ after(grammarAccess.getWrappedInfixAccess().getRightSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Instance__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instance__Group__0__Impl
	rule__Instance__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstanceAccess().getInstanceKeyword_0()); }
	'Instance'
	{ after(grammarAccess.getInstanceAccess().getInstanceKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instance__Group__1__Impl
	rule__Instance__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstanceAccess().getClassNameAssignment_1()); }
	(rule__Instance__ClassNameAssignment_1)
	{ after(grammarAccess.getInstanceAccess().getClassNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instance__Group__2__Impl
	rule__Instance__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstanceAccess().getLessThanSignKeyword_2()); }
	'<'
	{ after(grammarAccess.getInstanceAccess().getLessThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instance__Group__3__Impl
	rule__Instance__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getInstanceAccess().getContextAssignment_3()); }
		(rule__Instance__ContextAssignment_3)
		{ after(grammarAccess.getInstanceAccess().getContextAssignment_3()); }
	)
	(
		{ before(grammarAccess.getInstanceAccess().getContextAssignment_3()); }
		(rule__Instance__ContextAssignment_3)*
		{ after(grammarAccess.getInstanceAccess().getContextAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instance__Group__4__Impl
	rule__Instance__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstanceAccess().getGreaterThanSignKeyword_4()); }
	'>'
	{ after(grammarAccess.getInstanceAccess().getGreaterThanSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instance__Group__5__Impl
	rule__Instance__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstanceAccess().getLeftParenthesisKeyword_5()); }
	'('
	{ after(grammarAccess.getInstanceAccess().getLeftParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instance__Group__6__Impl
	rule__Instance__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstanceAccess().getArgumentsAssignment_6()); }
	(rule__Instance__ArgumentsAssignment_6)?
	{ after(grammarAccess.getInstanceAccess().getArgumentsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instance__Group__7__Impl
	rule__Instance__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstanceAccess().getGroup_7()); }
	(rule__Instance__Group_7__0)*
	{ after(grammarAccess.getInstanceAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instance__Group__8__Impl
	rule__Instance__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstanceAccess().getRightParenthesisKeyword_8()); }
	')'
	{ after(grammarAccess.getInstanceAccess().getRightParenthesisKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instance__Group__9__Impl
	rule__Instance__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstanceAccess().getNameAssignment_9()); }
	(rule__Instance__NameAssignment_9)?
	{ after(grammarAccess.getInstanceAccess().getNameAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instance__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstanceAccess().getGroup_10()); }
	(rule__Instance__Group_10__0)*
	{ after(grammarAccess.getInstanceAccess().getGroup_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Instance__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instance__Group_7__0__Impl
	rule__Instance__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstanceAccess().getCommaKeyword_7_0()); }
	','
	{ after(grammarAccess.getInstanceAccess().getCommaKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instance__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstanceAccess().getArgumentsAssignment_7_1()); }
	(rule__Instance__ArgumentsAssignment_7_1)
	{ after(grammarAccess.getInstanceAccess().getArgumentsAssignment_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Instance__Group_10__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instance__Group_10__0__Impl
	rule__Instance__Group_10__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group_10__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstanceAccess().getLeftParenthesisKeyword_10_0()); }
	'('
	{ after(grammarAccess.getInstanceAccess().getLeftParenthesisKeyword_10_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group_10__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instance__Group_10__1__Impl
	rule__Instance__Group_10__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group_10__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstanceAccess().getReferencingFuncsAssignment_10_1()); }
	(rule__Instance__ReferencingFuncsAssignment_10_1)
	{ after(grammarAccess.getInstanceAccess().getReferencingFuncsAssignment_10_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group_10__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instance__Group_10__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__Group_10__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstanceAccess().getRightParenthesisKeyword_10_2()); }
	')'
	{ after(grammarAccess.getInstanceAccess().getRightParenthesisKeyword_10_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReferencingFunc__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReferencingFunc__Group__0__Impl
	rule__ReferencingFunc__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferencingFunc__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferencingFuncAccess().getNameAssignment_0()); }
	(rule__ReferencingFunc__NameAssignment_0)
	{ after(grammarAccess.getReferencingFuncAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferencingFunc__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReferencingFunc__Group__1__Impl
	rule__ReferencingFunc__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferencingFunc__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferencingFuncAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getReferencingFuncAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferencingFunc__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReferencingFunc__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferencingFunc__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferencingFuncAccess().getReferencedFuncAssignment_2()); }
	(rule__ReferencingFunc__ReferencedFuncAssignment_2)
	{ after(grammarAccess.getReferencingFuncAccess().getReferencedFuncAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TopLevel__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTopLevelAccess().getNameQualifiedNameParserRuleCall_1_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getTopLevelAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevel__TopLevelFileAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTopLevelAccess().getTopLevelFileTopLevelFileParserRuleCall_2_0()); }
		ruleTopLevelFile
		{ after(grammarAccess.getTopLevelAccess().getTopLevelFileTopLevelFileParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevelFile__NoImportElementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTopLevelFileAccess().getNoImportElementsTopLevelInstanceParserRuleCall_1_0()); }
		ruleTopLevelInstance
		{ after(grammarAccess.getTopLevelFileAccess().getNoImportElementsTopLevelInstanceParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevelFile__TopLevelImportsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTopLevelFileAccess().getTopLevelImportsTopLevelImportParserRuleCall_2_0()); }
		ruleTopLevelImport
		{ after(grammarAccess.getTopLevelFileAccess().getTopLevelImportsTopLevelImportParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevelImport__ImportsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTopLevelImportAccess().getImportsImportParserRuleCall_0_0()); }
		ruleImport
		{ after(grammarAccess.getTopLevelImportAccess().getImportsImportParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevelImport__BodyElementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTopLevelImportAccess().getBodyElementsTopLevelInstanceParserRuleCall_1_0()); }
		ruleTopLevelInstance
		{ after(grammarAccess.getTopLevelImportAccess().getBodyElementsTopLevelInstanceParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalImport__ProjectAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGlobalImportAccess().getProjectQualifiedNameParserRuleCall_1_0()); }
		ruleQualifiedName
		{ after(grammarAccess.getGlobalImportAccess().getProjectQualifiedNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalImport__FileImportsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGlobalImportAccess().getFileImportsFileImportParserRuleCall_3_0()); }
		ruleFileImport
		{ after(grammarAccess.getGlobalImportAccess().getFileImportsFileImportParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FileImport__FileReferenceAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFileImportAccess().getFileReferenceTopLevelFileCrossReference_0_0()); }
		(
			{ before(grammarAccess.getFileImportAccess().getFileReferenceTopLevelFileIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFileImportAccess().getFileReferenceTopLevelFileIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getFileImportAccess().getFileReferenceTopLevelFileCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FileImport__TypeAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFileImportAccess().getTypeTopLevelInstanceCrossReference_1_1_1_0()); }
		(
			{ before(grammarAccess.getFileImportAccess().getTypeTopLevelInstanceIDTerminalRuleCall_1_1_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFileImportAccess().getTypeTopLevelInstanceIDTerminalRuleCall_1_1_1_0_1()); }
		)
		{ after(grammarAccess.getFileImportAccess().getTypeTopLevelInstanceCrossReference_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalImport__FileImportsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLocalImportAccess().getFileImportsFileImportParserRuleCall_1_0()); }
		ruleFileImport
		{ after(grammarAccess.getLocalImportAccess().getFileImportsFileImportParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getClassAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__RawContextAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getRawContextPolyContextParserRuleCall_2_0()); }
		rulePolyContext
		{ after(grammarAccess.getClassAccess().getRawContextPolyContextParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__InstNameAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getInstNameInstNameParserRuleCall_3_1_0()); }
		ruleInstName
		{ after(grammarAccess.getClassAccess().getInstNameInstNameParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__SupertypesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getSupertypesSuperTypeListParserRuleCall_4_0()); }
		ruleSuperTypeList
		{ after(grammarAccess.getClassAccess().getSupertypesSuperTypeListParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__VarListAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getVarListTypedVariableListParserRuleCall_5_1_0()); }
		ruleTypedVariableList
		{ after(grammarAccess.getClassAccess().getVarListTypedVariableListParserRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__WhereAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getWhereWhereParserRuleCall_6_0()); }
		ruleWhere
		{ after(grammarAccess.getClassAccess().getWhereWhereParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__BlockAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassAccess().getBlockBSharpBlockParserRuleCall_8_0()); }
		ruleBSharpBlock
		{ after(grammarAccess.getClassAccess().getBlockBSharpBlockParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InstName__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstNameAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getInstNameAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyContext__PolyTypesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolyContextAccess().getPolyTypesPolyTypeParserRuleCall_1_0()); }
		rulePolyType
		{ after(grammarAccess.getPolyContextAccess().getPolyTypesPolyTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyType__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolyTypeAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getPolyTypeAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyType__SuperTypesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolyTypeAccess().getSuperTypesClassDeclCrossReference_1_1_0()); }
		(
			{ before(grammarAccess.getPolyTypeAccess().getSuperTypesClassDeclQualifiedNameParserRuleCall_1_1_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getPolyTypeAccess().getSuperTypesClassDeclQualifiedNameParserRuleCall_1_1_0_1()); }
		)
		{ after(grammarAccess.getPolyTypeAccess().getSuperTypesClassDeclCrossReference_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyType__SuperTypesAssignment_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolyTypeAccess().getSuperTypesClassDeclCrossReference_1_2_1_0()); }
		(
			{ before(grammarAccess.getPolyTypeAccess().getSuperTypesClassDeclQualifiedNameParserRuleCall_1_2_1_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getPolyTypeAccess().getSuperTypesClassDeclQualifiedNameParserRuleCall_1_2_1_0_1()); }
		)
		{ after(grammarAccess.getPolyTypeAccess().getSuperTypesClassDeclCrossReference_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperTypeList__SuperTypesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSuperTypeListAccess().getSuperTypesConstructedTypeParserRuleCall_1_0()); }
		ruleConstructedType
		{ after(grammarAccess.getSuperTypeListAccess().getSuperTypesConstructedTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SuperTypeList__SuperTypesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSuperTypeListAccess().getSuperTypesConstructedTypeParserRuleCall_2_1_0()); }
		ruleConstructedType
		{ after(grammarAccess.getSuperTypeListAccess().getSuperTypesConstructedTypeParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructedType__ConstructorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstructedTypeAccess().getConstructorBuiltinTypeInfixOpParserRuleCall_1_1_0()); }
		ruleBuiltinTypeInfixOp
		{ after(grammarAccess.getConstructedTypeAccess().getConstructorBuiltinTypeInfixOpParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructedType__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstructedTypeAccess().getRightBuilderElemParserRuleCall_1_2_0()); }
		ruleBuilderElem
		{ after(grammarAccess.getConstructedTypeAccess().getRightBuilderElemParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeConstructor__TypeNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeConstructorAccess().getTypeNameGenNameCrossReference_0_0()); }
		(
			{ before(grammarAccess.getTypeConstructorAccess().getTypeNameGenNameQualifiedNameParserRuleCall_0_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getTypeConstructorAccess().getTypeNameGenNameQualifiedNameParserRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getTypeConstructorAccess().getTypeNameGenNameCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeConstructor__ContextAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeConstructorAccess().getContextTypeDeclContextParserRuleCall_1_0()); }
		ruleTypeDeclContext
		{ after(grammarAccess.getTypeConstructorAccess().getContextTypeDeclContextParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypePowerSet__ChildAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypePowerSetAccess().getChildConstructedTypeParserRuleCall_2_0()); }
		ruleConstructedType
		{ after(grammarAccess.getTypePowerSetAccess().getChildConstructedTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeConstrBracket__ChildAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeConstrBracketAccess().getChildConstructedTypeParserRuleCall_1_0()); }
		ruleConstructedType
		{ after(grammarAccess.getTypeConstrBracketAccess().getChildConstructedTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__TypeNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeDeclContextAccess().getTypeNameConstructedTypeParserRuleCall_1_0()); }
		ruleConstructedType
		{ after(grammarAccess.getTypeDeclContextAccess().getTypeNameConstructedTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDeclContext__TypeNameAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeDeclContextAccess().getTypeNameConstructedTypeParserRuleCall_2_1_0()); }
		ruleConstructedType
		{ after(grammarAccess.getTypeDeclContextAccess().getTypeNameConstructedTypeParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__ExpressionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhereAccess().getExpressionsRootExpressionParserRuleCall_1_0()); }
		ruleRootExpression
		{ after(grammarAccess.getWhereAccess().getExpressionsRootExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Where__ExpressionsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhereAccess().getExpressionsRootExpressionParserRuleCall_2_1_0()); }
		ruleRootExpression
		{ after(grammarAccess.getWhereAccess().getExpressionsRootExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDatatypeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__RawContextAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypeAccess().getRawContextPolyContextParserRuleCall_2_0()); }
		rulePolyContext
		{ after(grammarAccess.getDatatypeAccess().getRawContextPolyContextParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__ConstructorsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypeAccess().getConstructorsDatatypeConstructorParserRuleCall_3_1_0()); }
		ruleDatatypeConstructor
		{ after(grammarAccess.getDatatypeAccess().getConstructorsDatatypeConstructorParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Datatype__BlockAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypeAccess().getBlockBSharpBlockParserRuleCall_4_0()); }
		ruleBSharpBlock
		{ after(grammarAccess.getDatatypeAccess().getBlockBSharpBlockParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeConstructor__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypeConstructorAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getDatatypeConstructorAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeConstructor__DeconsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypeConstructorAccess().getDeconsTypedVariableListParserRuleCall_1_1_0()); }
		ruleTypedVariableList
		{ after(grammarAccess.getDatatypeConstructorAccess().getDeconsTypedVariableListParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__ExtendedClassAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtendAccess().getExtendedClassClassDeclCrossReference_1_0()); }
		(
			{ before(grammarAccess.getExtendAccess().getExtendedClassClassDeclQualifiedNameParserRuleCall_1_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getExtendAccess().getExtendedClassClassDeclQualifiedNameParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getExtendAccess().getExtendedClassClassDeclCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtendAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getExtendAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Extend__BlockAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtendAccess().getBlockBSharpBlockParserRuleCall_5_0()); }
		ruleBSharpBlock
		{ after(grammarAccess.getExtendAccess().getBlockBSharpBlockParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BSharpBlock__FunctionsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBSharpBlockAccess().getFunctionsFunctionDeclParserRuleCall_2_0_0()); }
		ruleFunctionDecl
		{ after(grammarAccess.getBSharpBlockAccess().getFunctionsFunctionDeclParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BSharpBlock__TheoremsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBSharpBlockAccess().getTheoremsTheoremBodyParserRuleCall_2_1_0()); }
		ruleTheoremBody
		{ after(grammarAccess.getBSharpBlockAccess().getTheoremsTheoremBodyParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BSharpBlock__TheoremsAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBSharpBlockAccess().getTheoremsInstanceParserRuleCall_2_2_0()); }
		ruleInstance
		{ after(grammarAccess.getBSharpBlockAccess().getTheoremsInstanceParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionDeclAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__ContextAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclAccess().getContextPolyContextParserRuleCall_1_0()); }
		rulePolyContext
		{ after(grammarAccess.getFunctionDeclAccess().getContextPolyContextParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__VarListAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclAccess().getVarListTypedVariableListParserRuleCall_3_0()); }
		ruleTypedVariableList
		{ after(grammarAccess.getFunctionDeclAccess().getVarListTypedVariableListParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__ReturnTypeAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclAccess().getReturnTypeTypeConstructorParserRuleCall_6_0()); }
		ruleTypeConstructor
		{ after(grammarAccess.getFunctionDeclAccess().getReturnTypeTypeConstructorParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__InfixAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclAccess().getInfixINFIXKeyword_7_0()); }
		(
			{ before(grammarAccess.getFunctionDeclAccess().getInfixINFIXKeyword_7_0()); }
			'INFIX'
			{ after(grammarAccess.getFunctionDeclAccess().getInfixINFIXKeyword_7_0()); }
		)
		{ after(grammarAccess.getFunctionDeclAccess().getInfixINFIXKeyword_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__PrecedenceAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclAccess().getPrecedenceINTTerminalRuleCall_8_0()); }
		RULE_INT
		{ after(grammarAccess.getFunctionDeclAccess().getPrecedenceINTTerminalRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDecl__ExprAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDeclAccess().getExprRootExpressionParserRuleCall_9_0()); }
		ruleRootExpression
		{ after(grammarAccess.getFunctionDeclAccess().getExprRootExpressionParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchStatement__MatchAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMatchStatementAccess().getMatchRootExpressionParserRuleCall_1_0()); }
		ruleRootExpression
		{ after(grammarAccess.getMatchStatementAccess().getMatchRootExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchStatement__InductCaseAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMatchStatementAccess().getInductCaseMatchCaseParserRuleCall_3_0()); }
		ruleMatchCase
		{ after(grammarAccess.getMatchStatementAccess().getInductCaseMatchCaseParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchStatement__InductCaseAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMatchStatementAccess().getInductCaseMatchCaseParserRuleCall_4_0()); }
		ruleMatchCase
		{ after(grammarAccess.getMatchStatementAccess().getInductCaseMatchCaseParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__DeconNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMatchCaseAccess().getDeconNameDatatypeConstructorCrossReference_1_0()); }
		(
			{ before(grammarAccess.getMatchCaseAccess().getDeconNameDatatypeConstructorIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getMatchCaseAccess().getDeconNameDatatypeConstructorIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getMatchCaseAccess().getDeconNameDatatypeConstructorCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__VariablesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMatchCaseAccess().getVariablesTypedVariableParserRuleCall_2_1_0()); }
		ruleTypedVariable
		{ after(grammarAccess.getMatchCaseAccess().getVariablesTypedVariableParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__VariablesAssignment_2_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMatchCaseAccess().getVariablesTypedVariableParserRuleCall_2_2_1_0()); }
		ruleTypedVariable
		{ after(grammarAccess.getMatchCaseAccess().getVariablesTypedVariableParserRuleCall_2_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchCase__ExprAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMatchCaseAccess().getExprRootExpressionParserRuleCall_4_0()); }
		ruleRootExpression
		{ after(grammarAccess.getMatchCaseAccess().getExprRootExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TheoremBody__TheoremDeclAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTheoremBodyAccess().getTheoremDeclTheoremDeclParserRuleCall_2_0()); }
		ruleTheoremDecl
		{ after(grammarAccess.getTheoremBodyAccess().getTheoremDeclTheoremDeclParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TheoremDecl__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTheoremDeclAccess().getNameTHM_NAMEParserRuleCall_0_0()); }
		ruleTHM_NAME
		{ after(grammarAccess.getTheoremDeclAccess().getNameTHM_NAMEParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TheoremDecl__ExprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTheoremDeclAccess().getExprRootExpressionParserRuleCall_1_0()); }
		ruleRootExpression
		{ after(grammarAccess.getTheoremDeclAccess().getExprRootExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariableList__VariablesOfTypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypedVariableListAccess().getVariablesOfTypeVariableTypingParserRuleCall_0_0()); }
		ruleVariableTyping
		{ after(grammarAccess.getTypedVariableListAccess().getVariablesOfTypeVariableTypingParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariableList__VariablesOfTypeAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypedVariableListAccess().getVariablesOfTypeVariableTypingParserRuleCall_1_1_0()); }
		ruleVariableTyping
		{ after(grammarAccess.getTypedVariableListAccess().getVariablesOfTypeVariableTypingParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableTyping__TypeVarAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableTypingAccess().getTypeVarTypedVariableParserRuleCall_0_0()); }
		ruleTypedVariable
		{ after(grammarAccess.getVariableTypingAccess().getTypeVarTypedVariableParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableTyping__TypeVarAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableTypingAccess().getTypeVarTypedVariableParserRuleCall_1_1_0()); }
		ruleTypedVariable
		{ after(grammarAccess.getVariableTypingAccess().getTypeVarTypedVariableParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableTyping__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableTypingAccess().getTypeConstructedTypeParserRuleCall_3_0()); }
		ruleConstructedType
		{ after(grammarAccess.getVariableTypingAccess().getTypeConstructedTypeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedVariable__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypedVariableAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getTypedVariableAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__QTypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLambdaAccess().getQTypeGreekSmallLetterLamdaKeyword_0_0()); }
		(
			{ before(grammarAccess.getLambdaAccess().getQTypeGreekSmallLetterLamdaKeyword_0_0()); }
			'\u03BB'
			{ after(grammarAccess.getLambdaAccess().getQTypeGreekSmallLetterLamdaKeyword_0_0()); }
		)
		{ after(grammarAccess.getLambdaAccess().getQTypeGreekSmallLetterLamdaKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__ContextAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLambdaAccess().getContextPolyContextParserRuleCall_1_0()); }
		rulePolyContext
		{ after(grammarAccess.getLambdaAccess().getContextPolyContextParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__VarListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLambdaAccess().getVarListTypedVariableListParserRuleCall_2_0()); }
		ruleTypedVariableList
		{ after(grammarAccess.getLambdaAccess().getVarListTypedVariableListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Lambda__ExprAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLambdaAccess().getExprRootExpressionParserRuleCall_4_0()); }
		ruleRootExpression
		{ after(grammarAccess.getLambdaAccess().getExprRootExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__QTypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQuantifierAccess().getQTypeAlternatives_0_0()); }
		(rule__Quantifier__QTypeAlternatives_0_0)
		{ after(grammarAccess.getQuantifierAccess().getQTypeAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__ContextAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQuantifierAccess().getContextPolyContextParserRuleCall_1_0()); }
		rulePolyContext
		{ after(grammarAccess.getQuantifierAccess().getContextPolyContextParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__VarListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQuantifierAccess().getVarListTypedVariableListParserRuleCall_2_0()); }
		ruleTypedVariableList
		{ after(grammarAccess.getQuantifierAccess().getVarListTypedVariableListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Quantifier__ExprAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getQuantifierAccess().getExprRootExpressionParserRuleCall_4_0()); }
		ruleRootExpression
		{ after(grammarAccess.getQuantifierAccess().getExprRootExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefixAccess().getNamePrefixBuiltInParserRuleCall_0_0()); }
		rulePrefixBuiltIn
		{ after(grammarAccess.getPrefixAccess().getNamePrefixBuiltInParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__ElemAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefixAccess().getElemElementParserRuleCall_1_0()); }
		ruleElement
		{ after(grammarAccess.getPrefixAccess().getElemElementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Infix__FuncNameAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInfixAccess().getFuncNameFunctionDeclCrossReference_1_1_0_0()); }
		(
			{ before(grammarAccess.getInfixAccess().getFuncNameFunctionDeclIDTerminalRuleCall_1_1_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getInfixAccess().getFuncNameFunctionDeclIDTerminalRuleCall_1_1_0_0_1()); }
		)
		{ after(grammarAccess.getInfixAccess().getFuncNameFunctionDeclCrossReference_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Infix__OpNameAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInfixAccess().getOpNameInbuiltInfixParserRuleCall_1_1_1_0()); }
		ruleInbuiltInfix
		{ after(grammarAccess.getInfixAccess().getOpNameInbuiltInfixParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Infix__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInfixAccess().getRightElementParserRuleCall_1_2_0()); }
		ruleElement
		{ after(grammarAccess.getInfixAccess().getRightElementParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bracket__ChildAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBracketAccess().getChildRootExpressionParserRuleCall_1_0()); }
		ruleRootExpression
		{ after(grammarAccess.getBracketAccess().getChildRootExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__WrappedAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getWrappedWrappedInfixParserRuleCall_0_0()); }
		ruleWrappedInfix
		{ after(grammarAccess.getFunctionCallAccess().getWrappedWrappedInfixParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__TypeInstAssignment_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getTypeInstExpressionVariableCrossReference_1_0_0_0()); }
		(
			{ before(grammarAccess.getFunctionCallAccess().getTypeInstExpressionVariableIDTerminalRuleCall_1_0_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFunctionCallAccess().getTypeInstExpressionVariableIDTerminalRuleCall_1_0_0_0_1()); }
		)
		{ after(grammarAccess.getFunctionCallAccess().getTypeInstExpressionVariableCrossReference_1_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ClassVarDeclAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getClassVarDeclClassVarDeclParserRuleCall_1_0_1_0()); }
		ruleClassVarDecl
		{ after(grammarAccess.getFunctionCallAccess().getClassVarDeclClassVarDeclParserRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ContextAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getContextTypeDeclContextParserRuleCall_1_1_0()); }
		ruleTypeDeclContext
		{ after(grammarAccess.getFunctionCallAccess().getContextTypeDeclContextParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__FuncCallArgsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getFuncCallArgsFuncCallArgsParserRuleCall_1_2_0()); }
		ruleFuncCallArgs
		{ after(grammarAccess.getFunctionCallAccess().getFuncCallArgsFuncCallArgsParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCallArgs__ArgumentsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncCallArgsAccess().getArgumentsRootExpressionParserRuleCall_1_1_0()); }
		ruleRootExpression
		{ after(grammarAccess.getFuncCallArgsAccess().getArgumentsRootExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCallArgs__ArgumentsAssignment_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncCallArgsAccess().getArgumentsRootExpressionParserRuleCall_1_2_1_0()); }
		ruleRootExpression
		{ after(grammarAccess.getFuncCallArgsAccess().getArgumentsRootExpressionParserRuleCall_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__ConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfElseAccess().getConditionRootExpressionParserRuleCall_1_0()); }
		ruleRootExpression
		{ after(grammarAccess.getIfElseAccess().getConditionRootExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__IfTrueExprAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfElseAccess().getIfTrueExprRootExpressionParserRuleCall_3_0()); }
		ruleRootExpression
		{ after(grammarAccess.getIfElseAccess().getIfTrueExprRootExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElse__IfFalseExprAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfElseAccess().getIfFalseExprRootExpressionParserRuleCall_7_0()); }
		ruleRootExpression
		{ after(grammarAccess.getIfElseAccess().getIfFalseExprRootExpressionParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassVarDecl__OwnerTypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassVarDeclAccess().getOwnerTypeGenNameCrossReference_0_0()); }
		(
			{ before(grammarAccess.getClassVarDeclAccess().getOwnerTypeGenNameIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getClassVarDeclAccess().getOwnerTypeGenNameIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getClassVarDeclAccess().getOwnerTypeGenNameCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassVarDecl__TypeInstAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassVarDeclAccess().getTypeInstExpressionVariableCrossReference_2_0()); }
		(
			{ before(grammarAccess.getClassVarDeclAccess().getTypeInstExpressionVariableIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getClassVarDeclAccess().getTypeInstExpressionVariableIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getClassVarDeclAccess().getTypeInstExpressionVariableCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WrappedInfix__InbuiltAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWrappedInfixAccess().getInbuiltInbuiltInfixParserRuleCall_1_0_0()); }
		ruleInbuiltInfix
		{ after(grammarAccess.getWrappedInfixAccess().getInbuiltInbuiltInfixParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WrappedInfix__FuncNameAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWrappedInfixAccess().getFuncNameExpressionVariableCrossReference_1_1_0()); }
		(
			{ before(grammarAccess.getWrappedInfixAccess().getFuncNameExpressionVariableIDTerminalRuleCall_1_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getWrappedInfixAccess().getFuncNameExpressionVariableIDTerminalRuleCall_1_1_0_1()); }
		)
		{ after(grammarAccess.getWrappedInfixAccess().getFuncNameExpressionVariableCrossReference_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__ClassNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstanceAccess().getClassNameBSClassCrossReference_1_0()); }
		(
			{ before(grammarAccess.getInstanceAccess().getClassNameBSClassQualifiedNameParserRuleCall_1_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getInstanceAccess().getClassNameBSClassQualifiedNameParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getInstanceAccess().getClassNameBSClassCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__ContextAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstanceAccess().getContextIClassInstanceCrossReference_3_0()); }
		(
			{ before(grammarAccess.getInstanceAccess().getContextIClassInstanceIDTerminalRuleCall_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getInstanceAccess().getContextIClassInstanceIDTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getInstanceAccess().getContextIClassInstanceCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__ArgumentsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstanceAccess().getArgumentsRootExpressionParserRuleCall_6_0()); }
		ruleRootExpression
		{ after(grammarAccess.getInstanceAccess().getArgumentsRootExpressionParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__ArgumentsAssignment_7_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstanceAccess().getArgumentsRootExpressionParserRuleCall_7_1_0()); }
		ruleRootExpression
		{ after(grammarAccess.getInstanceAccess().getArgumentsRootExpressionParserRuleCall_7_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__NameAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstanceAccess().getNameIDTerminalRuleCall_9_0()); }
		RULE_ID
		{ after(grammarAccess.getInstanceAccess().getNameIDTerminalRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance__ReferencingFuncsAssignment_10_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstanceAccess().getReferencingFuncsReferencingFuncParserRuleCall_10_1_0()); }
		ruleReferencingFunc
		{ after(grammarAccess.getInstanceAccess().getReferencingFuncsReferencingFuncParserRuleCall_10_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferencingFunc__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferencingFuncAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getReferencingFuncAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferencingFunc__ReferencedFuncAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferencingFuncAccess().getReferencedFuncFunctionDeclCrossReference_2_0()); }
		(
			{ before(grammarAccess.getReferencingFuncAccess().getReferencedFuncFunctionDeclIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getReferencingFuncAccess().getReferencedFuncFunctionDeclIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getReferencingFuncAccess().getReferencedFuncFunctionDeclCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'i'..'\uFFDC') ('a'..'z'|'A'..'Z'|'_'|'i'..'\uFFDC'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
