/**
 * generated by Xtext 2.12.0
 */
package org.xtext.sampleProj.mydsl.scoping;

import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.xtext.sampleProj.mydsl.myDsl.ClassDecl;
import org.xtext.sampleProj.mydsl.myDsl.PolymorphicTypeName;
import org.xtext.sampleProj.mydsl.scoping.AbstractMyDslScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class MyDslScopeProvider extends AbstractMyDslScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    if ((reference instanceof PolymorphicTypeName)) {
      ClassDecl _containerOfType = EcoreUtil2.<ClassDecl>getContainerOfType(context, ClassDecl.class);
      final ClassDecl classAncestor = ((ClassDecl) _containerOfType);
      if ((classAncestor != null)) {
        List<PolymorphicTypeName> polyTypes = EcoreUtil2.<PolymorphicTypeName>getAllContentsOfType(classAncestor, PolymorphicTypeName.class);
        return Scopes.scopeFor(polyTypes);
      }
    }
    return super.getScope(context, reference);
  }
}
