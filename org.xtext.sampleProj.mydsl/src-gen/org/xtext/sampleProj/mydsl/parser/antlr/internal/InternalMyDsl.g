/*
 * generated by Xtext 2.12.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.sampleProj.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.sampleProj.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.sampleProj.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "DomainModel";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDomainModel
entryRuleDomainModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainModelRule()); }
	iv_ruleDomainModel=ruleDomainModel
	{ $current=$iv_ruleDomainModel.current; }
	EOF;

// Rule DomainModel
ruleDomainModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDomainModelAccess().getElementsTopLevelParserRuleCall_0());
			}
			lv_elements_0_0=ruleTopLevel
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDomainModelRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.sampleProj.mydsl.MyDsl.TopLevel");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleTopLevel
entryRuleTopLevel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTopLevelRule()); }
	iv_ruleTopLevel=ruleTopLevel
	{ $current=$iv_ruleTopLevel.current; }
	EOF;

// Rule TopLevel
ruleTopLevel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTopLevelAccess().getImportSatementParserRuleCall_0());
		}
		this_ImportSatement_0=ruleImportSatement
		{
			$current = $this_ImportSatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTopLevelAccess().getClassDeclParserRuleCall_1());
		}
		this_ClassDecl_1=ruleClassDecl
		{
			$current = $this_ClassDecl_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleImportSatement
entryRuleImportSatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportSatementRule()); }
	iv_ruleImportSatement=ruleImportSatement
	{ $current=$iv_ruleImportSatement.current; }
	EOF;

// Rule ImportSatement
ruleImportSatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportSatementAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportSatementAccess().getImportsImportParserRuleCall_1_0());
				}
				lv_imports_1_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportSatementRule());
					}
					add(
						$current,
						"imports",
						lv_imports_1_0,
						"org.xtext.sampleProj.mydsl.MyDsl.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getImportAccess().getImportNameImportComponentParserRuleCall_0_0());
				}
				lv_importName_0_0=ruleImportComponent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportRule());
					}
					add(
						$current,
						"importName",
						lv_importName_0_0,
						"org.xtext.sampleProj.mydsl.MyDsl.ImportComponent");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getImportAccess().getFullStopKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getImportAccess().getImportNameImportComponentParserRuleCall_1_1_0());
					}
					lv_importName_2_0=ruleImportComponent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImportRule());
						}
						add(
							$current,
							"importName",
							lv_importName_2_0,
							"org.xtext.sampleProj.mydsl.MyDsl.ImportComponent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleImportComponent
entryRuleImportComponent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportComponentRule()); }
	iv_ruleImportComponent=ruleImportComponent
	{ $current=$iv_ruleImportComponent.current; }
	EOF;

// Rule ImportComponent
ruleImportComponent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getImportComponentAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getImportComponentRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleClassDecl
entryRuleClassDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassDeclRule()); }
	iv_ruleClassDecl=ruleClassDecl
	{ $current=$iv_ruleClassDecl.current; }
	EOF;

// Rule ClassDecl
ruleClassDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getClassDeclAccess().getClassParserRuleCall_0());
		}
		this_Class_0=ruleClass
		{
			$current = $this_Class_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getClassDeclAccess().getDatatypeParserRuleCall_1());
		}
		this_Datatype_1=ruleDatatype
		{
			$current = $this_Datatype_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getClassDeclAccess().getExtendParserRuleCall_2());
		}
		this_Extend_2=ruleExtend
		{
			$current = $this_Extend_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePolyContext
entryRulePolyContext returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPolyContextRule()); }
	iv_rulePolyContext=rulePolyContext
	{ $current=$iv_rulePolyContext.current; }
	EOF;

// Rule PolyContext
rulePolyContext returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<'
		{
			newLeafNode(otherlv_0, grammarAccess.getPolyContextAccess().getLessThanSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPolyContextAccess().getPolyTypesPolyContextTypesParserRuleCall_1_0());
				}
				lv_polyTypes_1_0=rulePolyContextTypes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolyContextRule());
					}
					add(
						$current,
						"polyTypes",
						lv_polyTypes_1_0,
						"org.xtext.sampleProj.mydsl.MyDsl.PolyContextTypes");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2='>'
		{
			newLeafNode(otherlv_2, grammarAccess.getPolyContextAccess().getGreaterThanSignKeyword_2());
		}
	)
;

// Entry rule entryRulePolyContextTypes
entryRulePolyContextTypes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPolyContextTypesRule()); }
	iv_rulePolyContextTypes=rulePolyContextTypes
	{ $current=$iv_rulePolyContextTypes.current; }
	EOF;

// Rule PolyContextTypes
rulePolyContextTypes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getPolyContextTypesAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPolyContextTypesRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPolyContextTypesAccess().getConstraintsTypeConstraintsParserRuleCall_1_0());
				}
				lv_constraints_1_0=ruleTypeConstraints
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolyContextTypesRule());
					}
					add(
						$current,
						"constraints",
						lv_constraints_1_0,
						"org.xtext.sampleProj.mydsl.MyDsl.TypeConstraints");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleTypeConstraints
entryRuleTypeConstraints returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeConstraintsRule()); }
	iv_ruleTypeConstraints=ruleTypeConstraints
	{ $current=$iv_ruleTypeConstraints.current; }
	EOF;

// Rule TypeConstraints
ruleTypeConstraints returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=':'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeConstraintsAccess().getColonKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeConstraintsRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getTypeConstraintsAccess().getTypeNameTypeNameCrossReference_1_0());
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getTypeConstraintsAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeConstraintsRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getTypeConstraintsAccess().getTypeNameTypeNameCrossReference_2_1_0());
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleTypedVariable
entryRuleTypedVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypedVariableRule()); }
	iv_ruleTypedVariable=ruleTypedVariable
	{ $current=$iv_ruleTypedVariable.current; }
	EOF;

// Rule TypedVariable
ruleTypedVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getTypedVariableAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypedVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTypedVariableAccess().getConstraintsTypeConstraintsParserRuleCall_1_0());
				}
				lv_constraints_1_0=ruleTypeConstraints
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypedVariableRule());
					}
					add(
						$current,
						"constraints",
						lv_constraints_1_0,
						"org.xtext.sampleProj.mydsl.MyDsl.TypeConstraints");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeDeclarationRule()); }
	iv_ruleTypeDeclaration=ruleTypeDeclaration
	{ $current=$iv_ruleTypeDeclaration.current; }
	EOF;

// Rule TypeDeclaration
ruleTypeDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeDeclarationRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getTypeDeclarationAccess().getTypeNameTypeNameCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeDeclarationAccess().getContextTypeDeclContextParserRuleCall_1_0());
				}
				lv_context_1_0=ruleTypeDeclContext
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
					}
					set(
						$current,
						"context",
						lv_context_1_0,
						"org.xtext.sampleProj.mydsl.MyDsl.TypeDeclContext");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTypeDeclContext
entryRuleTypeDeclContext returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeDeclContextRule()); }
	iv_ruleTypeDeclContext=ruleTypeDeclContext
	{ $current=$iv_ruleTypeDeclContext.current; }
	EOF;

// Rule TypeDeclContext
ruleTypeDeclContext returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeDeclContextAccess().getLessThanSignKeyword_0());
		}
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getTypeDeclContextAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeDeclContextRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getTypeDeclContextAccess().getTypeNameTypeNameCrossReference_1_1_0());
					}
				)
			)
		)
		otherlv_3='>'
		{
			newLeafNode(otherlv_3, grammarAccess.getTypeDeclContextAccess().getGreaterThanSignKeyword_2());
		}
	)
;

// Entry rule entryRuleTypeName
entryRuleTypeName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeNameRule()); }
	iv_ruleTypeName=ruleTypeName
	{ $current=$iv_ruleTypeName.current; }
	EOF;

// Rule TypeName
ruleTypeName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getTypeNameAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTypeNameRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleFunctionName
entryRuleFunctionName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionNameRule()); }
	iv_ruleFunctionName=ruleFunctionName
	{ $current=$iv_ruleFunctionName.current; }
	EOF;

// Rule FunctionName
ruleFunctionName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getFunctionNameAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFunctionNameRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	iv_ruleClass=ruleClass
	{ $current=$iv_ruleClass.current; }
	EOF;

// Rule Class
ruleClass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Class'
		{
			newLeafNode(otherlv_0, grammarAccess.getClassAccess().getClassKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getNameTypeNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleTypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.sampleProj.mydsl.MyDsl.TypeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getContextPolyContextParserRuleCall_2_0());
				}
				lv_context_2_0=rulePolyContext
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					add(
						$current,
						"context",
						lv_context_2_0,
						"org.xtext.sampleProj.mydsl.MyDsl.PolyContext");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClassAccess().getBodyElementsTypeBodyElementsParserRuleCall_4_0());
				}
				lv_bodyElements_4_0=ruleTypeBodyElements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassRule());
					}
					add(
						$current,
						"bodyElements",
						lv_bodyElements_4_0,
						"org.xtext.sampleProj.mydsl.MyDsl.TypeBodyElements");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getClassAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleDatatype
entryRuleDatatype returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDatatypeRule()); }
	iv_ruleDatatype=ruleDatatype
	{ $current=$iv_ruleDatatype.current; }
	EOF;

// Rule Datatype
ruleDatatype returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Datatype'
		{
			newLeafNode(otherlv_0, grammarAccess.getDatatypeAccess().getDatatypeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDatatypeAccess().getNameTypeNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleTypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDatatypeRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.sampleProj.mydsl.MyDsl.TypeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDatatypeAccess().getContextPolyContextParserRuleCall_2_0());
				}
				lv_context_2_0=rulePolyContext
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDatatypeRule());
					}
					add(
						$current,
						"context",
						lv_context_2_0,
						"org.xtext.sampleProj.mydsl.MyDsl.PolyContext");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getDatatypeAccess().getConstructorsDatatypeConstructorParserRuleCall_3_0());
				}
				lv_constructors_3_0=ruleDatatypeConstructor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDatatypeRule());
					}
					add(
						$current,
						"constructors",
						lv_constructors_3_0,
						"org.xtext.sampleProj.mydsl.MyDsl.DatatypeConstructor");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getDatatypeAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDatatypeAccess().getBodyElementsTypeBodyElementsParserRuleCall_5_0());
				}
				lv_bodyElements_5_0=ruleTypeBodyElements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDatatypeRule());
					}
					add(
						$current,
						"bodyElements",
						lv_bodyElements_5_0,
						"org.xtext.sampleProj.mydsl.MyDsl.TypeBodyElements");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getDatatypeAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleDatatypeConstructor
entryRuleDatatypeConstructor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDatatypeConstructorRule()); }
	iv_ruleDatatypeConstructor=ruleDatatypeConstructor
	{ $current=$iv_ruleDatatypeConstructor.current; }
	EOF;

// Rule DatatypeConstructor
ruleDatatypeConstructor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDatatypeConstructorAccess().getBaseConstructorParserRuleCall_0());
		}
		this_BaseConstructor_0=ruleBaseConstructor
		{
			$current = $this_BaseConstructor_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDatatypeConstructorAccess().getConstructorParserRuleCall_1());
		}
		this_Constructor_1=ruleConstructor
		{
			$current = $this_Constructor_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBaseConstructor
entryRuleBaseConstructor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBaseConstructorRule()); }
	iv_ruleBaseConstructor=ruleBaseConstructor
	{ $current=$iv_ruleBaseConstructor.current; }
	EOF;

// Rule BaseConstructor
ruleBaseConstructor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getBaseConstructorAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getBaseConstructorRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleConstructor
entryRuleConstructor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstructorRule()); }
	iv_ruleConstructor=ruleConstructor
	{ $current=$iv_ruleConstructor.current; }
	EOF;

// Rule Constructor
ruleConstructor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getConstructorAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstructorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getConstructorAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstructorAccess().getTypedVariablesTypedVariableParserRuleCall_2_0());
				}
				lv_typedVariables_2_0=ruleTypedVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstructorRule());
					}
					add(
						$current,
						"typedVariables",
						lv_typedVariables_2_0,
						"org.xtext.sampleProj.mydsl.MyDsl.TypedVariable");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getConstructorAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleExtend
entryRuleExtend returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExtendRule()); }
	iv_ruleExtend=ruleExtend
	{ $current=$iv_ruleExtend.current; }
	EOF;

// Rule Extend
ruleExtend returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExtendRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getExtendAccess().getNameTypeNameCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getExtendAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_extesnion_2_0=RULE_ID
				{
					newLeafNode(lv_extesnion_2_0, grammarAccess.getExtendAccess().getExtesnionIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExtendRule());
					}
					setWithLastConsumed(
						$current,
						"extesnion",
						lv_extesnion_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getExtendAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getExtendAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExtendAccess().getBodyElementsTypeBodyElementsParserRuleCall_5_0());
				}
				lv_bodyElements_5_0=ruleTypeBodyElements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtendRule());
					}
					add(
						$current,
						"bodyElements",
						lv_bodyElements_5_0,
						"org.xtext.sampleProj.mydsl.MyDsl.TypeBodyElements");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getExtendAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleTypeBodyElements
entryRuleTypeBodyElements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeBodyElementsRule()); }
	iv_ruleTypeBodyElements=ruleTypeBodyElements
	{ $current=$iv_ruleTypeBodyElements.current; }
	EOF;

// Rule TypeBodyElements
ruleTypeBodyElements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeBodyElementsAccess().getFunctionsFunctionDeclParserRuleCall_0_0());
				}
				lv_functions_0_0=ruleFunctionDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeBodyElementsRule());
					}
					add(
						$current,
						"functions",
						lv_functions_0_0,
						"org.xtext.sampleProj.mydsl.MyDsl.FunctionDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeBodyElementsAccess().getTheoremsTheoremBodyParserRuleCall_1_0());
				}
				lv_theorems_1_0=ruleTheoremBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeBodyElementsRule());
					}
					add(
						$current,
						"theorems",
						lv_theorems_1_0,
						"org.xtext.sampleProj.mydsl.MyDsl.TheoremBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFunctionDecl
entryRuleFunctionDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDeclRule()); }
	iv_ruleFunctionDecl=ruleFunctionDecl
	{ $current=$iv_ruleFunctionDecl.current; }
	EOF;

// Rule FunctionDecl
ruleFunctionDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclAccess().getNameFunctionNameParserRuleCall_0_0());
				}
				lv_name_0_0=ruleFunctionName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclRule());
					}
					add(
						$current,
						"name",
						lv_name_0_0,
						"org.xtext.sampleProj.mydsl.MyDsl.FunctionName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionDeclAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclAccess().getTypeVariablesTypedVariableParserRuleCall_2_0());
				}
				lv_typeVariables_2_0=ruleTypedVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclRule());
					}
					add(
						$current,
						"typeVariables",
						lv_typeVariables_2_0,
						"org.xtext.sampleProj.mydsl.MyDsl.TypedVariable");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getFunctionDeclAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleTheoremBody
entryRuleTheoremBody returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTheoremBodyRule()); }
	iv_ruleTheoremBody=ruleTheoremBody
	{ $current=$iv_ruleTheoremBody.current.getText(); }
	EOF;

// Rule TheoremBody
ruleTheoremBody returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Theorems'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTheoremBodyAccess().getTheoremsKeyword_0());
		}
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTheoremBodyAccess().getLeftCurlyBracketKeyword_1());
		}
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTheoremBodyAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getExpressionAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getExpressionRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
