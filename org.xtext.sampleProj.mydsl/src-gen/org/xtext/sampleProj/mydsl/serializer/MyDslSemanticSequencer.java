/*
 * generated by Xtext 2.13.0
 */
package org.xtext.sampleProj.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.sampleProj.mydsl.myDsl.BaseConstructor;
import org.xtext.sampleProj.mydsl.myDsl.BppClass;
import org.xtext.sampleProj.mydsl.myDsl.ConstructedType;
import org.xtext.sampleProj.mydsl.myDsl.DTypeConstructor;
import org.xtext.sampleProj.mydsl.myDsl.Datatype;
import org.xtext.sampleProj.mydsl.myDsl.DomainModel;
import org.xtext.sampleProj.mydsl.myDsl.Expression;
import org.xtext.sampleProj.mydsl.myDsl.Extend;
import org.xtext.sampleProj.mydsl.myDsl.FuncDirectDef;
import org.xtext.sampleProj.mydsl.myDsl.FuncInductive;
import org.xtext.sampleProj.mydsl.myDsl.FuncInductiveCase;
import org.xtext.sampleProj.mydsl.myDsl.FunctionDecl;
import org.xtext.sampleProj.mydsl.myDsl.FunctionName;
import org.xtext.sampleProj.mydsl.myDsl.Import;
import org.xtext.sampleProj.mydsl.myDsl.ImportComponent;
import org.xtext.sampleProj.mydsl.myDsl.ImportStatement;
import org.xtext.sampleProj.mydsl.myDsl.MyDslPackage;
import org.xtext.sampleProj.mydsl.myDsl.PolyContext;
import org.xtext.sampleProj.mydsl.myDsl.PolyContextTypes;
import org.xtext.sampleProj.mydsl.myDsl.PolyTypeConstraints;
import org.xtext.sampleProj.mydsl.myDsl.PolymorphicTypeName;
import org.xtext.sampleProj.mydsl.myDsl.SuperTypeList;
import org.xtext.sampleProj.mydsl.myDsl.TheoremBody;
import org.xtext.sampleProj.mydsl.myDsl.TheoremDecl;
import org.xtext.sampleProj.mydsl.myDsl.TypeBodyElements;
import org.xtext.sampleProj.mydsl.myDsl.TypeConstructor;
import org.xtext.sampleProj.mydsl.myDsl.TypeDeclContext;
import org.xtext.sampleProj.mydsl.myDsl.TypeDeclaration;
import org.xtext.sampleProj.mydsl.myDsl.TypeName;
import org.xtext.sampleProj.mydsl.myDsl.TypeStructure;
import org.xtext.sampleProj.mydsl.myDsl.TypedVariable;
import org.xtext.sampleProj.mydsl.myDsl.TypedVariableList;
import org.xtext.sampleProj.mydsl.myDsl.Where;
import org.xtext.sampleProj.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.BASE_CONSTRUCTOR:
				sequence_BaseConstructor(context, (BaseConstructor) semanticObject); 
				return; 
			case MyDslPackage.BPP_CLASS:
				sequence_Class(context, (BppClass) semanticObject); 
				return; 
			case MyDslPackage.CONSTRUCTED_TYPE:
				sequence_ConstructedType(context, (ConstructedType) semanticObject); 
				return; 
			case MyDslPackage.DTYPE_CONSTRUCTOR:
				sequence_DTypeConstructor(context, (DTypeConstructor) semanticObject); 
				return; 
			case MyDslPackage.DATATYPE:
				sequence_Datatype(context, (Datatype) semanticObject); 
				return; 
			case MyDslPackage.DOMAIN_MODEL:
				sequence_DomainModel(context, (DomainModel) semanticObject); 
				return; 
			case MyDslPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case MyDslPackage.EXTEND:
				sequence_Extend(context, (Extend) semanticObject); 
				return; 
			case MyDslPackage.FUNC_DIRECT_DEF:
				sequence_FuncDirectDef(context, (FuncDirectDef) semanticObject); 
				return; 
			case MyDslPackage.FUNC_INDUCTIVE:
				sequence_FuncInductive(context, (FuncInductive) semanticObject); 
				return; 
			case MyDslPackage.FUNC_INDUCTIVE_CASE:
				sequence_FuncInductiveCase(context, (FuncInductiveCase) semanticObject); 
				return; 
			case MyDslPackage.FUNCTION_DECL:
				sequence_FunctionDecl(context, (FunctionDecl) semanticObject); 
				return; 
			case MyDslPackage.FUNCTION_NAME:
				sequence_FunctionName(context, (FunctionName) semanticObject); 
				return; 
			case MyDslPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case MyDslPackage.IMPORT_COMPONENT:
				sequence_ImportComponent(context, (ImportComponent) semanticObject); 
				return; 
			case MyDslPackage.IMPORT_STATEMENT:
				sequence_ImportStatement(context, (ImportStatement) semanticObject); 
				return; 
			case MyDslPackage.POLY_CONTEXT:
				sequence_PolyContext(context, (PolyContext) semanticObject); 
				return; 
			case MyDslPackage.POLY_CONTEXT_TYPES:
				sequence_PolyContextTypes(context, (PolyContextTypes) semanticObject); 
				return; 
			case MyDslPackage.POLY_TYPE_CONSTRAINTS:
				sequence_PolyTypeConstraints(context, (PolyTypeConstraints) semanticObject); 
				return; 
			case MyDslPackage.POLYMORPHIC_TYPE_NAME:
				sequence_PolymorphicTypeName(context, (PolymorphicTypeName) semanticObject); 
				return; 
			case MyDslPackage.SUPER_TYPE_LIST:
				sequence_SuperTypeList(context, (SuperTypeList) semanticObject); 
				return; 
			case MyDslPackage.THEOREM_BODY:
				sequence_TheoremBody(context, (TheoremBody) semanticObject); 
				return; 
			case MyDslPackage.THEOREM_DECL:
				sequence_TheoremDecl(context, (TheoremDecl) semanticObject); 
				return; 
			case MyDslPackage.TYPE_BODY_ELEMENTS:
				sequence_TypeBodyElements(context, (TypeBodyElements) semanticObject); 
				return; 
			case MyDslPackage.TYPE_CONSTRUCTOR:
				sequence_TypeConstructor(context, (TypeConstructor) semanticObject); 
				return; 
			case MyDslPackage.TYPE_DECL_CONTEXT:
				sequence_TypeDeclContext(context, (TypeDeclContext) semanticObject); 
				return; 
			case MyDslPackage.TYPE_DECLARATION:
				sequence_TypeDeclaration(context, (TypeDeclaration) semanticObject); 
				return; 
			case MyDslPackage.TYPE_NAME:
				sequence_TypeName(context, (TypeName) semanticObject); 
				return; 
			case MyDslPackage.TYPE_STRUCTURE:
				sequence_TypeStructure(context, (TypeStructure) semanticObject); 
				return; 
			case MyDslPackage.TYPED_VARIABLE:
				sequence_TypedVariable(context, (TypedVariable) semanticObject); 
				return; 
			case MyDslPackage.TYPED_VARIABLE_LIST:
				sequence_TypedVariableList(context, (TypedVariableList) semanticObject); 
				return; 
			case MyDslPackage.WHERE:
				sequence_Where(context, (Where) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     DatatypeConstructor returns BaseConstructor
	 *     BaseConstructor returns BaseConstructor
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_BaseConstructor(ISerializationContext context, BaseConstructor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATATYPE_CONSTRUCTOR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATATYPE_CONSTRUCTOR__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBaseConstructorAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TopLevel returns BppClass
	 *     ClassDecl returns BppClass
	 *     Class returns BppClass
	 *
	 * Constraint:
	 *     (
	 *         typeName=TypeName 
	 *         context=PolyContext? 
	 *         supertypes=SuperTypeList? 
	 *         typeStructure=TypeStructure? 
	 *         where=Where? 
	 *         bodyElements+=TypeBodyElements*
	 *     )
	 */
	protected void sequence_Class(ISerializationContext context, BppClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConstructedType returns ConstructedType
	 *
	 * Constraint:
	 *     (type+=TypeConstructor type+=ConstructedType?)
	 */
	protected void sequence_ConstructedType(ISerializationContext context, ConstructedType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DatatypeConstructor returns DTypeConstructor
	 *     DTypeConstructor returns DTypeConstructor
	 *
	 * Constraint:
	 *     (name=ID decons=TypedVariableList)
	 */
	protected void sequence_DTypeConstructor(ISerializationContext context, DTypeConstructor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DATATYPE_CONSTRUCTOR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DATATYPE_CONSTRUCTOR__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.DTYPE_CONSTRUCTOR__DECONS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.DTYPE_CONSTRUCTOR__DECONS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDTypeConstructorAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDTypeConstructorAccess().getDeconsTypedVariableListParserRuleCall_2_0(), semanticObject.getDecons());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TopLevel returns Datatype
	 *     ClassDecl returns Datatype
	 *     Datatype returns Datatype
	 *
	 * Constraint:
	 *     (name=TypeName context=PolyContext? constructors+=DatatypeConstructor* bodyElements+=TypeBodyElements*)
	 */
	protected void sequence_Datatype(ISerializationContext context, Datatype semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DomainModel returns DomainModel
	 *
	 * Constraint:
	 *     elements+=TopLevel+
	 */
	protected void sequence_DomainModel(ISerializationContext context, DomainModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.EXPRESSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.EXPRESSION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpressionAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TopLevel returns Extend
	 *     ClassDecl returns Extend
	 *     Extend returns Extend
	 *
	 * Constraint:
	 *     (name=[TypeName|ID] extesnion=ID bodyElements+=TypeBodyElements*)
	 */
	protected void sequence_Extend(ISerializationContext context, Extend semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionBody returns FuncDirectDef
	 *     FuncDirectDef returns FuncDirectDef
	 *
	 * Constraint:
	 *     expression=Expression
	 */
	protected void sequence_FuncDirectDef(ISerializationContext context, FuncDirectDef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FUNC_DIRECT_DEF__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FUNC_DIRECT_DEF__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFuncDirectDefAccess().getExpressionExpressionParserRuleCall_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FuncInductiveCase returns FuncInductiveCase
	 *
	 * Constraint:
	 *     (deconName=[DTypeConstructor|ID] expre=Expression)
	 */
	protected void sequence_FuncInductiveCase(ISerializationContext context, FuncInductiveCase semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FUNC_INDUCTIVE_CASE__DECON_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FUNC_INDUCTIVE_CASE__DECON_NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FUNC_INDUCTIVE_CASE__EXPRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FUNC_INDUCTIVE_CASE__EXPRE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFuncInductiveCaseAccess().getDeconNameDTypeConstructorIDTerminalRuleCall_1_0_1(), semanticObject.eGet(MyDslPackage.Literals.FUNC_INDUCTIVE_CASE__DECON_NAME, false));
		feeder.accept(grammarAccess.getFuncInductiveCaseAccess().getExpreExpressionParserRuleCall_3_0(), semanticObject.getExpre());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FunctionBody returns FuncInductive
	 *     FuncInductive returns FuncInductive
	 *
	 * Constraint:
	 *     (variableName=[TypedVariable|ID] inductCase+=FuncInductiveCase inductCase+=FuncInductiveCase*)
	 */
	protected void sequence_FuncInductive(ISerializationContext context, FuncInductive semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionDecl returns FunctionDecl
	 *
	 * Constraint:
	 *     (name+=FunctionName context=PolyContext? variables=TypedVariableList? body=FunctionBody returnType=TypeConstructor)
	 */
	protected void sequence_FunctionDecl(ISerializationContext context, FunctionDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionName returns FunctionName
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_FunctionName(ISerializationContext context, FunctionName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.FUNCTION_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.FUNCTION_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunctionNameAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ImportComponent returns ImportComponent
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_ImportComponent(ISerializationContext context, ImportComponent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.IMPORT_COMPONENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.IMPORT_COMPONENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportComponentAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TopLevel returns ImportStatement
	 *     ImportStatement returns ImportStatement
	 *
	 * Constraint:
	 *     imports+=Import
	 */
	protected void sequence_ImportStatement(ISerializationContext context, ImportStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     (importName+=ImportComponent importName+=ImportComponent)
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PolyContextTypes returns PolyContextTypes
	 *
	 * Constraint:
	 *     (name=PolymorphicTypeName constraints+=PolyTypeConstraints*)
	 */
	protected void sequence_PolyContextTypes(ISerializationContext context, PolyContextTypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PolyContext returns PolyContext
	 *
	 * Constraint:
	 *     polyTypes+=PolyContextTypes+
	 */
	protected void sequence_PolyContext(ISerializationContext context, PolyContext semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PolyTypeConstraints returns PolyTypeConstraints
	 *
	 * Constraint:
	 *     (typeName+=[TypeName|ID] typeName+=[TypeName|ID]*)
	 */
	protected void sequence_PolyTypeConstraints(ISerializationContext context, PolyTypeConstraints semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Name returns PolymorphicTypeName
	 *     PolymorphicTypeName returns PolymorphicTypeName
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_PolymorphicTypeName(ISerializationContext context, PolymorphicTypeName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPolymorphicTypeNameAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SuperTypeList returns SuperTypeList
	 *
	 * Constraint:
	 *     (superType+=ConstructedType superType+=ConstructedType*)
	 */
	protected void sequence_SuperTypeList(ISerializationContext context, SuperTypeList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TheoremBody returns TheoremBody
	 *
	 * Constraint:
	 *     theoremDecl+=TheoremDecl+
	 */
	protected void sequence_TheoremBody(ISerializationContext context, TheoremBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TheoremDecl returns TheoremDecl
	 *
	 * Constraint:
	 *     thmName=THM_NAME
	 */
	protected void sequence_TheoremDecl(ISerializationContext context, TheoremDecl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.THEOREM_DECL__THM_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.THEOREM_DECL__THM_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTheoremDeclAccess().getThmNameTHM_NAMEParserRuleCall_0(), semanticObject.getThmName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeBodyElements returns TypeBodyElements
	 *
	 * Constraint:
	 *     (functions+=FunctionDecl | theorems+=TheoremBody)
	 */
	protected void sequence_TypeBodyElements(ISerializationContext context, TypeBodyElements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeConstructor returns TypeConstructor
	 *
	 * Constraint:
	 *     (typeName=[Name|ID] context+=TypeDeclContext?)
	 */
	protected void sequence_TypeConstructor(ISerializationContext context, TypeConstructor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeDeclContext returns TypeDeclContext
	 *
	 * Constraint:
	 *     (typeName+=ConstructedType typeName+=ConstructedType*)
	 */
	protected void sequence_TypeDeclContext(ISerializationContext context, TypeDeclContext semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeDeclaration returns TypeDeclaration
	 *
	 * Constraint:
	 *     (typeName=[TypeName|ID] context=TypeDeclContext)
	 */
	protected void sequence_TypeDeclaration(ISerializationContext context, TypeDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TYPE_DECLARATION__TYPE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TYPE_DECLARATION__TYPE_NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TYPE_DECLARATION__CONTEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TYPE_DECLARATION__CONTEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeDeclarationAccess().getTypeNameTypeNameIDTerminalRuleCall_0_0_1(), semanticObject.eGet(MyDslPackage.Literals.TYPE_DECLARATION__TYPE_NAME, false));
		feeder.accept(grammarAccess.getTypeDeclarationAccess().getContextTypeDeclContextParserRuleCall_1_0(), semanticObject.getContext());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Name returns TypeName
	 *     TypeName returns TypeName
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_TypeName(ISerializationContext context, TypeName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeNameAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypeStructure returns TypeStructure
	 *
	 * Constraint:
	 *     variables=TypedVariableList
	 */
	protected void sequence_TypeStructure(ISerializationContext context, TypeStructure semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TYPE_STRUCTURE__VARIABLES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TYPE_STRUCTURE__VARIABLES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeStructureAccess().getVariablesTypedVariableListParserRuleCall_1_0(), semanticObject.getVariables());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypedVariableList returns TypedVariableList
	 *
	 * Constraint:
	 *     (typeVar+=TypedVariable typeVar+=TypedVariable*)
	 */
	protected void sequence_TypedVariableList(ISerializationContext context, TypedVariableList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypedVariable returns TypedVariable
	 *
	 * Constraint:
	 *     (name=ID type=ConstructedType)
	 */
	protected void sequence_TypedVariable(ISerializationContext context, TypedVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TYPED_VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TYPED_VARIABLE__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TYPED_VARIABLE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TYPED_VARIABLE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypedVariableAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTypedVariableAccess().getTypeConstructedTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Where returns Where
	 *
	 * Constraint:
	 *     (expessions+=Expression expressions+=Expression*)
	 */
	protected void sequence_Where(ISerializationContext context, Where semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
