/**
 * generated by Xtext 2.13.0
 */
package org.xtext.sampleProj.mydsl.myDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.sampleProj.mydsl.myDsl.BaseConstructor;
import org.xtext.sampleProj.mydsl.myDsl.ClassDecl;
import org.xtext.sampleProj.mydsl.myDsl.ConstructedType;
import org.xtext.sampleProj.mydsl.myDsl.Constructor;
import org.xtext.sampleProj.mydsl.myDsl.Datatype;
import org.xtext.sampleProj.mydsl.myDsl.DatatypeConstructor;
import org.xtext.sampleProj.mydsl.myDsl.DomainModel;
import org.xtext.sampleProj.mydsl.myDsl.Expression;
import org.xtext.sampleProj.mydsl.myDsl.Extend;
import org.xtext.sampleProj.mydsl.myDsl.FunctionDecl;
import org.xtext.sampleProj.mydsl.myDsl.FunctionName;
import org.xtext.sampleProj.mydsl.myDsl.Import;
import org.xtext.sampleProj.mydsl.myDsl.ImportComponent;
import org.xtext.sampleProj.mydsl.myDsl.ImportStatement;
import org.xtext.sampleProj.mydsl.myDsl.MyDslFactory;
import org.xtext.sampleProj.mydsl.myDsl.MyDslPackage;
import org.xtext.sampleProj.mydsl.myDsl.Name;
import org.xtext.sampleProj.mydsl.myDsl.PolyContext;
import org.xtext.sampleProj.mydsl.myDsl.PolyContextTypes;
import org.xtext.sampleProj.mydsl.myDsl.PolymorphicTypeName;
import org.xtext.sampleProj.mydsl.myDsl.Supertype;
import org.xtext.sampleProj.mydsl.myDsl.TopLevel;
import org.xtext.sampleProj.mydsl.myDsl.TypeBodyElements;
import org.xtext.sampleProj.mydsl.myDsl.TypeConstraints;
import org.xtext.sampleProj.mydsl.myDsl.TypeConstructor;
import org.xtext.sampleProj.mydsl.myDsl.TypeDeclContext;
import org.xtext.sampleProj.mydsl.myDsl.TypeDeclaration;
import org.xtext.sampleProj.mydsl.myDsl.TypeName;
import org.xtext.sampleProj.mydsl.myDsl.TypedVariable;
import org.xtext.sampleProj.mydsl.myDsl.Where;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyDslFactoryImpl extends EFactoryImpl implements MyDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyDslFactory init()
  {
    try
    {
      MyDslFactory theMyDslFactory = (MyDslFactory)EPackage.Registry.INSTANCE.getEFactory(MyDslPackage.eNS_URI);
      if (theMyDslFactory != null)
      {
        return theMyDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyDslPackage.DOMAIN_MODEL: return createDomainModel();
      case MyDslPackage.TOP_LEVEL: return createTopLevel();
      case MyDslPackage.IMPORT_STATEMENT: return createImportStatement();
      case MyDslPackage.IMPORT: return createImport();
      case MyDslPackage.IMPORT_COMPONENT: return createImportComponent();
      case MyDslPackage.CLASS_DECL: return createClassDecl();
      case MyDslPackage.CLASS: return createClass();
      case MyDslPackage.NAME: return createName();
      case MyDslPackage.TYPE_NAME: return createTypeName();
      case MyDslPackage.POLYMORPHIC_TYPE_NAME: return createPolymorphicTypeName();
      case MyDslPackage.POLY_CONTEXT: return createPolyContext();
      case MyDslPackage.POLY_CONTEXT_TYPES: return createPolyContextTypes();
      case MyDslPackage.TYPE_CONSTRAINTS: return createTypeConstraints();
      case MyDslPackage.TYPED_VARIABLE: return createTypedVariable();
      case MyDslPackage.SUPERTYPE: return createSupertype();
      case MyDslPackage.TYPE_DECLARATION: return createTypeDeclaration();
      case MyDslPackage.CONSTRUCTED_TYPE: return createConstructedType();
      case MyDslPackage.TYPE_CONSTRUCTOR: return createTypeConstructor();
      case MyDslPackage.TYPE_DECL_CONTEXT: return createTypeDeclContext();
      case MyDslPackage.WHERE: return createWhere();
      case MyDslPackage.TYPE_BODY_ELEMENTS: return createTypeBodyElements();
      case MyDslPackage.FUNCTION_NAME: return createFunctionName();
      case MyDslPackage.DATATYPE: return createDatatype();
      case MyDslPackage.DATATYPE_CONSTRUCTOR: return createDatatypeConstructor();
      case MyDslPackage.BASE_CONSTRUCTOR: return createBaseConstructor();
      case MyDslPackage.CONSTRUCTOR: return createConstructor();
      case MyDslPackage.EXTEND: return createExtend();
      case MyDslPackage.FUNCTION_DECL: return createFunctionDecl();
      case MyDslPackage.EXPRESSION: return createExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DomainModel createDomainModel()
  {
    DomainModelImpl domainModel = new DomainModelImpl();
    return domainModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TopLevel createTopLevel()
  {
    TopLevelImpl topLevel = new TopLevelImpl();
    return topLevel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImportStatement createImportStatement()
  {
    ImportStatementImpl importStatement = new ImportStatementImpl();
    return importStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImportComponent createImportComponent()
  {
    ImportComponentImpl importComponent = new ImportComponentImpl();
    return importComponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassDecl createClassDecl()
  {
    ClassDeclImpl classDecl = new ClassDeclImpl();
    return classDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public org.xtext.sampleProj.mydsl.myDsl.Class createClass()
  {
    ClassImpl class_ = new ClassImpl();
    return class_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Name createName()
  {
    NameImpl name = new NameImpl();
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeName createTypeName()
  {
    TypeNameImpl typeName = new TypeNameImpl();
    return typeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PolymorphicTypeName createPolymorphicTypeName()
  {
    PolymorphicTypeNameImpl polymorphicTypeName = new PolymorphicTypeNameImpl();
    return polymorphicTypeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PolyContext createPolyContext()
  {
    PolyContextImpl polyContext = new PolyContextImpl();
    return polyContext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PolyContextTypes createPolyContextTypes()
  {
    PolyContextTypesImpl polyContextTypes = new PolyContextTypesImpl();
    return polyContextTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeConstraints createTypeConstraints()
  {
    TypeConstraintsImpl typeConstraints = new TypeConstraintsImpl();
    return typeConstraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypedVariable createTypedVariable()
  {
    TypedVariableImpl typedVariable = new TypedVariableImpl();
    return typedVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Supertype createSupertype()
  {
    SupertypeImpl supertype = new SupertypeImpl();
    return supertype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeDeclaration createTypeDeclaration()
  {
    TypeDeclarationImpl typeDeclaration = new TypeDeclarationImpl();
    return typeDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConstructedType createConstructedType()
  {
    ConstructedTypeImpl constructedType = new ConstructedTypeImpl();
    return constructedType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeConstructor createTypeConstructor()
  {
    TypeConstructorImpl typeConstructor = new TypeConstructorImpl();
    return typeConstructor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeDeclContext createTypeDeclContext()
  {
    TypeDeclContextImpl typeDeclContext = new TypeDeclContextImpl();
    return typeDeclContext;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Where createWhere()
  {
    WhereImpl where = new WhereImpl();
    return where;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeBodyElements createTypeBodyElements()
  {
    TypeBodyElementsImpl typeBodyElements = new TypeBodyElementsImpl();
    return typeBodyElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionName createFunctionName()
  {
    FunctionNameImpl functionName = new FunctionNameImpl();
    return functionName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Datatype createDatatype()
  {
    DatatypeImpl datatype = new DatatypeImpl();
    return datatype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DatatypeConstructor createDatatypeConstructor()
  {
    DatatypeConstructorImpl datatypeConstructor = new DatatypeConstructorImpl();
    return datatypeConstructor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BaseConstructor createBaseConstructor()
  {
    BaseConstructorImpl baseConstructor = new BaseConstructorImpl();
    return baseConstructor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Constructor createConstructor()
  {
    ConstructorImpl constructor = new ConstructorImpl();
    return constructor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Extend createExtend()
  {
    ExtendImpl extend = new ExtendImpl();
    return extend;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionDecl createFunctionDecl()
  {
    FunctionDeclImpl functionDecl = new FunctionDeclImpl();
    return functionDecl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslPackage getMyDslPackage()
  {
    return (MyDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyDslPackage getPackage()
  {
    return MyDslPackage.eINSTANCE;
  }

} //MyDslFactoryImpl
