/**
 * generated by Xtext 2.13.0
 */
package org.xtext.sampleProj.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.sampleProj.mydsl.myDsl.MyDslPackage;
import org.xtext.sampleProj.mydsl.myDsl.Name;
import org.xtext.sampleProj.mydsl.myDsl.TypeConstructor;
import org.xtext.sampleProj.mydsl.myDsl.TypeDeclContext;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Type Constructor</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.sampleProj.mydsl.myDsl.impl.TypeConstructorImpl#getTypeName <em>Type Name</em>}</li>
 *   <li>{@link org.xtext.sampleProj.mydsl.myDsl.impl.TypeConstructorImpl#getContext <em>Context</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TypeConstructorImpl extends MinimalEObjectImpl.Container implements TypeConstructor
{
  /**
   * The cached value of the '{@link #getTypeName() <em>Type Name</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeName()
   * @generated
   * @ordered
   */
  protected EList<Name> typeName;

  /**
   * The cached value of the '{@link #getContext() <em>Context</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getContext()
   * @generated
   * @ordered
   */
  protected EList<TypeDeclContext> context;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypeConstructorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.TYPE_CONSTRUCTOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Name> getTypeName()
  {
    if (typeName == null)
    {
      typeName = new EObjectResolvingEList<Name>(Name.class, this, MyDslPackage.TYPE_CONSTRUCTOR__TYPE_NAME);
    }
    return typeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TypeDeclContext> getContext()
  {
    if (context == null)
    {
      context = new EObjectContainmentEList<TypeDeclContext>(TypeDeclContext.class, this, MyDslPackage.TYPE_CONSTRUCTOR__CONTEXT);
    }
    return context;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.TYPE_CONSTRUCTOR__CONTEXT:
        return ((InternalEList<?>)getContext()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.TYPE_CONSTRUCTOR__TYPE_NAME:
        return getTypeName();
      case MyDslPackage.TYPE_CONSTRUCTOR__CONTEXT:
        return getContext();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.TYPE_CONSTRUCTOR__TYPE_NAME:
        getTypeName().clear();
        getTypeName().addAll((Collection<? extends Name>)newValue);
        return;
      case MyDslPackage.TYPE_CONSTRUCTOR__CONTEXT:
        getContext().clear();
        getContext().addAll((Collection<? extends TypeDeclContext>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.TYPE_CONSTRUCTOR__TYPE_NAME:
        getTypeName().clear();
        return;
      case MyDslPackage.TYPE_CONSTRUCTOR__CONTEXT:
        getContext().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.TYPE_CONSTRUCTOR__TYPE_NAME:
        return typeName != null && !typeName.isEmpty();
      case MyDslPackage.TYPE_CONSTRUCTOR__CONTEXT:
        return context != null && !context.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //TypeConstructorImpl
