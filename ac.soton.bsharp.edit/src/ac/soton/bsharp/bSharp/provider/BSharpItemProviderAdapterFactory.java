/**
 * generated by Xtext 2.14.0
 */
package ac.soton.bsharp.bSharp.provider;

import ac.soton.bsharp.bSharp.util.BSharpAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class BSharpItemProviderAdapterFactory extends BSharpAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BSharpItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.Type} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeItemProvider typeItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.Type}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeAdapter() {
		if (typeItemProvider == null) {
			typeItemProvider = new TypeItemProvider(this);
		}

		return typeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.TopLevel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopLevelItemProvider topLevelItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.TopLevel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopLevelAdapter() {
		if (topLevelItemProvider == null) {
			topLevelItemProvider = new TopLevelItemProvider(this);
		}

		return topLevelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.TopLevelFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopLevelFileItemProvider topLevelFileItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.TopLevelFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopLevelFileAdapter() {
		if (topLevelFileItemProvider == null) {
			topLevelFileItemProvider = new TopLevelFileItemProvider(this);
		}

		return topLevelFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.TopLevelImport} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopLevelImportItemProvider topLevelImportItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.TopLevelImport}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopLevelImportAdapter() {
		if (topLevelImportItemProvider == null) {
			topLevelImportItemProvider = new TopLevelImportItemProvider(this);
		}

		return topLevelImportItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.Tuple} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TupleItemProvider tupleItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.Tuple}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTupleAdapter() {
		if (tupleItemProvider == null) {
			tupleItemProvider = new TupleItemProvider(this);
		}

		return tupleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.GlobalImport} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalImportItemProvider globalImportItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.GlobalImport}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalImportAdapter() {
		if (globalImportItemProvider == null) {
			globalImportItemProvider = new GlobalImportItemProvider(this);
		}

		return globalImportItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.IfElse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IfElseItemProvider ifElseItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.IfElse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIfElseAdapter() {
		if (ifElseItemProvider == null) {
			ifElseItemProvider = new IfElseItemProvider(this);
		}

		return ifElseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.InbuiltInfix} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InbuiltInfixItemProvider inbuiltInfixItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.InbuiltInfix}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInbuiltInfixAdapter() {
		if (inbuiltInfixItemProvider == null) {
			inbuiltInfixItemProvider = new InbuiltInfixItemProvider(this);
		}

		return inbuiltInfixItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.InbuiltPrefixFuncName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InbuiltPrefixFuncNameItemProvider inbuiltPrefixFuncNameItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.InbuiltPrefixFuncName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInbuiltPrefixFuncNameAdapter() {
		if (inbuiltPrefixFuncNameItemProvider == null) {
			inbuiltPrefixFuncNameItemProvider = new InbuiltPrefixFuncNameItemProvider(this);
		}

		return inbuiltPrefixFuncNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.FileImport} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileImportItemProvider fileImportItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.FileImport}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileImportAdapter() {
		if (fileImportItemProvider == null) {
			fileImportItemProvider = new FileImportItemProvider(this);
		}

		return fileImportItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.LocalImport} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalImportItemProvider localImportItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.LocalImport}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalImportAdapter() {
		if (localImportItemProvider == null) {
			localImportItemProvider = new LocalImportItemProvider(this);
		}

		return localImportItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.BSClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BSClassItemProvider bsClassItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.BSClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBSClassAdapter() {
		if (bsClassItemProvider == null) {
			bsClassItemProvider = new BSClassItemProvider(this);
		}

		return bsClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.InstName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstNameItemProvider instNameItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.InstName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstNameAdapter() {
		if (instNameItemProvider == null) {
			instNameItemProvider = new InstNameItemProvider(this);
		}

		return instNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.BSharpBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BSharpBlockItemProvider bSharpBlockItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.BSharpBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBSharpBlockAdapter() {
		if (bSharpBlockItemProvider == null) {
			bSharpBlockItemProvider = new BSharpBlockItemProvider(this);
		}

		return bSharpBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.PolyContext} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PolyContextItemProvider polyContextItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.PolyContext}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPolyContextAdapter() {
		if (polyContextItemProvider == null) {
			polyContextItemProvider = new PolyContextItemProvider(this);
		}

		return polyContextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.PolyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PolyTypeItemProvider polyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.PolyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPolyTypeAdapter() {
		if (polyTypeItemProvider == null) {
			polyTypeItemProvider = new PolyTypeItemProvider(this);
		}

		return polyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.SuperTypeList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SuperTypeListItemProvider superTypeListItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.SuperTypeList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSuperTypeListAdapter() {
		if (superTypeListItemProvider == null) {
			superTypeListItemProvider = new SuperTypeListItemProvider(this);
		}

		return superTypeListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.TypeConstructor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeConstructorItemProvider typeConstructorItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.TypeConstructor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeConstructorAdapter() {
		if (typeConstructorItemProvider == null) {
			typeConstructorItemProvider = new TypeConstructorItemProvider(this);
		}

		return typeConstructorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.TypeConstrBracket} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeConstrBracketItemProvider typeConstrBracketItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.TypeConstrBracket}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeConstrBracketAdapter() {
		if (typeConstrBracketItemProvider == null) {
			typeConstrBracketItemProvider = new TypeConstrBracketItemProvider(this);
		}

		return typeConstrBracketItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.ConstructedType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstructedTypeItemProvider constructedTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.ConstructedType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstructedTypeAdapter() {
		if (constructedTypeItemProvider == null) {
			constructedTypeItemProvider = new ConstructedTypeItemProvider(this);
		}

		return constructedTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.TypeDeclContext} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeDeclContextItemProvider typeDeclContextItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.TypeDeclContext}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeDeclContextAdapter() {
		if (typeDeclContextItemProvider == null) {
			typeDeclContextItemProvider = new TypeDeclContextItemProvider(this);
		}

		return typeDeclContextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.Where} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhereItemProvider whereItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.Where}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhereAdapter() {
		if (whereItemProvider == null) {
			whereItemProvider = new WhereItemProvider(this);
		}

		return whereItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.WrappedInfix} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WrappedInfixItemProvider wrappedInfixItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.WrappedInfix}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWrappedInfixAdapter() {
		if (wrappedInfixItemProvider == null) {
			wrappedInfixItemProvider = new WrappedInfixItemProvider(this);
		}

		return wrappedInfixItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.Datatype} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatatypeItemProvider datatypeItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.Datatype}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatatypeAdapter() {
		if (datatypeItemProvider == null) {
			datatypeItemProvider = new DatatypeItemProvider(this);
		}

		return datatypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.DatatypeConstructor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatatypeConstructorItemProvider datatypeConstructorItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.DatatypeConstructor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatatypeConstructorAdapter() {
		if (datatypeConstructorItemProvider == null) {
			datatypeConstructorItemProvider = new DatatypeConstructorItemProvider(this);
		}

		return datatypeConstructorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.Extend} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExtendItemProvider extendItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.Extend}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExtendAdapter() {
		if (extendItemProvider == null) {
			extendItemProvider = new ExtendItemProvider(this);
		}

		return extendItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.FunctionDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionDeclItemProvider functionDeclItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.FunctionDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionDeclAdapter() {
		if (functionDeclItemProvider == null) {
			functionDeclItemProvider = new FunctionDeclItemProvider(this);
		}

		return functionDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.MatchStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchStatementItemProvider matchStatementItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.MatchStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchStatementAdapter() {
		if (matchStatementItemProvider == null) {
			matchStatementItemProvider = new MatchStatementItemProvider(this);
		}

		return matchStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.MatchCase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchCaseItemProvider matchCaseItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.MatchCase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchCaseAdapter() {
		if (matchCaseItemProvider == null) {
			matchCaseItemProvider = new MatchCaseItemProvider(this);
		}

		return matchCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.TheoremBody} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TheoremBodyItemProvider theoremBodyItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.TheoremBody}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTheoremBodyAdapter() {
		if (theoremBodyItemProvider == null) {
			theoremBodyItemProvider = new TheoremBodyItemProvider(this);
		}

		return theoremBodyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.TheoremDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TheoremDeclItemProvider theoremDeclItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.TheoremDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTheoremDeclAdapter() {
		if (theoremDeclItemProvider == null) {
			theoremDeclItemProvider = new TheoremDeclItemProvider(this);
		}

		return theoremDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.TypedVariableList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypedVariableListItemProvider typedVariableListItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.TypedVariableList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypedVariableListAdapter() {
		if (typedVariableListItemProvider == null) {
			typedVariableListItemProvider = new TypedVariableListItemProvider(this);
		}

		return typedVariableListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.VariableTyping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableTypingItemProvider variableTypingItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.VariableTyping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableTypingAdapter() {
		if (variableTypingItemProvider == null) {
			variableTypingItemProvider = new VariableTypingItemProvider(this);
		}

		return variableTypingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.TypedVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypedVariableItemProvider typedVariableItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.TypedVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypedVariableAdapter() {
		if (typedVariableItemProvider == null) {
			typedVariableItemProvider = new TypedVariableItemProvider(this);
		}

		return typedVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.QuantLambda} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuantLambdaItemProvider quantLambdaItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.QuantLambda}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuantLambdaAdapter() {
		if (quantLambdaItemProvider == null) {
			quantLambdaItemProvider = new QuantLambdaItemProvider(this);
		}

		return quantLambdaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.ReferencingFunc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferencingFuncItemProvider referencingFuncItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.ReferencingFunc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferencingFuncAdapter() {
		if (referencingFuncItemProvider == null) {
			referencingFuncItemProvider = new ReferencingFuncItemProvider(this);
		}

		return referencingFuncItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.Expression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionItemProvider expressionItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.Expression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionAdapter() {
		if (expressionItemProvider == null) {
			expressionItemProvider = new ExpressionItemProvider(this);
		}

		return expressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.FunctionCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionCallItemProvider functionCallItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.FunctionCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionCallAdapter() {
		if (functionCallItemProvider == null) {
			functionCallItemProvider = new FunctionCallItemProvider(this);
		}

		return functionCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.FunctionCallInbuilt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionCallInbuiltItemProvider functionCallInbuiltItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.FunctionCallInbuilt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionCallInbuiltAdapter() {
		if (functionCallInbuiltItemProvider == null) {
			functionCallInbuiltItemProvider = new FunctionCallInbuiltItemProvider(this);
		}

		return functionCallInbuiltItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.FuncCallArgs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FuncCallArgsItemProvider funcCallArgsItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.FuncCallArgs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFuncCallArgsAdapter() {
		if (funcCallArgsItemProvider == null) {
			funcCallArgsItemProvider = new FuncCallArgsItemProvider(this);
		}

		return funcCallArgsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.ClassVarDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassVarDeclItemProvider classVarDeclItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.ClassVarDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassVarDeclAdapter() {
		if (classVarDeclItemProvider == null) {
			classVarDeclItemProvider = new ClassVarDeclItemProvider(this);
		}

		return classVarDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.Prefix} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrefixItemProvider prefixItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.Prefix}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrefixAdapter() {
		if (prefixItemProvider == null) {
			prefixItemProvider = new PrefixItemProvider(this);
		}

		return prefixItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.Bracket} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BracketItemProvider bracketItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.Bracket}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBracketAdapter() {
		if (bracketItemProvider == null) {
			bracketItemProvider = new BracketItemProvider(this);
		}

		return bracketItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.Instance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstanceItemProvider instanceItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.Instance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstanceAdapter() {
		if (instanceItemProvider == null) {
			instanceItemProvider = new InstanceItemProvider(this);
		}

		return instanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.Infix} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfixItemProvider infixItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.Infix}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfixAdapter() {
		if (infixItemProvider == null) {
			infixItemProvider = new InfixItemProvider(this);
		}

		return infixItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.NamedObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedObjectItemProvider namedObjectItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.NamedObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedObjectAdapter() {
		if (namedObjectItemProvider == null) {
			namedObjectItemProvider = new NamedObjectItemProvider(this);
		}

		return namedObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ac.soton.bsharp.bSharp.TypePowerSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypePowerSetItemProvider typePowerSetItemProvider;

	/**
	 * This creates an adapter for a {@link ac.soton.bsharp.bSharp.TypePowerSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypePowerSetAdapter() {
		if (typePowerSetItemProvider == null) {
			typePowerSetItemProvider = new TypePowerSetItemProvider(this);
		}

		return typePowerSetItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (typeItemProvider != null) typeItemProvider.dispose();
		if (bracketItemProvider != null) bracketItemProvider.dispose();
		if (bsClassItemProvider != null) bsClassItemProvider.dispose();
		if (bSharpBlockItemProvider != null) bSharpBlockItemProvider.dispose();
		if (classVarDeclItemProvider != null) classVarDeclItemProvider.dispose();
		if (constructedTypeItemProvider != null) constructedTypeItemProvider.dispose();
		if (datatypeItemProvider != null) datatypeItemProvider.dispose();
		if (datatypeConstructorItemProvider != null) datatypeConstructorItemProvider.dispose();
		if (extendItemProvider != null) extendItemProvider.dispose();
		if (expressionItemProvider != null) expressionItemProvider.dispose();
		if (fileImportItemProvider != null) fileImportItemProvider.dispose();
		if (functionCallItemProvider != null) functionCallItemProvider.dispose();
		if (functionCallInbuiltItemProvider != null) functionCallInbuiltItemProvider.dispose();
		if (funcCallArgsItemProvider != null) funcCallArgsItemProvider.dispose();
		if (functionDeclItemProvider != null) functionDeclItemProvider.dispose();
		if (globalImportItemProvider != null) globalImportItemProvider.dispose();
		if (ifElseItemProvider != null) ifElseItemProvider.dispose();
		if (inbuiltInfixItemProvider != null) inbuiltInfixItemProvider.dispose();
		if (inbuiltPrefixFuncNameItemProvider != null) inbuiltPrefixFuncNameItemProvider.dispose();
		if (infixItemProvider != null) infixItemProvider.dispose();
		if (instNameItemProvider != null) instNameItemProvider.dispose();
		if (instanceItemProvider != null) instanceItemProvider.dispose();
		if (localImportItemProvider != null) localImportItemProvider.dispose();
		if (matchCaseItemProvider != null) matchCaseItemProvider.dispose();
		if (matchStatementItemProvider != null) matchStatementItemProvider.dispose();
		if (namedObjectItemProvider != null) namedObjectItemProvider.dispose();
		if (polyContextItemProvider != null) polyContextItemProvider.dispose();
		if (polyTypeItemProvider != null) polyTypeItemProvider.dispose();
		if (prefixItemProvider != null) prefixItemProvider.dispose();
		if (quantLambdaItemProvider != null) quantLambdaItemProvider.dispose();
		if (referencingFuncItemProvider != null) referencingFuncItemProvider.dispose();
		if (superTypeListItemProvider != null) superTypeListItemProvider.dispose();
		if (theoremBodyItemProvider != null) theoremBodyItemProvider.dispose();
		if (theoremDeclItemProvider != null) theoremDeclItemProvider.dispose();
		if (topLevelFileItemProvider != null) topLevelFileItemProvider.dispose();
		if (topLevelItemProvider != null) topLevelItemProvider.dispose();
		if (topLevelImportItemProvider != null) topLevelImportItemProvider.dispose();
		if (tupleItemProvider != null) tupleItemProvider.dispose();
		if (typeConstructorItemProvider != null) typeConstructorItemProvider.dispose();
		if (typeConstrBracketItemProvider != null) typeConstrBracketItemProvider.dispose();
		if (typeDeclContextItemProvider != null) typeDeclContextItemProvider.dispose();
		if (typePowerSetItemProvider != null) typePowerSetItemProvider.dispose();
		if (typedVariableItemProvider != null) typedVariableItemProvider.dispose();
		if (typedVariableListItemProvider != null) typedVariableListItemProvider.dispose();
		if (variableTypingItemProvider != null) variableTypingItemProvider.dispose();
		if (whereItemProvider != null) whereItemProvider.dispose();
		if (wrappedInfixItemProvider != null) wrappedInfixItemProvider.dispose();
	}

}
